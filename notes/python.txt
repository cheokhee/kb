def main():
...
if __name__ == '__main__':
    main()
===============
if the script is invoked directly, the above will be true
if the script is imported, the above will be false

==== automatic resource management ===
with open('filename','r') as myfile:
  for line in myfile:
    print(line)
==== automatic resource management ===

python interpreter:
>>> s=''
>>> dir(s)  #show attributes and methods

>>> help(s.isspace)  #get help on attributes


=== install cx_Oracle
get instantclient-basic-linux.x64-11.2.0.3.0.zip instantclient-sdk-linux.x64-11.2.0.3.0.zip from orable web site
unpack,
link libclntsh.so.11.1 to libclntsh.so
====
C_INCLUDE_PATH=~/instantclient_11_2/sdk/include LIBRARY_PATH=~/instantclient_11_2 pip3 install --user cx_Oracle
===
LD_LIBRARY_PATH=~/instantclient_11_2 python3

python dictionary looks like a JSON object

read command line argument: sys.argv
sys.argv[0]: command
sys.argv[1]: first argument
# need to import sys

Single and double quoted strings in Python are identical

>>> print('string1\nstring2')
string1
string2
>>> print(r'string1\nstring2') #raw character
string1\nstring2

string formatting:
>>> print("hi there %s" % "cheok")
hi there cheok
>>> "hi there {name}".format(name="cheok")
'hi there cheok'

__foo__: this is just a convention, a way for the Python system to use names that won't conflict
with user names. considered to built-in methods.

_foo: this is just a convention, a way for the programmer to indicate that the variable is private
(whatever that means in Python).

__foo: this has real meaning: the interpreter replaces this name with _classname__foo as a way to
ensure that the name will not overlap with a similar name in another class.

Python has two different ways to convert an object to a string: str() and repr().
str(): string representation of an object
repr(): internal representation
Printing an object uses str(); printing a list containing an object uses str()
for the list itself, but the
implementation of list.__str__() calls repr() for the individual items.
So you should also overwrite __repr__(). A simple
__repr__ = __str__

built-in class attributes:
__dict__: Dictionary containing the class's namespace.

__doc__: Class documentation string or none, if undefined.

__name__: Class name.

__module__: Module name in which the class is defined. This attribute is "__main__" in interactive mode.

__bases__: A possibly empty tuple containing the base classes, in the order of their occurrence in the base class list.

def test_var_args(*args): non-keyworded, variable-length argument list
def test_var_kwargs(**kwargs): keyworded, variable-length argument list.

An iterable is an object that has an __iter__ method which returns an iterator, or which defines a
__getitem__ method that can take sequential indexes starting from zero (and raises an IndexError
when the indexes are no longer valid). So an iterable is an object that you can get an iterator
from.
==
iter(anIterable): return an iterator
===
An iterator is an object with a next (Python 2) or __next__ (Python 3) method.
Whenever you use a for loop, or map, or a list comprehension, etc. in Python, the next method is
called automatically to get each item from the iterator, thus going through the process of
iteration.
===
for x in iterable:
===
iterable: an object that can be used in an iteration
iterator: an object that defines how to do the iteration
===
First letâ€™s look at the for loop under the hood. When Python executes the for loop, it first invokes
the __iter__() method of the container to get the iterator of the container. It then repeatedly
calls the next() method (__next__() method in Python 3.x) of the iterator until the iterator raises
a StopIteration exception. Once the exception is raised, the for loop ends.
===
A list is iterable, but a list is not its own iterator.
===
to see what the iterator returns: example:
a={1:'hi'}
In: iter(a).__next__()
Out: 1
--
In: iter(a.items()).__next__()
Out: (1, 'hi')

============= elpy ==============
C-c C-v         elpy-check
C-c C-z         elpy-shell-switch-to-shell
C-c C-c         elpy-shell-send-region-or-buffer
C-c C-n         elpy-flymake-next-error
C-c C-p         elpy-flymake-previous-error
C-c C-s         elpy-rgrep-symbol (browse references)
elpy-rpc-restart

var: flycheck-checker-error-threshold
Warning (flycheck): Syntax checker python-flake8 reported too many errors (710) and is disabled.

============= elpy ==============

print without newline:
print('blah', end="")
sys.stdout.write('blah')

data = {}
# OR
data = dict()

### Initially adding values ###

data = {'a':1,'b':2,'c':3}
# OR
data = dict(a=1, b=2, c=3)

### Inserting/Updating value ###

data['a']=1  # updates if 'a' exists, else adds 'a'
# OR
data.update({'a':1})
# OR
data.update(dict(a=1))
# OR
data.update(a=1)

### Merging 2 dictionaries ###

data.update(data2)  # Where data2 is also a dict.

### Deleting items in dictionary ###

del data[key] #Remove specific element in a dictionary
#OR
data.clear() #Clear entire dictionary

for k, v in a.items():
    print("key: %s, value: %s" % (k, v))

-- functional programming --
a=[2,3,4]
list(map((lambda x: x**2), a))
==> [4, 9, 16]
#same as below
[x**2 for x in a]

list(filter((lambda x: x<3), a))
==> [2]
#same as below
[x for x in a if x < 3]
==> [2]

sorting:
results.sort(key=lambda route: route.get('transit_time'))

from functools import reduce
reduce( (lambda x, y: x + y), [1, 2, 3, 4] )
#The left argument, x, is the accumulated value and the right argument, y, is the update value from the iterable.

ternary operation (python style):
expression1 if condition else expression2
example: 'yes' if 1>0 else 'no'

function arguments:
required argument
keyword argument
default argument
variable-length argument:
  def test_var_args(*args): non-keyworded, variable-length argument list
  def test_var_kwargs(**kwargs): keyworded, variable-length argument list.

consume rest:
import requests
response=requests.get('http://localhost:3002/find-all-routes?pol=HKG&pod=LGB&arrival_date_iodt=20151231000000.000&day_range=7&day_after_arrival=7&max_ts=0')
response.json()

urwid: console user interface library

python2 -m SimpleHTTPServer
python3 -m http.server

list comprehension example:
S = [x**2 for x in range(10)]
V = [2**i for i in range(13)]
M = [x for x in S if x % 2 == 0]

convert string to datetime:
format='%Y%m%d%H%M%S' # date string: 20160126224023
datetime.datetime.strptime(date_str, format)
format='%Y-%m-%dT%H:%M:%SZ'
datetime.datetime.strptime('2015-10-01T13:29:58Z',format)
===
convert datetime to string:
datetime.strftime("%Y%m%d%H%M")
output: '201603160833'

csv processing:
columns of csv file: FACILITY_CODE, PORT_CODE, PORT_ID

==========
import csv

    with open(filename) as data_file:
        reader = csv.DictReader(data_file)

        for row in reader:
            facility_code = row['FACILITY_CODE']
            port_code = row['PORT_CODE']
            port_id = row['PORT_ID']

==========

http requests:
import requests
url="http://host:port/path"
params={'pod': 'AJM'}
r=requests.get(url, params=params)
>>> r.status_code
200
>>> r.headers['content-type']
'application/json; charset=utf8'
>>> r.encoding
'utf-8'
>>> r.text
return a string
>>> r.json()
return a dictionary

skip first line of file:
with open(input_file) as f:
    next(f)
    for line in f:
       # do stuff with line

debugger:
import pdb; pdb.set_trace()
--
python3 -m pdb hello.py
---
Type M-x cd to change directory to the location of the program you wish to debug. Type M-x
pdb. You'll be prompted with Run pdb (like this): pdb. Enter the name of the program (e.g. test.py).

Jupyter: an application that allows the users to save an interactive session into a file called
a notebook. This file can contain narrative text, live code, and rich output generated by
executing code (such as images, video, and graphs). This file represents a complete and
self-contained record of a session. And it can be replayed.
--
consists of a web application frontend and kernel (which executes code)

pandas module:
data = pandas.read_csv("door1.csv")
print(data.head(2)) # print the first two rows
print(data.shape) # print the number of rows and columns
print(data.dtypes) #print column name and data type
print(data.column.head(2)) # print column of first two rows
print(df[['BERTH_ARR_STR','LT_BERTH_ARR_STR']].head(2)) #print specified columns of first two rows
print(data.describe())
back_door = data[data.Door_Location == 'BACK DOOR'] OR back_door = data[data['Door_Location'] == 'BACK DOOR']
pandas.to_datetime(back_front_door['Time'], format='%m/%d/%Y %H:%M')
data[['Time', 'Door_Location']] # get a subset of columns
====
pandas series:  a one-dimensional labeled array
The axis labels are collectively referred to as the index
data={'name':'cheok','age':10}
s=pandas.Series(data=data,index=['name','age']) OR pandas.Series(data)
print(s):
name    cheok
age        10
dtype: object
====
OR:
pandas.Series(['one',2])
0    one
1      2
dtype: object

#data can be python dict, ndarray (from numpy), a scalar value (like 5)

dataframe:
time_slot_array=[[..],[..],...] # a list of lists
pandas.DataFrame(data=time_slot_array, columns=['TimeSlot','Count'])
pandas.DataFrame([['cheok',10],['hee',20]],columns=['name','age'])
output:
    name  age
0  cheok   10
1    hee   20
====
df.values #df from above
array([['cheok', 10],
       ['hee', 20]], dtype=object)
-
print(df.values):
[['cheok' 10]
 ['hee' 20]]
===
create a sub-dataframe:
f[f['age'] == 10]
Out[]:
    name  age
0  cheok   10
======

another way:
pandas.DataFrame({'name': ['john','mike'],'age':[20,30]}):
   age  name
0   20  john
1   30  mike

type(dataframe['name']) -> pandas.core.series.Series
each column in a data frame is a Series
===
add a new column to an existing dataframe: df['diff_A_B'] = df['A'] - df['B']

another way:
data = {'name': ['Jason', 'Molly', 'Tina', 'Jake', 'Amy'],
        'year': [2012, 2012, 2013, 2014, 2014],
        'reports': [4, 24, 31, 2, 3]}
df = pd.DataFrame(data, index = ['Cochice', 'Pima', 'Santa Cruz', 'Maricopa', 'Yuma'])
df:
             name  reports  year
Cochice     Jason        4  2012
Pima        Molly       24  2012
Santa Cruz   Tina       31  2013
Maricopa     Jake        2  2014
Yuma          Amy        3  2014

pandas.DataFrame:
0 or â€˜indexâ€™: apply function to each column
1 or â€˜columnsâ€™: apply function to each row

dataframe to dict
csv:
SERVICE_LOOP_CDE,ROUND_TRIP_SCHEDULE_LENGTH_IN_HOUR
PMAL,685
---
df=pandas.read_csv("its-proforma.csv")
d=df.set_index('SERVICE_LOOP_CDE')['ROUND_TRIP_SCHEDULE_LENGTH_IN_HOUR'].to_dict()

get value from a single cell
df.iat[row,col] -> df.iat[0,0] # first row and first column
df.iat[1,0] -> second row, first column
---
df.at[row_num, column_name] -> df.at[0, 'SERVICE_LOOP_CDE']
same as
df.get_value(0,'SERVICE_LOOP_CDE')

Series.item() -> return the first element (if there is only one row)
example: df.head(1)['TRADE'].item()

== list unique/distinct values
df.name.unique()

for row in dataframe.itertuples():
  print(row[1]) #first column, zeroth column is the index

numpy.random.randn(5) -> return an ndarray
numpy.array([1,2,3])
numpy.array([[1,2,3],[4,5,6]])

groupby example:
df2 = pandas.DataFrame({'X' : ['B', 'B', 'A', 'A'], 'Y' : [1, 2, 3, 4]})
output:
   X  Y
0  B  1
1  B  2
2  A  3
3  A  4
--
 df2.groupby('X').sum()
output:
   Y
X
A  7
B  3

dataframe.isnull().values.any()

HashMap<String, Object> result = RouteUtil.convertToStandardFormat(combinedRelationships, from, pod, 0);

#pandas: load csv by url
url = "https://goo.gl/vhm1eU"
names = ['preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class']
data = pandas.read_csv(url, names=names)
--
import matplotlib.pyplot as plt
from pandas.tools.plotting import scatter_matrix
scatter_matrix(data)
plt.show()
----
from sklearn.preprocessing import StandardScaler
array = dataframe.values
# separate array into input and output components
X = array[:,0:8]
Y = array[:,8]
scaler = StandardScaler().fit(X)
rescaledX = scaler.transform(X)
# summarize transformed data
numpy.set_printoptions(precision=3)
print(rescaledX[0:5,:])
---
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from sklearn.linear_model import LogisticRegression
url = "https://goo.gl/vhm1eU"
names = ['preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class']
dataframe = read_csv(url, names=names)
array = dataframe.values
X = array[:,0:8]
Y = array[:,8]
kfold = KFold(n_splits=10, random_state=7)
model = LogisticRegression()
results = cross_val_score(model, X, Y, cv=kfold)
print("Accuracy: %.3f%% (%.3f%%)" % (results.mean()*100.0, results.std()*100.0))
---
scoring = 'neg_log_loss'
results = cross_val_score(model, X, Y, cv=kfold, scoring=scoring)
print("Logloss: %.3f (%.3f)" % (results.mean(), results.std()))
----
# compare models
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from sklearn.linear_model import LogisticRegression
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
models = []
models.append(('LR', LogisticRegression()))
models.append(('LDA', LinearDiscriminantAnalysis()))
# evaluate each model in turn
results = []
names = []
scoring = 'accuracy'
for name, model in models:
	kfold = KFold(n_splits=10, random_state=7)
	cv_results = cross_val_score(model, X, Y, cv=kfold, scoring=scoring)
	results.append(cv_results)
	names.append(name)
	msg = "%s: %f (%f)" % (name, cv_results.mean(), cv_results.std())
	print(msg)
----
from sklearn.ensemble import RandomForestClassifier
num_trees = 100
max_features = 3
kfold = KFold(n_splits=10, random_state=7)
model = RandomForestClassifier(n_estimators=num_trees, max_features=max_features)
results = cross_val_score(model, X, Y, cv=kfold)
print(results.mean())
--
#saving and loading the model
import pickle
model = LogisticRegression()
model.fit(X_train, Y_train)
# save the model to disk
filename = 'finalized_model.sav'
pickle.dump(model, open(filename, 'wb'))
# load the model from disk
loaded_model = pickle.load(open(filename, 'rb'))
result = loaded_model.score(X_test, Y_test)
print(result)

Pickling is the process whereby a Python object hierarchy is converted into a byte stream, and
unpickling is the inverse operation, whereby a byte stream is converted back into an object
hierarchy. pickling: serialization

zip: create an iterator that aggregates elements from a collection of iterables
zip example:
>>> a=[1,2,3,4,5]
>>> b=['a','b','c','d','e']
>>> for x,y in zip(a,b):
...   print(x,y)
...
1 a
2 b
3 c
4 d
5 e
=====
>>> list(zip(a,b))
[(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')]
>>> dict(zip(a,b))
{1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e'}
>>> tuple(zip(a,b))
((1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e'))
>>> set(zip(a,b))
{(1, 'a'), (4, 'd'), (3, 'c'), (2, 'b'), (5, 'e')}

scikit-learn supervised model functions: fit(), predict(), score()

String literals may optionally be prefixed with a letter `r' or `R'; such strings are called raw
strings and use different rules for backslash escape sequences. A prefix of 'u' or 'U' makes the
string a Unicode string. Unicode strings use the Unicode character set as defined by the Unicode
Consortium and ISO 10646.
---
Without the r, backslashes are treated as escape characters. With the r, backslashes are treated as
literal.

useful built-inmodules:
import itertools #stuff like Cartesian product and permutation
import functools #lots of decorators, for example a decorator that stores the last output in a cage and uses it again if possible
import sys, os #do system level stuff
import subprocess, multithreading, multiprocessing #various multithreading strategies
import curses #mess with the terminal
import tkinter #make fancy GUIs
import pickle #serialize objects
import urllib, ftplib, httplib, poplib #communicate with the internet
import md5, zlib, gzip, csv, xml, json #common file formats

useful modules:
import twisted #asyncronious network programming
import pygame #graphics programming
import crypto #user friendly cryptography
import httplib2 #more standards-compliant http
import numpy #advanced math and statistics
import django #python HTTP server framework

b'\xcf\x84o\xcf\x81\xce\xbdo\xcf\x82'.decode('utf-16') #decode a byte string
'cheok'.encode('utf-16') # convert to a byte string
'\u8a31'.encode('utf-8')
--
a byte string is a sequence of bytes, not human-readable
a string is a sequence of characters
--
Bytes literals are always prefixed with 'b' or 'B'; they produce an instance of the bytes type
instead of the str type. They may only contain ASCII characters; bytes with a numeric value of 128
or greater must be expressed with escapes.

str :  a sequence of Unicode characters
bytes : a sequence of bytes

memory usage:
import resource
print( 'Memory usage: %s (MB)' % (resource.getrusage(resource.RUSAGE_SELF).ru_maxrss / 1000.0))

#check syntax: (can also use flake8, pyflakes)
python -m py_compile script.py

pass : do no-op

matplotlib customization: ~/.config/matplotlib/matplotlibrc
matplotlib backend:
#1: put in file: backend:TkAgg
#2: MPLBACKEND="Agg" python3 script.py

import matplotlib.pyplot as plt
plt.get_backend()

in IPython: do %matplotlib first

in python script: dataframe.plot() : make it show the plot
import matplotlib.pyplot as plt
...
plt.show()


Python lists have a built-in sort() method that modifies the list in-place and a sorted() built-in
function that builds a new sorted list from an iterable.
-- sort in reverse [].sort(reverse=True)

>>> a=("this is" " a string")
>>> a
'this is a string'

convert a byte string into a regular string:
str(byte-string, 'utf-8')
eg: str(b'abc','utf-8')

pep8: style checker
pyflakes: syntax checker
flake8: wrapper around pep8 and pyflakes

python3 debugger: trepan3k (also install xdis), gdb-like python debugger
trepan3k command:
b <line#>
pr <variable name> OR <variable name>
info lo
list . #list source code around where we stop
list <line#> <# of lines>

post-mortem debugger:! After an exception is thrown, the stack frame with all of the locals is
contained within sys.last_traceback. You can do pdb.pm() to go to the stack frame where the
exception was thrown then p(retty)p(rint) the locals().

#extract tabular data from a web page
tables = pandas.read_html("http://apps.sandiego.gov/sdfiredispatch/")
print(tables[0])

standard tuple uses numerical indexes to access its members.
===
namedtuple assigns names, as well as the numerical index, to each member.
namedtuple creates a new subclass of tuple with named fields.
--
from collections import namedtuple
Person = namedtuple('Person', 'name age gender')
bob = Person(name='Bob', age=30, gender='male')
jane = Person('jane',25,'female')
also: Food = namedtuple("Food", ["name", "unit_cost", "qmin", "qmax"])
===
Point = namedtuple('Point', ['x', 'y'])
p = Point(11, y=22)
d = p._asdict()                 # convert to a dictionary
Point(**d)                      # convert from a dictionary
Point(*t) # convert from a tuple

debugging:
https://stackoverflow.com/questions/3442920/how-do-i-step-through-debug-a-python-web-application
#1.
import pdb
pdb.set_trace()
#2. drop you to the interpreter. ctrl-d exits
import code
code.interact(local=locals())
#3. drop you to a IPython session
import IPython.Shell
ipshell = IPython.Shell.IPShellEmbed()
ipshell(local_ns=locals())

pip3 list --user
pip3 list --user --outdated
pip3 list --user --uptodate
pip3 install --user --upgrade <pkg> #upgrade pkg

== debugging weirdness ===
app = Flask(__name__)
app.run(debug=True, port=8888)
if debug=True, then debugger does not stop in web service breakpoint.
if debug=False, then debugger stops in web service breakpoint.

if a: #if a is None, '', 0, then false, else true

defaultdict: similar to ifAbsent:Put:
a=defaultdict(lambda: [])
b=a["one"] # return an empty list because the key does not exist
a["two"].append(1) # put the key in the dict

PYTHONPATH: search path for module files
PYTHONHOME: the location of the standard Python libraries

python3 -m zeep http://host/wls_dom_sps/CmtxCostWebService?wsdl

when iterating over a dict, each element is the key
to get the value, use dict.values()

#to exit: sys.exit(1)

falsy: 0, "", empty list, None

import platform
platform.system()

sys.version
sys.version_info

python3 setup.py --help
python3 setup.py --help install

PYTHONHOME: the location of the standard Python libraries
PYTHONPATH: Augment the default search path for module files. -> sys.path

sys.prefix

a="one","two"
>>> a
('one', 'two')
>>> type(a)
<class 'tuple'>

"%s is name" % "cheok"
--> 'cheok is name'

def foo(param1, *param2):
# The *args will give you all function parameters as a tuple

def bar(param1, **param2):
# **kwargs will give you all keyword arguments except for those corresponding to a formal parameter as a dictionary

_single_leading_underscore: weak "internal use" indicator. E.g. from M import * does not import
objects whose name starts with an underscore.

Any identifier of the form __spam (at least two leading underscores, at most one trailing
underscore) is textually replaced with _classname__spam, where classname is the current class name
with leading underscore(s) stripped.
==
example: in Model class:
  self.__allcts = []
-> do this: mdl._Model__allcts

locals()
globals()
vars()

create an object with arbitrary attributes:
anObj = type('', (), {})()
anObj.name = 'blah'
