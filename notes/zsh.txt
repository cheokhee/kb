$ cat ~/.zshenv
ZDOTDIR=$HOME/.zsh
. $ZDOTDIR/.zshenv


There are five startup files that zsh will read commands from:

$ZDOTDIR/.zshenv
$ZDOTDIR/.zprofile
$ZDOTDIR/.zshrc
$ZDOTDIR/.zlogin
$ZDOTDIR/.zlogout
If ZDOTDIR is not set, then the value of HOME is used; this is the usual case.

order: zshenv, zprofile, zshrc, zlogin

`.zshenv' is sourced on all invocations of the shell, unless the -f option is set. It should contain
commands to set the command search path, plus other important environment variables. `.zshenv'
should not contain commands that produce output or assume the shell is attached to a tty.

`.zshrc' is sourced in interactive shells. It should contain commands to set up aliases, functions, options, key bindings, etc.

`.zlogin' is sourced in login shells. It should contain commands that should be executed only in
login shells. `.zlogout' is sourced when login shells exit. `.zprofile' is similar to `.zlogin',
except that it is sourced before `.zshrc'. `.zprofile' is meant as an alternative to `.zlogin' for
ksh fans; the two are not intended to be used together, although this could certainly be done if
desired. `.zlogin' is not the place for alias definitions, options, environment variable settings,
etc.; as a general rule, it should not change the shell environment at all. Rather, it should be
used to set the terminal type and run a series of external commands (fortune, msgs, etc).

http://zsh.sourceforge.net/FAQ/zshfaq.html
https://unicodebook.readthedocs.io/about.html

https://github.com/search?q=zsh+dotfiles&ref=commandbar

export ZDOTDIR=${HOME}/.config/zsh
If $ZDOTDIR is not set, $HOME is used instead.
If option RCS is unset in any of the files, no configuration files will be read after that file.
If option GLOBAL_RCS is unset in any of the files, no global configuration files (/etc/zsh/*) will be read after that file.

compinit -d ~/.cache/zsh/zcompdump-$ZSH_VERSION
.zcompdump files are produced to speed up the running of compinit
Change the value for HISTFILE to set different location to store you zsh command history.
changing the value of $ZDOTDIR to $HOME/.config/zsh

--plugins
safe-paste: write a return character in your shell when you paste something with an EOL character in
   it instead of executing the command right away.
docker: docker auto completion
zsh-autosuggestions: show you a possible completion of the current line you are typing based on your history
k: ls alternative, shows git status of files and uses informative colors
command-no-found: shows you how to install the required missing package when you type a not found command

==zstyle examples
The first line ignores .mc and .gem patterns after issuing cd [TAB]. The next line ignores them after issuing sudo [TAB].
zstyle ':completion:*:cd:*' ignored-patterns '(*/)#.mc' '(*/)#.gem'
zstyle ':completion:*:sudo:*' ignored-patterns '(*/)#.mc' '(*/)#.gem'

whence -p <command> #show absolute path
which is equivalent to whence -c
type is equivalent to whence -v

get a script absolute path: ${0:A}
get the directory where a script is located: ${0:A:h}
Source: zshexpn man page, section HISTORY EXPANSION, subsection Modifiers

$fpath: contain files that contain functioins for the completion system

typeset -Z 3 <varname> #make a variable at least 3 characters long
typeset -Z 3 name
name=7
print $name
==> 007

typeset -r <varname> #make a variable read-only

typeset -U <varname> #create a unique set
blah=(1 2 3 4 5 2 2 2 4 4 4 4 1 1 1 )
print $blah
--> 1 2 3 4 5

#repeat a command 3 times
repeat 3 <command>

vi *(.om[1])  # newest file o=order m=modified
ls *(.Om[1])  # oldest file
ls *(.oL[1])  # smallest file L=Size
ls *(.OL[1])  # largest file
ls -hlS /**/*(.OL[1,10]) # find the 10 biggest files on your system
gvim -p *(.om[1,3]) # open 3 newest files in tabs
