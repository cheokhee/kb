$ cat ~/.zshenv
ZDOTDIR=$HOME/.zsh
. $ZDOTDIR/.zshenv


There are five startup files that zsh will read commands from:

$ZDOTDIR/.zshenv
$ZDOTDIR/.zprofile
$ZDOTDIR/.zshrc
$ZDOTDIR/.zlogin
$ZDOTDIR/.zlogout
If ZDOTDIR is not set, then the value of HOME is used; this is the usual case.

order: zshenv, zprofile, zshrc, zlogin

`.zshenv' is sourced on all invocations of the shell, unless the -f option is set. It should contain
commands to set the command search path, plus other important environment variables. `.zshenv'
should not contain commands that produce output or assume the shell is attached to a tty.

`.zshrc' is sourced in interactive shells. It should contain commands to set up aliases, functions, options, key bindings, etc.

`.zlogin' is sourced in login shells. It should contain commands that should be executed only in
login shells. `.zlogout' is sourced when login shells exit. `.zprofile' is similar to `.zlogin',
except that it is sourced before `.zshrc'. `.zprofile' is meant as an alternative to `.zlogin' for
ksh fans; the two are not intended to be used together, although this could certainly be done if
desired. `.zlogin' is not the place for alias definitions, options, environment variable settings,
etc.; as a general rule, it should not change the shell environment at all. Rather, it should be
used to set the terminal type and run a series of external commands (fortune, msgs, etc).

http://zsh.sourceforge.net/FAQ/zshfaq.html
https://unicodebook.readthedocs.io/about.html

https://github.com/search?q=zsh+dotfiles&ref=commandbar

export ZDOTDIR=${HOME}/.config/zsh
If $ZDOTDIR is not set, $HOME is used instead.
If option RCS is unset in any of the files, no configuration files will be read after that file.
If option GLOBAL_RCS is unset in any of the files, no global configuration files (/etc/zsh/*) will be read after that file.

compinit -d ~/.cache/zsh/zcompdump-$ZSH_VERSION
.zcompdump files are produced to speed up the running of compinit
Change the value for HISTFILE to set different location to store you zsh command history.
changing the value of $ZDOTDIR to $HOME/.config/zsh

--plugins
safe-paste: write a return character in your shell when you paste something with an EOL character in
   it instead of executing the command right away.
docker: docker auto completion
zsh-autosuggestions: show you a possible completion of the current line you are typing based on your history
k: ls alternative, shows git status of files and uses informative colors
command-no-found: shows you how to install the required missing package when you type a not found command

==zstyle examples
The first line ignores .mc and .gem patterns after issuing cd [TAB]. The next line ignores them after issuing sudo [TAB].
zstyle ':completion:*:cd:*' ignored-patterns '(*/)#.mc' '(*/)#.gem'
zstyle ':completion:*:sudo:*' ignored-patterns '(*/)#.mc' '(*/)#.gem'

whence -p <command> #show absolute path
which is equivalent to whence -c
type is equivalent to whence -v

get a script absolute path: ${0:A}
get the directory where a script is located: ${0:A:h}
Source: zshexpn man page, section HISTORY EXPANSION, subsection Modifiers
--
$ echo $a
/home/cheok/tmp/a2/j.txt
$ echo ${a:h}
/home/cheok/tmp/a2
$ echo ${a:t}
j.txt

$fpath: contain files that contain functioins for the completion system

typeset -Z 3 <varname> #make a variable at least 3 characters long
typeset -Z 3 name
name=7
print $name
==> 007

typeset -r <varname> #make a variable read-only

typeset -U <varname> #create a unique set
blah=(1 2 3 4 5 2 2 2 4 4 4 4 1 1 1 )
print $blah
--> 1 2 3 4 5

#repeat a command 3 times
repeat 3 <command>

vi *(.om[1])  # newest file o=order m=modified
ls *(.Om[1])  # oldest file
ls *(.oL[1])  # smallest file L=Size
ls *(.OL[1])  # largest file
ls -l *(.L0)   #show empty files
ls -hlS /**/*(.OL[1,10]) # find the 10 biggest files on your system
gvim -p *(.om[1,3]) # open 3 newest files in tabs
--
o: ascending order
O: descending order

zsh:
ls (*.txt|*.crt)

^x
(Requires EXTENDED_GLOB to be set.) Matches anything except the pattern x. This has a higher
precedence than '/', so '^foo/bar' will search directories in '.' except './foo' for a file named
'bar'.

x~y
(Requires EXTENDED_GLOB to be set.) Match anything that matches the pattern x but does not match
y. This has lower precedence than any operator except '|', so '*/*~foo/bar' will search for all
files in all directories in '.' and then exclude 'foo/bar' if there was such a match. Multiple
patterns can be excluded by 'foo~bar~baz'. In the exclusion pattern (y), '/' and '.' are not treated
specially the way they usually are in globbing.

x#
(Requires EXTENDED_GLOB to be set.) Matches zero or more occurrences of the pattern x. This operator
has high precedence; '12#' is equivalent to '1(2#)', rather than '(12)#'. It is an error for an
unquoted '#' to follow something which cannot be repeated; this includes an empty string, a pattern
already followed by '##', or parentheses when part of a KSH_GLOB pattern (for example, '!(foo)#' is
invalid and must be replaced by '*(!(foo))').

x##
(Requires EXTENDED_GLOB to be set.) Matches one or more occurrences of the pattern x. This operator
has high precedence; '12##' is equivalent to '1(2##)', rather than '(12)##'. No more than two active
'#' characters may appear together. (Note the potential clash with glob qualifiers in the form
'1(2##)' which should therefore be avoided.)

Approximate matching (need extended_glob)
ls (#a1)foobar
--
matches all files with the name foobar but also files with the names fobar, foobra or foxbar. The
number after the a defines how far the correction goes. A number of 1 corrects up to one
mistake.

file type qualifier:
. -> regular files
/ -> directory
@ -> symbolic link
= -> socket
p -> named pipes
* -> executable files
r -> owner readable
w -> owner writeable
x -> owner executable
---
example:
ls -d *(/) #directory only
ls *(*) # show executable files, does not include directory
ls *(x) # show owner executable, include directory
ls *(.) #show regular files
ls .*(.) #show regular . files
ls -d *(@,/) #show directory and symbolic link
ls -d *~*.*(.) #list all regular files that don't have a . in the name
ls -l **/*(/^F)  #list all empty directories
ls Downloads/(#i)*jpg #case insensitive

#find directories that contain pom.xml
# / : match directory only
# the colon after the e is a separator for the command
# During the execution of string the filename currently being tested is available in the parameter REPLY
# The string will be executed as shell code.  The filename will be included in the list if and only if the code returns a zero status
# -e : true if file exists
ls -d **/*(/e:'[[ -e $REPLY/pom.xml ]]':)

ls e2ev/e2ev_fe/app/src/**/*.yml(:h) #get the directory only
ls e2ev/e2ev_fe/app/src/**/*.java([1]:h)

ls e2ev/e2ev_fe/app/src/**/*.java([1]) #list the first one
ls e2ev/e2ev_fe/app/src/**/*.java([1,3]) #list the first three

$ echo $f
/tmp/test/index.html
$ echo ${f:h}
/tmp/test
$ echo ${f:t}
index.html
$ echo ${f:e}
html
$ echo ${f:r}
/tmp/test/index
$ echo ${f:h:h}
/tmp

zshmisc: precommand modifier
Invoking a shell with a - prepended to its name (-sh, -bash, -zsh) is an old convention for
indicating the shell should start a login session.

$ file=thisabcdes
$ echo ${file#this}   #remove pattern from the front
abcdes
$ echo ${file%cdes}  #remove pattern from the end
thisab
