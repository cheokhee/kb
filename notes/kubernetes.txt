kubectl get pods -A #-A: all namespace
kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
kubectl get namespace
kubectl get nodes
kubectl cluster-info
kubectl cluster-info dump
kubectl version --client
kubectl describe pods
kubectl logs <pod-name>
kubectl exec <pod_name> -- env
kubectl exec -ti <pod_name> -- /bin/bash
kubectl get events --sort-by=.metadata.creationTimestamp

steps:
1. create cluster
2. create deployment
3. create service

#create deployment, a pod then gets created. then do kubectl get events to see what happened

#expose the pod
kubectl expose deployment hello-node --type=LoadBalancer --port=8080 #this is the port number inside the pod

kubectl create deployment kubernetes-bootcamp --image=gcr.io/google-samples/kubernetes-bootcamp:v1
kubectl create deployment hello-node --image=k8s.gcr.io/echoserver:1.4
kubectl get deployments

kubectl delete service hello-node
kubectl delete deployment hello-node

kubectl config set-context --current --namespace=<insert-namespace-name-here>

kubectl config view --minify | grep namespace:

kubectl api-resources --namespaced=true
kubectl api-resources --namespaced=false

kubernetes pod: a collection of containers co-located on a single machine. deployed as a unit.

kubernetes service: take one or more pods and expose them through a single endpoint URL.

kubernetes operator: a method of packaging, deploying, and managing a Kubernetes application.

kubectl -n dhmp-int-dshrd get ServiceBinding -l microservice=dhmp_ui -o name
kubectl -n dhxp-int-dshrd get VirtualService -l microservice=dhxp_svc -o name
kubectl apply -f k8s-acr-secret.yml --wait=true

kubectl -n e2ev-int-dshrd get Deployment -l microservice=e2ev_be -o name
kubectl -n e2ev-int-dshrd get Deployment e2ev-be-20200423191913819-deployment -o 'jsonpath={.metadata.labels.cms-replicas}'
kubectl -n e2ev-int-dshrd scale --replicas=1 deployment e2ev-be-20200423191913819-deployment
kubectl -n e2ev-int-dshrd wait --for=condition=available deployments e2ev-be-20200423191913819-deployment --timeout=180s

kubectl apply -f service-binding.yml --wait=true
kubectl apply -f my-app.yaml #Deploy the application
kubectl get service <app-name> --watch

Kubernetes supports multiple virtual clusters backed by the same physical cluster. These virtual
clusters are called namespaces


https://kubernetes.io/docs/reference/kubectl/cheatsheet/
https://kubernetes.io/docs/tasks/debug-application-cluster/debug-application/

kubernetes: A node pool is a group of nodes within a cluster that all have the same configuration.

Kubernetes coordinates a highly available cluster of computers that are connected to work as a
single unit. Kubernetes automates the distribution and scheduling of application containers across a
cluster in a more efficient way.

A Kubernetes cluster consists of two types of resources:
The Master coordinates the cluster
Nodes are the workers that run applications, Each node has a Kubelet, which is an agent for managing
the node and communicating with the Kubernetes master.

#create a proxy that will forward communications into the cluster-wide, private network
kubectl proxy #default port: 8001
curl http://localhost:8001/version
curl http://localhost:8001/api/v1/namespaces/default/pods/$POD_NAME/proxy/

https://kubernetes.io/docs/tasks/administer-cluster/access-cluster-api/
#1: using kubectl proxy
kubectl proxy --port=8080 &
curl http://localhost:8080/api/
#2: without proxy
# Gets the token value
TOKEN=$(kubectl get secrets -o jsonpath="{.items[?(@.metadata.annotations['kubernetes\.io/service-account\.name']=='default')].data.token}"|base64 --decode)
# Explore the API with TOKEN
e.g. curl -X GET https://172.17.0.3:8443/api --header "Authorization: Bearer $TOKEN" --insecure
curl -X GET $APISERVER/api --header "Authorization: Bearer $TOKEN" --insecure

https://kubernetes.io/docs/concepts/overview/kubernetes-api/
#get swagger/openapi spec:
curl -X GET https://172.17.0.3:8443/openapi/v2 --header "Authorization: Bearer $TOKEN" --insecure

Once the application instances are created, a Kubernetes Deployment Controller continuously monitors
those instances. If the Node hosting an instance goes down or is deleted, the Deployment controller
replaces the instance with an instance on another Node in the cluster. This provides a self-healing
mechanism to address machine failure or maintenance.

The kubelet is the primary “node agent” that runs on each node. It can register the node with the
apiserver using one of: the hostname; a flag to override the hostname; or specific logic for a cloud
provider.

Kubernetes Master is a collection of three processes that run on a single node in your cluster,
which is designated as the master node. Those processes are: kube-apiserver, kube-controller-manager
and kube-scheduler.
--
Each individual non-master node in your cluster runs two processes: kubelet, which communicates with
the Kubernetes Master.  kube-proxy, a network proxy which reflects Kubernetes networking services on
each node.

By default, the Pod is only accessible by its internal IP address within the Kubernetes cluster. To
make the hello-node Container accessible from outside the Kubernetes virtual network, you have to
expose the Pod as a Kubernetes Service.
