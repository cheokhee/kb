TEE: The tee command reads standard input, then writes its content to standard output and simultaneously copies it into the specified file(s) or variables.
example: ls -1 | tee file.txt | less


The output of ls -l is redirected to tee which copies them to the file file.txt and to the pager less.
 The name tee comes from this scheme - it looks like the capital letter T

To view and save the output from a command (lint) at the same time:
lint program.c | tee program.lint

+++++++++++++++++++++++++++++++++++++++++++++++++++
parenthesis and curly braces:

(cmd1; cmd2) | cmd3
{ cmd1; cmd2;} | cmd3

Notice the semicolon at the end of the list in the curly brace. Also notice a space is required after the first "{."
 There is another difference: the parenthesis causes the shell to execute a new process, while the curly
brace does not. You can set variables in a curly brace, and it will be known outside the braces.
In the example below, the first echo prints "OLD" and the second prints "NEW:"

    a=OLD
    (a=NEW) ; echo $a
    { a=NEW;} ; echo $a


The parenthesis and curly brace are useful when you want to merge standard output of multiple commands

The parenthesis is useful when you want to change a state of the process without affecting the other processes.

#do a diff between stdin and a file
cat file1 | diff - file2

+++
Process substitution

<(command) expression tells the command interpreter to run command and make its output appear as a file.

## does not work in Git bash, need cygwin
example: diff <(sort file1) <(sort file2)


Process substitution can also be used to capture output that would normally go to a file, and redirect it to the input of a process.

The Bash syntax for writing to a process is >(command).

counts the lines in a file with wc -l and compresses it with gzip in one pass:
tee >(wc -l >&2) < bigfile | gzip > bigfile.gz   # does not work

#log a command to console and to 2 files separately stdout and stderr
command > >(tee stdout.log) 2> >(tee stderr.log >&2)  # does not work?

With <(...) one is expected to read from the substitution, and the command is set up to write to it.
With >(...) one is expected to write to the substitution, and the command inside is set up to read from it.

counter=0

while read; do
  ((counter++))
done < <(find /etc)

echo "$counter files"

uses named pipe under the hood
The syntax <(command) creates a named pipe, and attaches command's STDOUT to the pipe.
So, anything that reads from the pipe will actually be reading the output of command.


++++++++++++++

#If there is any error in the grep command it will be directed to the error file.
#redirect stderr to a file
grep wow file34 2>error

#redirect stderr to blah, then redirect stdout to where stderr is headed
echo "Alright man..." 2>blah >&2

#redirect stdout to output, then redirect stderr to where stdout is headed
grep wow file34 >output 2>&1

# grep wow non_existent_file 2>&1 |wc -l
result: 1


+++++
#complain if undefined:
$ echo ${none?"does not exist"}
bash: none: does not exist

#use default if undefined
$ echo ${none-default}
default

#use default if defined
$ echo ${HOME+default}
default

#use and define if undefined
$ echo ${none}   #undefined at T1
$ echo ${none="new value"}
new value
$ echo ${none}
new value

variations:
${variable:?word}   Complain if undefined or null
${variable:-word}   Use new value if undefined or null
${variable:+word}   Opposite of the above
${variable:=word}   use and define if undefined or null

++++++++++


if [ -z "$BLAH" ]; then echo none; fi
   -z is true if BLAH is undefined or has no value, think of -z as zero length



++++++++++++++
An exec <filename command redirects stdin to a file. From that point on, all stdin comes
 from that file, rather than its normal source (usually keyboard input).

exec > >(tee logfile)

exec > logfile #redirect stdout to a file. from this point, all stdout goes to that file

exec 6<&0          # Link file descriptor #6 with stdin.
                   # Saves stdin.
exec 0<&6 # Now restore stdin from fd #6
exec 6<&- #close fd #6

exec 6>&1           # Link file descriptor #6 with stdout.
                    # Saves stdout.
exec 1>&6 6>&-      # Restore stdout and close file descriptor #6.

+++++++++++++++++++

Copy all images to external hard-drive
# ls *.jpg | xargs -n1 -i cp {} /external-hard-drive/directory

+++++++++++++++++
shopt -s cdspell
shopt -s -> to set
shopt -u -> to unset
shopt -s nocaseglob -> match filename in a case-insensitive manner

find ~ -empty #find empty file

+++++++++++++++++++
test2.txt: one    two        three
$ cat test2.txt | awk -F " " '{print $2}'
two

$ cat test2.txt  | cut -d" " -f2
--> nothing

$ cat test2.txt  | tr -s " " |cut -d" " -f2
two

++++++

echo -e  #enable interpretation of backslash esacpe characters

echo ${blah} --> hello

echo ${#blah} --> 5

+++++++++++++++++++++

Replace all spaces in a filename with underscore for a given directory.

for i in *; do if echo $i | grep " " > /dev/null; then new_name=`echo $i | sed 's/ /_/g'`; mv "$i" $new_name; fi; done

+++++++++++++++++++++
run a command forever
--> while true; do echo hi; sleep 2; done


#dd default block size: 512 bytes
# create a 1MB file filled with null character (0x00)
dd if=/dev/zero of=foobar count=1024 bs=1024
OR (the next one is slower)
dd if=/dev/zero of=foobar count=1M bs=1

#by default, dd displays some output
$ dd if=/dev/zero of=blah count=10
10+0 records in
10+0 records out
5120 bytes (5.1 kB) copied, 0.004 s, 1.3 MB/s

#to ignore output:
$ dd if=/dev/zero of=blah count=10 2> /dev/null

#overwrite the first 10 bytes of a file with null bytes
dd if=/dev/zero of=mfReceiver.log bs=1 count=10 conv=notrunc

#back up entire harddisk, noerror: ignore error, sync: pad output blocks
dd if=/dev/sda of=/dev/sdb conv=noerror,sync
#create an image of a hard disk
dd if=/dev/hda of=~/hdadisk.img

#restore using hard disk image
dd if=hdadisk.img of=/dev/hdb

#benchmarking
dd if=/dev/zero bs=1024 count=1000000 of=file_1GB
dd if=file_1GB of=/dev/null bs=64k

#resize a file to 1M without resizing
dd if=/dev/zero of=mytestfile.out bs=1 count=0 seek=1M

#dd
skip=n Skips n input blocks (using the specified input block size) before starting to copy.
seek=n Skips n blocks (using the specified output block size) from beginning of output file before copying.

# find files that have been changed since 00:00
$ find .  -type f -newermt "00:00" -printf "%s %p\n" | sort -nr
1004057 ./pfw/pfwMsg.log
26248 ./messagebroker/mf/mfReceiver.log
25209 ./filLogs/trxMsg.log
24905 ./jpatxn/jpaTxnMsg.log
5995 ./dnd/dndMsg.log

find .... -printf "%f\n" --> print file name without leading directory stuff

find -xdev : don't descend to other filesystem

# find with execute
# one process per line
$ find .  -exec echo {} \;
.
./blah
./dnd.xml
# one process for multiple lines
$ find .  -exec echo {} \+
. ./blah ./dnd.xml


#listen on a port
nc -l <port-number>
#then in another terminal, do: telnet localhost <port-number>

#meaning of "$@" in script: all the command line arguments
#script:
#!/bin/sh
echo "$@"
-> ./test "this is just" wow ere
this is just wow ere

"$@" : expand to a quoted set of the command line arguments. arguments are individually double quoted
"$*" : expand to a unquoted set of the command line arguments.

$@ example: gzcat "a" "b" "my file.txt" > ...

-- diff between $* and $@
cmd line arg: one "two three"
$* is same as $@ -> each word is treated as a separate word
"$*" : all cmd line arg is treated as one parm --> "$1 $2"
"$@" : preserves the original set --> "$1" "$2"
preferred: "$@"
"$@" expands to "$1" "$2" "$3" ...
"$*" expands to "$1 $2 $3 .."

# using expr with regexp: expr <string> : <regexp>
# return # of chars that match
$ expr 'cheok' : '.*'
--> 5
# if use \( and \), return the matched string
$ expr 'cheok' : '\(.*\)'
--> cheok

whereis: search binary, source, and manual pages
which: search for binary only
type ls

$$: proc id
$!: proc id of last background job
$PPID: parent proc id

pr: paginate files for printing
fold: wrap each file of a file to a specified width

who -b : show last system boot time
last : show system boot time
last -x :
====
runlevel (to lvl 2)   3.0.0-15-generic Tue Apr 23 10:13 - 09:55  (23:41)
reboot   system boot  3.0.0-15-generic Tue Apr 23 10:13 - 09:55  (23:41)
shutdown system down  3.0.0-15-generic Tue Apr 23 10:13 - 10:13  (00:00)
runlevel (to lvl 6)   3.0.0-15-generic Tue Apr 23 10:13 - 10:13  (00:00)

wtmp begins Tue Apr 23 10:13:17 2013
======

stat <filename>: show mtime, atime, ctime

getopt, getopts

cat -v : show non-printable char
od -c : dump file with ascii

hex dump:
od -x <file>
hexdump -C <file> #preferred
hexdump -x <file>
hexdump -C -s 0x1be <file>  #dump with offset at 0x1be
preferred: xxd // no need to worry about endianness

xxd: can patch binary files
#1: do "xxd <file>" to identify address for patching
example: xxd <file>
0000000: 4220 7061 7463 6865 6420 2020 0000 0000  B patched   ....
0000010: 2066 6f6f 6c2e                            fool.

#2: change the first byte to C
echo "0000000: 43" | xxd -r - <file> #change the file in-place

runlevel:
0: shutdown
1: single user
2: multi user w/o networking
3: multi user w/ networking
5: multi user with X
6: reboot

utmp: keep track of the current login state of each user
wtmp: records all login and logout histories
btmp: records failed login attempts

#expand tab characters
pr -t -e[char width] file

#to see special chars of function keys
do: stty -echo; cat -v; stty echo
then press function keys

#init terminal
tput init
#reset terminal
tput reset

GNU history:
!# : the entire command line typed so far
$ cheok hee !#
cheok hee cheok hee
---
echo cheokthonghee !#:$.txt
--> echo cheokthonghee cheokthonghee.txt

!!:2 : 2nd arg of previous cmd
!!:0 : the 0th word (the cmd word)
!!:^ : first arg, same as !^
!!:$ : same as !$, last arg
!!:2-$ , same as !!:2*
!!:2- : like !!:2*, but omit the last word
!!:0- : get the previous cmd without the last word
!$:h -> remove trailing path of last arg
previous cmd: ls /etc/passwd
echo !$:h -> echo /etc
!$:t -> remove leading path of last arg
echo !$:t -> echo passwd
!$:r -> remove file extension
previous cmd: echo linux.txt
echo !$:r -> echo linux
# sed-like substitution: g is for global, s is for substitute
!!:gs/password/passwd/
#reuse the last substitution
!!:g&
!!:0-1:p -> print without executing it.

bash bind built-in command
bind -l : List the names of all Readline functions.
bind -p : list bindings
bind -P : list bindings
bind -v : display var and values
bind -V : display var and values
$ bind -q reverse-search-history
reverse-search-history can be invoked via "\C-r".

#set: set cmd line arg $1, $2, ...
#set one two : set $1 to one, set $2 to two
# $# will change as a result
#example:
+++++++++++++++++++++
$ cat test_set
#!/bin/bash
echo "first arg" $1
echo "second arg" $2
set new1 new2
echo "first arg" $1
echo "second arg" $2
+++++++++++++++++++++
#output:
$ test_set one "two 2"
first arg one
second arg two 2
first arg new1
second arg new2

# : eval to true
while :; do date; sleep 5; done
if :; then echo yes; else echo no; fi
#other usage: an empty statement
if false; then :; else echo no; fi

========================================
--> jot [rep] [start] [end] [step]
jot -c 1 65 -> A

jot -b yes 5 -> print 5 yes
jot -b yes 0 -> print an infinite number of yes

jot -w xa%c 26 a -> print strings xaa thru xaz

jot -r 4 -> give me 4 random number

jot -c 5 33 -> print ! " # $ % (from ASCII)

jot 1 A -> 65 (convert from ASCII to number)

jot -c 26 A -> print A thru Z

jot -s "" -b . 80 -> print 80 dots

jot -c -s " " 26 65 #returns the following
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z

jot -s " " 26 A #returns the following
65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90


=======
grep hi blah &> /dev/null # send stdout and stderr to /dev/null
grep hi blah >& /dev/null # send stdout and stderr to /dev/null

(umask 666; > mine)
ls -l mine
---------- 1 adminuser adminuser 0 Jun  4 10:18 mine

[[ -> prevent word splitting and pathname expansion
[ value == val* ]  --> false
[[ value == val* ]]  --> true

TEST="cheok hee"
--> [ "cheok hee" == $TEST ]
bash: [: too many arguments
[ "cheok hee" == "$TEST" ] --> true
[[ "cheok hee" == $TEST ]] --> true

#temporary set a variable for a command
LESS=-X less thoughts.txt

#trace system calls
strace -p <pid>
strace -e open uptime # trace only the open system call in uptime command
strace -f -s 4096 -p <pid>
# trace all files accessed by a process
strace -fe trace=creat,open,openat,unlink,unlinkat <command>
strace -e open,openat -o <filename> <command>
sudo strace -fe trace=creat,open,openat,unlink,unlinkat -e 'signal=!SIGIO' -p <pid>
sudo strace -fe trace=creat,open,openat,unlink,unlinkat -e signal=none -p <pid>
strace -s 80 -f ./program #print 80 characters of every string
strace -T : Print time spent in system call.
-s [size] Print [size] characters per string displayed. This is useful if you are trying to trace what a program is writing to a file descriptor.
-c Print a histogram of the number of system calls and the time spent at the termination of strace.

BASHOPTS var: shopt setting
SHELLOPTS var: set -o setting
RANDOM var: return a random number
SECONDS var: return number of seconds
LINENO var: line #
HISTCMD var: The history number, or index in the history list, of the current command
BASH_COMMAND var: the currently executing command.
GROUPS var: group id
DIRSTACK : dirs
for debugging: BASH_SOURCE, FUNCNAME, BASH_LINENO arrays
use : FUNCNAME[0],
see current setting: shopt , set -o
see current setting for set: echo $-
$-: The current set of options in your current shell.
output of $- : himBHs
which means that the -h, -m, -B and -H options are enabled, that the shell is interactive (-i) and
reading from standard input (-s).
--
The $- constant expands to the current option flags specified upon invocation
-meanings:
h - Remember the location of commands as they are looked up
i - It means shell is interactive
m - Job control is enabled
B - The shell will perform brace expansion
H - Enable ! style history substitution. This flag is on by default when the shell is interactive.
s - Commands are read from the standard input device such as keyboard. This option allows the positional parameters to be set when invoking an interactive shell or when reading input through a pipe.

#enable timestamp in bash history
export HISTTIMEFORMAT="%F %T "

((..)), let : arithmetic
echo $((a++))
echo $((3*6))
let b=b+10

#create temp files
mktemp --tmpdir=. tmp.XXX
mktemp --tmpdir=.
tempfile -d .
===
cat post-data.txt | while read line; do echo $line >> $(tempfile -d .);done

/dev/random and /dev/urandom : random number generator from the kernel
/dev/random blocks if there is not enough noise in the entropy pool
/dev/urandom does not block

select builtin : for building menu
select file in *; do echo "you picked $REPLY: $file"; done
1) tmp.sUd
2) tmp.ySY
#? 1
you picked 1: tmp.sUd
#? 2
you picked 2: tmp.ySY

====================
hash builtin in bash: a hash table of executed commands
(1) hash
hits	command
   4	/bin/grep
   1	/usr/bin/tty
(2) hash -d cat
(3) hash -l -> list hash table
(4) hash -r --> clear entire hash table

$ ls b*
ls: cannot access b*: No such file or directory
$ shopt -s failglob
$ ls b*
bash: no match: b*

other shopt: dotglob, nullglob

sort IP address with gnu sort
sort -n -t . -k 1,1 -k 2,2 -k 3,3 -k 4,4

sort -k 4.10,4.13n ->  sort by chars 10-13 of the fourth field (numerically)
#sort from position 9 to 12
sort -k1.9,1.12

#sort numerically, reverse, csv file, third field
#-t: separator
sort -rn -t , -k 3,3 svc-port-list.csv

#sort on first 3 fields
sort -rn -t , -k 1,3 svc-port-list.csv
#sort by second column
sort -t"," -k2,2 file.csv

#sort human-readable fils sizes
$ echo -e "1G\n1M" | sort -h
1M
1G

#count characters in a string: echo a number line directly below or above it.
echo "this is a test"; echo 123456789012345678901234567890

===============
HTTP 302 -> redirection
there is a Location field: contains the other URL

$ nc www.google.com 80
GET / HTTP/1.1

HTTP/1.1 200 OK
Date: Fri, 14 Jun 2013 15:49:11 GMT
===============

nohup
when a login shell exits, it sends a HUP signal to all of its children (background jobs),
which will terminate the background jobs.
To prevent this, use nohup to wrap the command.

#run a command with time limit
$ timeout 10 cheok
$ echo $?
124 # means time out

#answer no to all the prompts
yes n | cp -i * ../test
#answer yes to all the prompts
yes y | cp -i * ../test

#openssl
openssl s_client -connect www.google.com:443 #afterwards, type GET / HTTP/1.1
openssl genrsa -des3 1024 > server.key #generate RSA private key: passphrase: 4tnuyear
openssl req -new -key server.key -x509 -days 3650 -out server.crt #generate certificate
cat server.crt server.key > server.pem
openssl s_server -cert server.pem -accept 4433 -WWW #start SSL server: https://localhost:4433/README

#without WWW option, server will echo whatever is sent by client
openssl s_server -quiet -accept 4433
echo "cheok is here" | openssl s_client -quiet -connect localhost:4433

regular expression:
positive lookahead: (?=pattern)
/one(?=two)/ -> matches "one" followed by "two", without including "two" in $&

negative lookahead: (?!pattern)
/one(?!two)/ -> matches "one" not followed by "two", without including "two" in $&

positive lookbehind: (?<=pattern)
/(?<=one)two/ -> matches "two" preceded by "one", without including "one" in $&

negative lookbehind: (?<!pattern)
/(?<=one)two/ -> matches "two" not preceded by "one", without including "one" in $&

#sort and change the same file
sort -o sort.test sort.test

#paste : combine files horizontally
$ cat > f1
cheok
christine
$ cat > f2
20
10
$ paste -d" " f1 f2
cheok 20
christine 10
---
$ paste -d" " -s f1 f2
cheok christine
20 10
---
#combine multiple lines into one line
$ echo -e "file one\nfile two" | paste -s -d"|"
file one|file two

#join two files on a common field, first field is default join field. must be sorted on join field
$ cat > f1
cheok 10
blah 20
$ cat > f2
cheok hee
wow damn
$ join f1 f2
cheok 10 hee
--join example
join -t "|" in-vj-only.txt in-mine-only.txt
#show only in file 1
join -v 1 -t "|" in-vj-only.txt in-mine-only.txt
#join the first file (-1) by the second column and second file (-2) by the first
join -t"," -1 2 -2 1 first.txt second.txt
#outer join, replace blanks with NULL in columns 1 and 2
#-o: which field to substitue: 0 is key 1.1 first column, etc
join -t"," -1 2 -a 1 -a 2 -e ' NULL' -o '0,1.1,2.2' first.txt second.txt

various programs:
colrm : remove columns
fmt: formatting
look:  display lines beginning with a given string
nl: number lines
rev: reverse chars in a line

colrm example:
file:
1234567890
abcdefghij
===
$ cat file | colrm 2 3
14567890
adefghij
===
$ cat file | colrm 1 1
234567890
bcdefghij

#test redirection
#corresponding C function: isatty
if [ -t 1 ]; then
   echo "not redirected"
else
   echo "redirected"
fi

!# on command line: repeat everything up to this point:
example:

$ echo hi > blah && echo !#:0
echo hi > blah && echo echo

$ echo hi > blah && echo !#:1
echo hi > blah && echo hi

$ echo hi > blah && echo !#:2
echo hi > blah && echo >

$ echo hi > blah && echo !#:4
echo hi > blah && echo &&

#switch date formats: DD/MM and MM/DD
sed 's%\([0-9][0-9]\)/\([0-9][0-9]\)%\2/\1%' < file.txt

#change date of a file: format: YYYYMMDDhhmm
touch -t 201407311234 test.txt
ls -l test.txt
-rw-r--r-- 1 adminuser adminuser 0 Jul 31 12:34 test.txt

curly brace expansion:
$ echo {aa,bb,cc,dd,ee}
aa bb cc dd ee

$ echo {1..12}
1 2 3 4 5 6 7 8 9 10 11 12

$ echo d{2,3,4,5}
d2 d3 d4 d5

cygwin: bash completion is slow
rename /etc/profile.d/bash_completion.sh.orig

#print colors
for i in {0..255} ; do printf "\x1b[38;5;${i}mcolour${i}\n"; done

#linux: flush system buffers
sudo sh -c "sync; echo 3 > /proc/sys/vm/drop_caches"
sudo sh -c "sync; echo 0 > /proc/sys/vm/drop_caches"

#create backup file with original date time
cp -p pom.xml{,.bak}

#serve current directory tree at http://localhost:8000
python -m SimpleHTTPServer

#redirect stderr to terminal, redirect stdout to garbage
#end result: original stderr becomes stdout, original stdout disappears
<commands> 2>&1 1>/dev/null

#append a line at the end of the file, the last line will be 'wow'
sed -i '$awow' test.txt
---another way:
ed -s file1 << EOF
\$a    #my comment: need \ to prevent variable substitution by the shell
append this line
.
w
EOF
--another way
awk 'BEGIN{print "new line"}{print}' infile > outfile

#add a line at the top of a file
sed -i "1s/^/line1\n/" file
---another way:
ed -s file1 << EOF
0a
prepend line
.
w
EOF
--another way
awk '{print} END {print "new line"' infile > outfile

#replace the third apple
echo "apple,orange,apple,orange,apple,orange" | sed 's/apple/wow/3'

#readline:
Ctrl-]: search forward
M-Ctrl-]: search backward
C-x C-u: undo
C-x C-e: open current command in an editor
Alt-*: expand a glob

#bash:
M-. : insert the last argument of the previous command at cursor point
M-C-y: insert the first argument of the previous command at cursor point

#get day of the year, see more by date --help
date +'%j'

#rename file to same name plus timestamp
mv -iv $FILENAME{,.$(stat -c %y $FILENAME | awk '{print $1}')}

linux: check bad sector
badblocks -sv /dev/sda

gpicview <.png> #show picture

find . -name get_shp_num.sql | xargs -i sed -i 's/20140901000000/20141201000000/g' {}
find . -name get_shp_num.sql | awk '{printf("sqlplus -S global_supp/global_supp@ir4prod < %s >> unsorted\n",$1)}'

function toSlash { echo $1 | sed 's%\\%/%g'; }
function fromSlash { echo $1 | sed 's%/%\\%g'; }
function get { sed -n "$1,$1p" script_groovy; }

#truncate the last character
$ echo test | rev | cut -c2- | rev
> tes

#file attributes , see man page on chattr
#make file un-removable
chattr +i hi
lsattr hi
output: ----i--------e-- hi
rm hi
rm: cannot remove ‘hi’: Operation not permitted
chattr -i hi #now can remove file

#show extra debug info
bash -x <script name>

#eval builtin : used in combination with command substitution
#The args are read and concatenated together into a single command.
#This command is then  read  and executed by the shell,
example #1:
$( echo VAR=value ) -> VAR=value: command not found
eval $( echo VAR=value ) ->  echo $VAR -> value
example #2:
a="ls | more"
$a ->
ls: cannot access |: No such file or directory
ls: cannot access more: No such file or directory
eval $a -> list files
example #3: interesting observations:
3a:
HI=ls
$HI -> execute ls command
3b:
HI="ls|more"
$HI
ls|more: command not found

conclusion about shell:
first pass: init variable (VAR=VALUE), expand *, variable, and command substitution (`), identify pipes, and set up re-direction
second pass: execute the command

comm : compare two sorted files line by line

regexp:
1. positive lookahead: match a pattern followed by something else
t(?=s) : match the second t in streets

2. negative lookahead: match a pattern not followed by something else
t(?!s) : match the first t in streets

3. positive lookbehind: match a pattern preceeded by something else
(?<=s)t : match the first t in streets

4. negative lookbehind: match a pattern not preceeded by something else
(?<!s)t : match the second t in streets
another example:
(?<!c)ie : i before e except after c (matches ie not preceeded by c)

$RANDOM: generate random integer : range: 0 - 32767
echo $RANDOM

seq: print a sequence of numbers
seq <last>
seq <first> <last>
seq <first> <increment> <last>

#the colon command -> equivalent to true
: is a shell builtin
example: while :; do echo hi; sleep 2; done
another usage: execute a command without any output. example:
: `some_command` #execute a command without any output
example:
script name: vecho
==start
#!/bin/bash
if [[ "$VERBOSE" == "" || "$VERBOSE" == "0" ]]; then
    vecho=":"     # no "verbose echo"
else
    vecho=echo    # enable "verbose echo"
fi
$vecho "Verbose echo is ON"
==end

$ ./vecho
$ VERBOSE=1 ./vecho
Verbose echo is ON
========
another usage: assign default value
# assign FOO=bar iff FOO is unset
: ${FOO:=bar}

example:
# ${HI:=wow} #HI is set to wow
wow: command not found
# : ${HI:=wow} #no error msg

#mid-command comments
echo before && : this  && echo after

==end of colon command

#set a variable for a command only
VAR=value command

watch #execute a command periodially

inotify: monitor filesystem events
inotify-tools : command line interface to inotify
entr - Run arbitrary commands when files change
incron - cron-like daemon which handles filesystem events

script:
====
#!/bin/bash

for arg; do
  echo $arg
done
====
./script one two
one
two

time command output:
real: elapsed time including time slices used by other processes and time the process spends blocked (for example if it is waiting for I/O to complete).
user: the amount of CPU time spent in user-mode code (outside the kernel) within the process.
sys:   the amount of CPU time spent in the kernel within the process. This means executing CPU time spent in system calls within the kernel,

#bash shell split array
IP=1.2.3.4
IFS=. read -a ARRAY <<< "$IP" # one-line solution
echo "$IFS" # notice that IFS didn't change afterwards
echo "${ARRAY[@]}" # shows the results -> 1 2 3 4

#explanation:
read -a : assign the words to an array variable called ARRAY
${ARRAY[@]} or ${ARRAY[*]} # show the entire array
echo "${ARRAY[0]}" # show the first element

another solution:
echo ${IP//./ } -> 1 2 3 4

#parameter substitution:
IP=1.2.3.4
echo ${IP/./ }
1 2.3.4
echo ${IP//./ }
1 2 3 4
#an extra / means global substitution

#end of shell split array

bash array variable:
arr=("one" "two" "three")
echo ${#arr[@]} #show size of array

files=(*) #make an array called files with all the files in the current directory

blah="just a test"
echo ${#blah} # the # provide the number of characters in the variable
11

#convert date to iodt format:
date +%Y%m%d%H%M%S # -> 20150504090117

other monitoring tool:
vmstat
htop
dstat
iftop
iotop
iostat
mpstat
/proc/meminfo

sync : flush system buffers

#process content of a file line by line
========
#!/bin/bash

while read line
do
  echo "$line"
done < "${1:-/dev/stdin}"
=========
can do:
1. cat <file> | script
2. script <file>

#remove files except
1. rm !(file.txt)  #remove all the files except file.txt
2. rm !(*.pdf)  #remove all the files except those with pdf suffix

#Collapse groups of 3 lines to 1 line and seperate the values by commas
cat list | sed -e "N;N;s/\n/,/g"

#here string: a stripped down form of a here document
In Bash, <<<word is used as a "here string", where word is expanded and supplied to the command on its standard input, similar to a heredoc.
COMMAND <<<$WORD, where $WORD is expanded and fed to the stdin of COMMAND

sed -r 's/\s//g' # -r use extended regular expression

rename: rename multiple files
#translate uppercase names to lower
rename 'y/A-Z/a-z/' *
#ename all files matching "*.bak" to strip the extension
rename 's/\.bak$//' *.bak
rename -v 's/\.pdf$/\.doc/' *.pdf
#remove spaces from file names
option #1: rename 'y/ /_/' *
option #2: rename 's/ /_/g' *
#y: transliteration (like tr); s: substitution

#show encoding of file
#0
file -i <filename>
#1:
file -bi <filename> #b: brief (don't show filename)
text/plain; charset=us-ascii
#2:
file -b --mime-encoding <filename>
us-ascii
#3:
file -b --mime-type <filename>>
text/plain
#4:
enca -L none newrelic.js #require enca package, which includes enconv
7bit ASCII characters

#show supported encodings
iconv -l
== encoding conversion
iconv -f ISO_8859-1 -t UTF-8 < input.txt > output.txt
--
If the string //IGNORE is appended to to-encoding, characters that cannot be converted are discarded and an error is printed after conversion.
--
If the string //TRANSLIT is appended to to-encoding, characters that cannot be represented in the
target character set, it can be approximated through one or several similar looking characters.
--
echo 'abc ß α € àḃç' | iconv -f UTF-8 -t ASCII//IGNORE
echo 'abc ß α € àḃç' | iconv -f UTF-8 -t ASCII//TRANSLIT
---
*** convert between unicode and utf-8 ***
unicode for 林: 0x6797
U+FEFF : BYTE ORDER MARK
echo -n '林' | iconv -f UTF-8 -t UNICODE | xxd
-> 00000000: fffe 9767
echo -n '林' | iconv -f UTF-8 -t UNICODEBIG | xxd
-> 00000000: 6797
echo -n '林' | iconv -f UTF-8 -t UNICODELITTLE | xxd
-> 00000000: 9767
echo -n '林' | iconv -f UTF-8 -t UTF-8 | xxd
-> 00000000: e69e 97
printf "\u6797" | iconv -f UTF-8 -t UTF-8 | xxd # USE THIS ONE (unicode to utf-8) ***
-> 00000000: e69e 97
printf "\xe6\x9e\x97" | iconv -f UTF-8 -t UNICODEBIG | xxd  # USE THIS ONE (utf-8 to unicode) ***
-> 00000000: 6797
-- print unicode:
printf "\u6797"
-- print utf-8
printf "\xe2\x8c\x98"

$$ : the process number of the current shell.
$! : The process number of the last background command

diff betwewn !$ and $_
#!$ : the last arg of the previous cmd line
$ cat dmesg.log >> b.txt
$ echo !$
echo b.txt
b.txt
#$_ : the last arg of the previous command
$ cat dmesg.log >> b.txt
$ echo $_
dmesg.log

trimming with variable substitution:
called variable slicing
$ var=foo.pdf
$ echo ${var%.pdf} #trim suffix
foo
$ echo ${var#foo} #trim prefix
.pdf
#get the first character (substring)
$ echo ${var:0:1}
f
#get the first character
$ echo ${var%${var#?}}

=========
start program from an interactive shell:
The process running foo is created.
The process inherits stdin, stdout, and stderr from the shell. Therefore it is also connected to the same terminal.
If the shell receives a SIGHUP, it also sends a SIGHUP to the process (which normally causes the process to terminate).
Otherwise the shell waits (is blocked) until the process terminates.

when you do foo &:
The process running foo is created.
The process inherits stdout/stderr from the shell (so it still writes to the terminal).
The process in principle also inherits stdin, but as soon as it tries to read from stdin, it is halted.
It is put into the list of background jobs the shell manages, which means especially:
  It is listed with jobs and can be accessed using %n (where n is the job number).
  It can be turned into a foreground job using fg, in which case it continues as if you would not have used & on it (and if it was stopped due to trying to read from standard input, it now can proceed to read from the terminal).
  If the shell received a SIGHUP, it also sends a SIGHUP to the process. Depending on the shell and possibly on options set for the shell, when terminating the shell it will also send a SIGHUP to the process.

Now disown removes the job from the shell's job list, so all the subpoints above don't apply any
more (including the process being sent a SIGHUP by the shell). However note that it still is
connected to the terminal, so if the terminal is destroyed (which can happen if it was a pty, like
those created by xterm or ssh, and the controlling program is terminated, by closing the xterm or
terminating the SSH connection), the program will fail as soon as it tries to read from standard
input or write to standard output.

== nohup
nohup does, on the other hand, is to effectively separate the process from the terminal:

It closes standard input (the program will not be able to read any input, even if it is run in the
foreground. it is not halted, but will receive and error code or EOF).  It redirects standard output
and standard error to the file nohup.out, so the program won't fail for writing to standard output
if the terminal fails, and whatever the process writes is not lost.  It prevents the process from
receiving a SIGHUP (thus the name).

Note that nohup does not remove the process from the shell's job control and also doesn't put it in
the background (but since a foreground nohup job is more or less useless, you'd generally put it
into the background using &). For example, unlike with disown, the shell will still tell you when
the nohup job has completed (unless the shell is terminated before, of course).

summary:

-- & puts the job in the background, that is, makes it block on attempting to read input, and makes the
shell not wait for its completion.
-- disown removes the process from the shell's job control, but it
still leaves it connected to the terminal. One of the results is that the shell won't send it a
SIGHUP.
-- nohup disconnects the process from the terminal, redirects its output to
nohup.out and shields it from SIGHUP. One of the effects (the naming one) is that the process won't
receive any sent NOHUP. It is completely independent from job control and could in principle be used
also for foreground jobs (although that's not very useful).

globbing (filename expansion):
A '?' (not between brackets) matches any single character.
A '*' (not between brackets) matches any string, including the empty string.
An expression "[...]" where the first character after the leading '['
       is not an '!' matches a single character, namely any of the
       characters enclosed by the brackets.  The string enclosed by the
       brackets cannot be empty; therefore ']' can be allowed between the
       brackets, provided that it is the first character.  (Thus, "[][!]"
       matches the three characters '[', ']' and '!'.)
If a filename starts with a '.', this character must be matched explicitly.

To ignore a whole directory tree, use -prune rather than checking
every file in the tree.  For example, to skip the directory
`src/emacs' and all files and directories under it, and print the
names of the other files found, do something like this:
find . -path ./src/emacs -prune -o -print
to skip hidden files: find . -name '.?*' -prune -o ...

more globbing:
echo .* -> matches . and ..
echo .?* -> matches ..
echo .[!.]* -> does not match . or ..

regex:
& -> the string matched by the pattern
example: echo "first line" | sed 's/li.e/hee&cheok/g'
output: first heelinecheok

get/change file ACL (access control list)
commands: getfacl/setfacl/chacl

use dynamic linker/loader to run a program without execute permission
/lib64/ld-linux-x86-64.so.2 ./hello

#show elapsed time, start time, cumulative cpu time of a process
ps -o etime,stime,time <pid>
#show long start time
ps -o lstart <pid>

#show system hardware dmi=desktop management interface
dmidecode
option: -t <type>
# types are: bios, system, baseboard, chassis, processor, memory, cache, connector, slot.

# Automates interactive applications
application: expect
the expect package contains multixterm

#EXIF: (exchangeable image format) , digital phone metadata
exiftool

#list process id listening on port 2525
#this output has more data (preferred)
#-n: don't convert IP address, -P: don't convert port number
lsof -nPi tcp:2525
lsof -i tcp:80 #see which process is using port 80
lsof -i:8181 #see which process is using port 8181 (simplest way)
lsof -nPi:8181 #see which process is using port 8181 (second simplest way)
#list process id listening on port 7474
lsof -i:7474 -sTCP:LISTEN -t
#-i: show only network-related files, -P: show port numbers instead of names
lsof -i -P
====
#list all files opened by a process
lsof -nP -p <pid>
#list open ports
lsof -Pnli
==
lsof -U #show unix domain socket
----
#see what ports are being used by a process
lsof -i -Pn | grep <pid>
netstat -anpt | grep <pid>

dstat output:
cpu: user, sys, idle, wai, hiq, siq
 hiq - irq: servicing interrupts
 siq - softirq: servicing softirqs
disk: read, write
network: recv, send
paging: in, out
system: int (interrupts), csw (context switches)
#show top I/O processes
dstat --top-io --top-bio --nocolor
OR
dstat --top-io-adv --top-bio-adv --nocolor #more info such as pid
--
dstat -t -m -c

A chroot on Unix operating systems is an operation that changes the apparent root directory for the
current running process and its children. A program that is run in such a modified environment
cannot name (and therefore normally not access) files outside the designated directory tree.

A chroot jail is a way to isolate a process from the rest of the system. It should only be used for
processes that don't run as root, as root users can break out of the jail very easily. The idea is
that you create a directory tree where you copy or link in all the system files needed for a process
to run.

how cron works
old:
 1. Read /usr/etc/crontab
 2. Determine if any commands are to be run at the current date and time and if so, run them as the superuser
 3. sleep for one minute
 4. repeat from step 1
New:
1. On start-up, look for a file named .crontab in the home directories of all account holders.
2. For each crontab file found, determine the next time in the future that each command must run.
3. Place those commands on the Franta–Maly event list with their corresponding time and their "five field" time specifier.
4. Enter main loop:
   a. Examine the task entry at the head of the queue, compute how far in the future it must run.
   b. Sleep for that period of time.
   c. On awakening and after verifying the correct time, execute the task at the head of the queue (in background) with the privileges of the user who created it.
   d. Determine the next time in the future to run this command and place it back on the event list at that time value.

how sleep works
 1. Suspend execution of the process and mark it as not runnable.
 2. Set a timer for the given wait time. Systems provide hardware timers that let the kernel register to receive an interrupt at a given point in the future.
 3. When the timer hits, mark the process as runnable.

nested command substition:
echo $(readlink -e $(which rename))
OR
echo `readlink -e \`which rename\``

fork bomb:
:(){ :|: & };:
===
:() means you are defining a function called :
{:|: &} means run the function : and send its output to the : function again and run that in the background.
The ; is a command separator, like &&.
: runs the function the first time.

regex
Greedy means match longest possible string.
Lazy means match shortest possible string.
For example, the greedy h.+l matches 'hell' in 'hello', but the lazy h.+?l matches 'hel'.
echo hello | grep -P -o "h.+?l" -> hel
echo hello | grep -E -o "h.+l" -> hell
===
grep: use -P to do non-greedy (lazy) match
sed does not support non-greedy search
perl: non-greedy search

#get public IP address
curl inet-ip.info
curl inet-ip.info/json/indent
curl inet-ip.info/json
curl inet-ip.info/yaml
curl inet-ip.info/toml
curl ipinfo.io

find . ! -readable -prune -o ...
