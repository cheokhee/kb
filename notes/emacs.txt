C-u C-space : to go back to a saved mark
C-x C-SPC : (pop-global-mark) jumps to the buffer and position of the latest entry in the global
            ring. It also rotates the ring, so that successive uses of C-x C-SPC take you to earlier
            buffers and mark positions.

you can see / change the current buffer encoding with C-x RET f
you can also change the detected encoding to force an other one and reload the file with C-x RET r
you can set an encoding for the next I/O command only with C-x RET c

(listp before-save-hook)
t
(length before-save-hook)
3
(nth 0 before-save-hook)
gofmt-before-save
(nth 1 before-save-hook)
t

C-x C-q : read-only mode

M-s .           isearch-forward-symbol-at-point
M-s _           isearch-forward-symbol
M-s h           Prefix Command
M-s o           occur
M-s w           isearch-forward-word

M-s h .         highlight-symbol-at-point
M-s h f         hi-lock-find-patterns
M-s h l         highlight-lines-matching-regexp
M-s h p         highlight-phrase
M-s h r         highlight-regexp
M-s h u         unhighlight-regexp
M-s h w         hi-lock-write-interactive-patterns

C-M-n     forward-list  Move forward over a parenthetical group
C-M-p     backward-list  Move backward over a parenthetical group
C-M-f     forward-sexp Move forward over a balanced expression
C-M-b     backward-sexp  Move backward over a balanced expression
C-M-k     kill-sexp  Kill balanced expression forward
C-M-SPC   mark-sexp  Put the mark at the end of the sexp (point at beginning of func)
C-M-a     beginning of defun
C-M-e     end of defun
C-M-h     mark defun (put point anywhere in defun)

TRAMP
C-x C-f /sudo::/etc/hosts
C-x C-f /remotehost:filename  RET (or /method:user@remotehost:filename)
        example: /ssh:webapp@sjdvir32:/home/webapp/ifm-port-list/config/config.json
        example: /webapp@sjdvir32:/home/webapp/ifm-port-list/config/config.json
TRAMP slowness: caused by projectile. turn it off OR (setq projectile-mode-line nil)

C-x ESC ESC redo last command
M-x list-command-history
M-x eval-region Evaluate selected region as elisp code
M-x eval-buffer Evaluate curren buffer as elips code
M-( Wrap selection in parentheses

M-x manual-entry : read man pages

C-h S : open info for symbol

fontifying: assigning faces to text in the buffer
faces: colors and fonts for text

elisp:
character: ?A
keyword: :name
string: "string"
vector: [1 2 3]

company-mode:
while the completions are displayed:
TAB: select common part
RET: complete
C-S, C-R : search, after searching: C-O to show only those matching
F1: display doc

narrowing: making a portion of the buffer visible. commands are limited to this area
C-x n n : narrow to region
C-x n w : widen

convert between tab and space: tabify and untabify

C-u 0 C-x e : execute a macro an infinite number of times

M-z : zap-to-char

hex editor: hexl-mode, hexl-find-file

emacs mode line:
cs:ch-fr
cs describes the character set of the text in the buffer

c-mode-common-hook: Common hook across all languages
language-specific:
c-mode-hook, c++-mode-hook, java-mode-hook, awk-mode-hook

shell: use comint-mode to run a subshell
The subprocess doesn't see any input until you press Enter. Emacs is acting like a dumb terminal. It
does support color codes, but not things like moving the cursor around, so you can't run
curses-based applications.
========
term/ansi-term:  a terminal emulator written in Emacs Lisp.
In this mode, the keys you press are sent directly to the subprocess.
you can run curses-based applications.
=====
eshell: a shell implemented in Emacs Lisp.

printing:
M-x print-buffer
Print hardcopy of current buffer with page headings containing the file name and page number.
M-x lpr-buffer
Print hardcopy of current buffer without page headings.
M-x print-region
Like print-buffer but print only the current region.
M-x lpr-region
Like lpr-buffer but print only the current region.

sending email:
  C-c C-c   send the message and exit the message buffer
  C-c C-a   add an attachment
  C-c C-k   cancel the message
  C-c C-d  postpone the message
  C-c C-s  send the message but don't exit the message buffer
  C-c C-b  go to the start of the message
  C-c C-z  kill text from point until end of buffer

#calculator
(calc-eval "1/2")

If your instance hangs and won't respond to C-g, you can use `pkill -SIGUSR2 emacs` to force emacs
to stop whatever it's doing.

rename-uniquely. Great if you want to hold on to a *Help* buffer whilst looking at the help for other
things.

M-s _ : isearch-forward-symbol

C-S-backspace : kill-whole-line

C-x <C-right> : next-buffer
C-x <C-left> : previous-buffer

C-x * : calculator

C-x r w : window-configuration-to-register

C-M-w : append-next-kill &optional

C-x a g: add-global-abbrev

ggtags:
M-.             jump to definition/reference
M-<             first-error
M->             ggtags-navigation-last-error
M-n             next-error
M-p             previous-error
RET             end
---
during navigation, Ggtags-Navigation minor mode is on

rectangle mode:
rectangle-mark-mode : C-x SPC
open-rectangle (insert whitespace, shift right)
kill-rectangle (save a copy), to be followed by yank-rectangle
delete-rectangle (delete without saving a copy)
string-insert-rectangle (shift right)
replace-rectangle same as string-rectangle. (replace)
clear-rectangle : replace with space

An association list , or alist , is a data structure used very frequently in Scheme. An alist is a
list of pairs, each of which is called an association .

markdown mode:
C-c C-c m: markdown-command > *markdown-output* buffer.
C-c C-c p: markdown-command > temporary file > browser.
C-c C-c e: markdown-command > basename.html.
C-c C-c v: markdown-command > basename.html > browser.
C-c C-c w: markdown-command > kill ring.
C-c C-c o: markdown-open-command.
C-c C-c l: markdown-live-preview-mode > *eww* buffer. (USE THIS)

M-x load-library -> realgud
M-x realgud:pdb -> python

realgud:pdb command
n : next (step over)
s : step into
f : finish (step out) (in pdb, use return)
b : set breakpoint
D : clear breakpoint (by number)
c : continue
clear : clear all breakpoints (cmd: X)

realgud command in source window)
C-c             Prefix Command
RET             realgud:cmd-repeat-last
C-x             Prefix Command
SPC             realgud:cmd-step
!               realgud:cmd-shell
+               realgud:cmd-enable
-               realgud:cmd-disable
<               realgud:cmd-newer-frame
>               realgud:cmd-older-frame
C               realgud-window-cmd-undisturb-src
D               realgud:cmd-delete
F               realgud:window-bt
I               realgud:cmdbuf-info-describe
Q               realgud:cmd-terminate
R               realgud:cmd-restart
S               realgud-window-src-undisturb-cmd
T               realgud:cmd-backtrace
U               realgud:cmd-until
X               realgud:cmd-clear
b               realgud:cmd-break
c               realgud:cmd-continue
d               realgud:cmd-newer-frame
e               realgud:cmd-eval-dwim
f               realgud:cmd-finish
j               realgud:cmd-jump
k               realgud:cmd-kill
l               realgud-recenter-arrow
n               realgud:cmd-next
q               realgud:cmd-quit
r               realgud:cmd-restart
s               realgud:cmd-step
u               realgud:cmd-older-frame

#put a string in the kill ring
(kill-new "wow great")

#Return the contents of the current buffer as a string.
(buffer-string)

single prefix: C-u (equivalent to 4 times)
double prefix: C-u C-u (equivalent to 16 times)
to do it programatically: (set-mark-command '(16))

The advice feature lets you add to the existing definition of a function, by advising the function.

(describe-text-properties 1) ;;1 is the first position of a buffer
(get-text-property 1 'face) ;;1 is the first position of a buffer, 'face is the property

local binding: let vs let*
let* is like let, but it binds each variable right after computing its local value, before computing
the local value for the next variable. Therefore, an expression in bindings can refer to the
preceding symbols bound in this let* form.

indent by n spaces: use indent-rigidly (C-x TAB), need to mark region first
-> C-u 10 C-x TAB ; indent by 10 spaces
-> C-u -999 C-x TAB ; remove all indent

toggle-truncate-lines

csv-mode: only align visible lines

(add-hook 'csv-mode-hook
  (lambda ()
    (define-key csv-mode-map (kbd "C-c C-c")
    (defun csv-align-visible (&optional arg)
      "Align visible fields"
      (interactive "P")
      (csv-align-fields nil (window-start) (window-end))))))

C-x = : (what-cursor-position &optional DETAIL)

== emacs sqlplus ==
C-RET execute command under point
C-S-RET execute command under point and show result table in HTML buffer
M-RET explain execution plan for command under point

equivalent of vim's yy10p:
to eval: M-: (eval-expression)
(dotimes '10 (yank))

C-u : prefix argument
C-x : prefix key,  prefix key is a key sequence whose binding is a keymap

render HTML:
(load-library "shr.el")
(shr-render-buffer)

M-x replace-regexp:
Replace regexp: \(\w+\)
replace with:
\,(upcase \1)
\,(capitalize \1)
\,(downcase \1)

mode-line-frame-identification:
on windowing system, return "  "
on a terminal, return "-%F " (the frame name)

mode-line-format

http://emacs-fu.blogspot.com/2011/08/customizing-mode-line.html

M-x customize-face , mode-line-buffer-id
(custom-set-faces '(mode-line-buffer-id ((t (:foreground "brightred" :weight extra-bold)))))

#1. turn on projectile-mode
#2. helm-projectile-on

M-. runs the command ggtags-find-tag-dwim (found in ggtags-mode-map)

variable buffer-file-name contains the full path of current buffer

xterm-mouse-mode
in a terminal emulator which is compatible with xterm , you can use M-x xterm-mouse-mode to enable
simple use of the mouse--only single clicks are supported. The normal xterm mouse functionality is
still available by holding down the SHIFT key when you press the mouse button.

artist-mode:
mouse middle click: menu
right-click: like an eraser (go to pen mode)
C-c C-c : exit artist mode
C-C C-a : artist mode prefix
After having drawn a (straight) line or a (straight) poly-line, you can set arrows on the line-ends by typing < or >.
--
http://www.lysator.liu.se/~tab/artist/
https://writequit.org/denver-emacs/presentations/2016-04-19-whats-new-emacs25-ditaa-artist.html
http://dinasis.com/oliver/Learning_GNU_Emacs/gnu3-CHP-7-SECT-6.html
--
ditta: convert ascii art to image
http://ditaa.sourceforge.net/
https://github.com/stathissideris/ditaa
https://www.johndcook.com/blog/2016/06/14/ascii-art-diagrams/
https://www.johndcook.com/blog/2016/06/15/ascii-art-diagrams-in-emacs-org-mode/

M-x untabify: convert all tabs to spaces

search for non-ascii character (if you know the unicode code point in hex)
start search by typing C-s, which in search mode type C-x 8 <RET>, then enter hex unicode (e.g. 8a31)
