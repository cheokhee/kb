Regex:
"aString" =~ /regex/ -> return a Matcher object (has to match entire string)
"aString" ==~ /regex/ -> return boolean (has to match entire string)

Map a = [:]
Map b = ["key":"value"]

collection methods: each, collect, findAll, find, any, every
keysAndValuesDo: use each, the arg is an association, it.key and it.value

aString.toURL().text

'xxx' -> regular string
"xxx" -> interpolated/parameterized string (variable substitution), an instance of GString

new XMLSlurper().parse(url) -> set a DOM tree

Groovy.sql.Sql = Sql.newInstance('jdbc:....','userid','pw','com...driver')
sql.execute "sql statement"

MarkupBuilder -> generate XML

JsonSlurper
JsonBuilder

#call restful api that returns json
def slurper = new JsonSlurper().parseText(urlString.toURL().text)

import groovy.json.JsonOutput
JsonOutput.prettyPrint(str.toURL().text)

binding: a collection of variables visible to a script
any var not declared in a script is part of the binding

elvis operator : ?:
safe dereference: ?.

every closure has a delegate property.
by default, delegate points to the object on which the closure was invoked.
--
you can change the delegate of a closure

add a method to a class:
String.metaClass.isPalindrome = { -> delegate == delegate.reverse() }

closure:
["hi","hoo"].each { wow -> println wow } OR
["hi","hoo"].each { println it }

y =2
this.binding.getVariable("y") -> print 2
--
def x =2
this.binding.getVariable("x") -> groovy.lang.MissingPropertyException
--
String name = 'cheok'
this.binding.getVariable("name") -> groovy.lang.MissingPropertyException
---
def : put the var in local scope
If you define a method in your script, it won't have access to the variables that are created with "def" in the body of the main script as they aren't in scope:

format string:
sprintf("my name is %s, age is %03d\n", "cheok", 42)

parenthesis is optional if there is at least one parameter:
printAge "John", 24 ==> printAge( "John", 24)
printEmptyLine()
callClosure { println("From closure") } ==> callClosure ( { println("From closure") } )
--
if the last parameter is a closure, it can be written outside the parentheses:
callWithParam("param", { println it })
callWithParam("param") { println it }
callWithParam "param", { println it }

if you invoke Groovy method with named parameters, they are converted into a map and passed as first
argument of the method. Other (non-named arguments) are then appended to parameters list:
--
def printPersonInfo(Map<String, Object> person) {
    println("${person.name} is ${person.age} years old")
}

def printJobInfo(Map<String, Object> job, String employeeName) {
    println("$employeeName works as ${job.title} at ${job.company}")
}

printPersonInfo name: "John", age: 24
printJobInfo "John", title: "Android developer", company: "Tooploox"
