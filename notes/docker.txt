Docker is a shipping container system for software applications

Docker is an engine designed to help you package, ship and deploy applications stacks and services as lightweight, portable and isolated containers.
The Docker engine sits directly on top of the host operating system. Its containers share the kernel and hardware of the host machine with roughly the same
overhead as processes launched directly on the host machine.
But Docker itself isnâ€™t a container system; it merely piggybacks off the existing container facilities baked into the OS, such as LXC on Linux.

docker search
docker pull
docker info

#list containers
docker ps [-a]

#remove containers, ID from ps command
docker rm f50dcfdfac19

#list images
docker images

#remove images
docker rmi

#run
#how to specify image: repository_name:tag
#sample repository name: learn/tutorial, cheok/ubuntu, 32bit/ubuntu
#if no tag is specified, use latest
docker run learn/tutorial echo "Hi"
docker run -i -t 32bit/ubuntu:14.04 /bin/bash

#show what has changed
docker diff <container id>

docker inspect <cntr id>

docker events

docker history <image name>

docker kill c8badca79ef5

docker top 91d70c5acea1

docker commit -a="cheok hee" -m="added blah" 91d70c5acea1 cheok/ubuntu:test

#show what you have done
docker logs <91d70c5acea1>

#delete untagged/dangling images
docker rmi `docker images -q -f dangling=true`

#delete all images
docker rmi $(docker images -q)

#kill all running containers
docker kill $(docker ps -q)

#delete all stopped containers
docker rm $(docker ps -a -q)

docker cp CONTAINER:PATH HOSTPATH
http://0x74696d.com/posts/docker-logging/
http://docs.oracle.com/cd/E37670_01/E37355/html/section_vtr_p2z_fp.html
http://blog.heavybit.com/blog/2015/3/23/dockermeetup
http://xmodulo.com/networking-between-docker-containers.html

"do this: install from official docker page"
wget -qO- https://get.docker.com/ | sh

"below is what is done by above"
wget -qO- https://get.docker.io/gpg | apt-key add -
echo "deb http://get.docker.io/ubuntu docker main" > /etc/apt/sources.list.d/docker.list
install lxc-docker

#add user to docker group
sudo usermod -aG docker your-user

docker build -t my-moc-app:1.0 .

#create an interactive session to a running container
docker exec -it moc-ss /bin/bash

docker run -P -d --name moc-ss -v /a/log:/usr/src/app/log moc-ss:1.0

docker run --rm -it --name moc-ss --entrypoint="/bin/bash" moc_mean:0.1.0 -i

#private registry
command: docker pull host:5000/rhel6.5
 Error: v1 ping attempt failed with error: Get https://host:5000/v1/_ping: dial tcp: i/o timeout. If this private registry supports only HTTP or HTTPS with an unknown CA certificate, please add `--insecure-registry host:5000` to the daemon's arguments. In the case of HTTPS, if you have access to the registry's CA certificate, no need for the flag; simply place the CA certificate at /etc/docker/certs.d/host:5000/ca.crt
===
Error: v1 ping attempt failed with error: Get http://host:5000/v1/_ping: dial tcp: i/o timeout

solution:
change /etc/default/docker:
DOCKER_OPTS=--insecure-registry=host:5000 # docker 1.5
DOCKER_OPTS=--insecure-registry host:5000 #docker 1.6?
then reboot
the local docker daemon process:
/usr/bin/docker -d --insecure-registry=host:5000 #docker 1.5

Error:
[0030] Error response from daemon: v1 ping attempt failed with error: Get http://sjstoas3:5000/v1/_ping: dial tcp: i/o timeou

#test private registry
curl localhost:5000
curl localhost:5000/v1/_ping
curl localhost:5000/v1/search
curl host:5000/v1/search?q=nodejs

{"num_results": 2, "query": "", "results": [{"description": null, "name": "library/tibcobw"}, {"description": "", "name": "library/rhel6.5"}]}12:36:55 ~$

#transfer an image
1. docker commit <container id> <new image> #optional
2. docker save mynewimage > /tmp/mynewimage.tar
3. docker load < /tmp/mynewimage.tar

data volume container
doc create -v /usr/src/app/logs --name sslog debian:latest

#mount a host directory as a data volume
docker run -P -d --name cntr-name -v /a/log:/usr/src/app/logs -v ${PWD}/target/config:/usr/src/app/config image:0.1.0

docker run -a : attach stdin, stdout, stderr and pipe it to the shell
docker run -a stdout nimblestratus/rpi-substructure-grepper $PATTERN | wc -l

filter:
docker inspect -f '{{.Config.Labels}}' 4b2b863e87f0

private registry:
docker run -p 5000:5000 -d --name my-reg registry
docker tag 8dbd9e392a96 localhost:5000/moc-ss
docker push localhost:5000/moc-ss
#get tags for a repository:
curl localhost:5000/v1/repositories/library/moc-ss/tags
this also works:
curl localhost:5000/v1/repositories/rhel-node/tags
-----
#delete a repo: need the slash at the end
#syntax: /v1/repositories/(namespace)/(repository)/tags/(tag*)
curl -X DELETE http://localhost:5000/v1/repositories/library/moc-ss/
this also works:
curl -X DELETE http://localhost:5000/v1/repositories/rhel-node/
#delete a tag:
curl -X DELETE http://localhost:5000/v1/repositories/rhel-node/tags/0.1.0

migrating data volume container
backup:
1. docker run --rm --volumes-from dbdata -v $PWD:/backup ubuntu tar cvf /backup/backup.tar /dbdata
restore:
1. docker create -v /dbdata -name DATA2 ubuntu
2. docker run --rm --volumes-from DATA2 -v $PWD:/backup ubuntu tar xvf /backup/backup.tar

T1: no data volume
$ls /usr/src/app/config # two files
config.json.vpp  default-config.json
T2: docker run --rm -it -v ~/config:/usr/src/app/config --entrypoint="/bin/bash" moc-ss:0.1.1 -i
$ls /usr/src/app/config # one file
default-config.json
---
conclusion: data volume shadows original directory
