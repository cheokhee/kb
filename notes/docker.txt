Docker is a shipping container system for software applications

Docker is an engine designed to help you package, ship and deploy applications stacks and services as lightweight, portable and isolated containers.
The Docker engine sits directly on top of the host operating system. Its containers share the kernel and hardware of the host machine with roughly the same
overhead as processes launched directly on the host machine.
But Docker itself isnâ€™t a container system; it merely piggybacks off the existing container facilities baked into the OS, such as LXC on Linux.

docker: a package management system for deploying code.

docker search
docker pull
docker info

#list containers
docker ps [-a]

#remove containers, ID from ps command
docker rm f50dcfdfac19

#list images
docker images

#remove images
docker rmi

#run
#how to specify image: repository_name:tag
#sample repository name: learn/tutorial, cheok/ubuntu, 32bit/ubuntu
#if no tag is specified, use latest
docker run learn/tutorial echo "Hi"
docker run -i -t 32bit/ubuntu:14.04 /bin/bash

#show what has changed
docker diff <container id>

docker inspect <cntr id>

docker events

docker history <image name>

docker kill c8badca79ef5

docker top 91d70c5acea1

docker commit -a="cheok hee" -m="added blah" 91d70c5acea1 cheok/ubuntu:test

#show what you have done
docker logs <91d70c5acea1>

#delete untagged/dangling images
docker rmi `docker images -q -f dangling=true`

#delete all images
docker rmi $(docker images -q)

#kill all running containers
docker kill $(docker ps -q)

#delete all stopped containers
docker rm $(docker ps -a -q -f status=exited)
docker ps -aq -f status=exited | xargs docker rm

docker cp CONTAINER:PATH HOSTPATH
http://0x74696d.com/posts/docker-logging/
http://docs.oracle.com/cd/E37670_01/E37355/html/section_vtr_p2z_fp.html
http://blog.heavybit.com/blog/2015/3/23/dockermeetup
http://xmodulo.com/networking-between-docker-containers.html

"do this: install from official docker page"
wget -qO- https://get.docker.com/ | sh

"below is what is done by above"
wget -qO- https://get.docker.io/gpg | apt-key add -
echo "deb http://get.docker.io/ubuntu docker main" > /etc/apt/sources.list.d/docker.list
install lxc-docker

"new location for key, added on 2017-08-30
wget -qO- https://download.docker.com/linux/ubuntu/gpg
new location:
deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable

#add user to docker group
sudo usermod -aG docker your-user

docker build -t my-moc-app:1.0 .

#create an interactive session to a running container
docker exec -it moc-ss /bin/bash

docker run -P -d --name moc-ss -v /a/log:/usr/src/app/log moc-ss:1.0

docker run --rm -it --name moc-ss --entrypoint="/bin/bash" moc_mean:0.1.0 -i

#private registry
command: docker pull host:5000/rhel6.5
 Error: v1 ping attempt failed with error: Get https://host:5000/v1/_ping: dial tcp: i/o timeout. If this private registry supports only HTTP or HTTPS with an unknown CA certificate, please add `--insecure-registry host:5000` to the daemon's arguments. In the case of HTTPS, if you have access to the registry's CA certificate, no need for the flag; simply place the CA certificate at /etc/docker/certs.d/host:5000/ca.crt
===
Error: v1 ping attempt failed with error: Get http://host:5000/v1/_ping: dial tcp: i/o timeout

solution:
change /etc/default/docker:
DOCKER_OPTS=--insecure-registry=host:5000 # docker 1.5
DOCKER_OPTS=--insecure-registry host:5000 #docker 1.6?
then reboot
the local docker daemon process:
/usr/bin/docker -d --insecure-registry=host:5000 #docker 1.5

Error:
[0030] Error response from daemon: v1 ping attempt failed with error: Get http://sjstoas3:5000/v1/_ping: dial tcp: i/o timeou

#test private registry
curl localhost:5000
curl localhost:5000/v1/_ping
curl localhost:5000/v1/search
curl host:5000/v1/search?q=nodejs

push to private registry:
1. name your image like this: host:port/name:tag
2. then push

{"num_results": 2, "query": "", "results": [{"description": null, "name": "library/tibcobw"}, {"description": "", "name": "library/rhel6.5"}]}12:36:55 ~$

#transfer an image
1. docker commit <container id> <new image> #optional
2. docker save mynewimage > /tmp/mynewimage.tar
3. docker load < /tmp/mynewimage.tar

data volume container
=== purpose: to share data between containers
doc create -v /usr/src/app/logs --name sslog debian:latest

docker volume: directories/files that are not part of the container's union file system.
they are just normal directories/files that are bind mounted into the container.

#mount a host directory as a data volume
docker run -P -d --name cntr-name -v /a/log:/usr/src/app/logs -v ${PWD}/target/config:/usr/src/app/config image:0.1.0

docker run -a : attach stdin, stdout, stderr and pipe it to the shell
docker run -a stdout nimblestratus/rpi-substructure-grepper $PATTERN | wc -l

filter:
docker inspect -f '{{.Config.Labels}}' 4b2b863e87f0

private registry:
docker run -p 5000:5000 -d --name my-reg registry
docker tag 8dbd9e392a96 localhost:5000/moc-ss
docker push localhost:5000/moc-ss
#get tags for a repository:
curl localhost:5000/v1/repositories/library/moc-ss/tags
this also works:
curl localhost:5000/v1/repositories/rhel-node/tags
-----
#delete a repo: need the slash at the end
#syntax: /v1/repositories/(namespace)/(repository)/tags/(tag*)
curl -X DELETE http://localhost:5000/v1/repositories/library/moc-ss/
this also works:
curl -X DELETE http://localhost:5000/v1/repositories/rhel-node/
#delete a tag:
curl -X DELETE http://localhost:5000/v1/repositories/rhel-node/tags/0.1.0

migrating data volume container
backup:
1. docker run --rm --volumes-from dbdata -v $PWD:/backup ubuntu tar cvf /backup/backup.tar /dbdata
restore:
1. docker create -v /dbdata -name DATA2 ubuntu
2. docker run --rm --volumes-from DATA2 -v $PWD:/backup ubuntu tar xvf /backup/backup.tar

T1: no data volume
$ls /usr/src/app/config # two files
config.json.vpp  default-config.json
T2: docker run --rm -it -v ~/config:/usr/src/app/config --entrypoint="/bin/bash" moc-ss:0.1.1 -i
$ls /usr/src/app/config # one file
default-config.json
---
conclusion: data volume shadows original directory

docker swarm: provide clustering capabilities to turn a group of Docker engines into a single,
virtual Docker engine. allow users to treat a group of hosts as a unified resource.
===
docker compose: for building and running applications composed of multiple Docker containers
(indended for development only)
===
docker machine: install and configure docker hosts on local/remote resources. used to provision resources.

ONBUILD: delay execution of certain commands until a child image is built that inherits
the onbuild image.

container management: Rancher, Clocker, Tutum
container orchestration: kubernetes
Apache Mesos: a cluster manager
container orchestration: coordinate containers across multiple machines

So when people compare Docker and Kubernetes to Mesos, they are actually comparing Kubernetes and
Docker Swarm to Marathon running on Mesos.

resources that are namespaced are mapped to a different value on the host. eg. PID 1 in the
container is not PID 1 in the host.  resources that are not namespaced are the same on the host and
the container.

docker storage driver: used to write to container's writable layer.
https://docs.docker.com/storage/storagedriver/select-storage-driver/
==
a docker image is made up of a series of layers. each layer represents an instruction in the
dockerfile. when you create a new container, a new writeable layer is created on top of the
underlying layers.

copy-on-write : a strategy of sharing and copying files for maximum efficiency. if a file exists in
a lower layer and another layer needs it, it just access the file. the first time another layer
needs to modify the file, the file is copied into that layer and modified.

/var/lib/docker/<storage-driver> : where layers are stored

==
root      1366     /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
root      1179     /usr/bin/containerd
--
root       997  1366  /usr/bin/docker-proxy -proto tcp -host-ip 0.0.0.0 -host-port 1521 -container-ip 172.17.0.2 -container-port 1521
root     13719  1366  /usr/bin/docker-proxy -proto tcp -host-ip 0.0.0.0 -host-port 3306 -container-ip 172.17.0.4 -container-port 3306
root      1003  1179  containerd-shim -namespace moby -workdir /var/lib/containerd/io.containerd.runtime.v1.linux/moby/1b227f81af9b36da498daf20d9a4b89c4a91e30a7f1aa8569586d061dcc4e31c -address /run/containerd/containerd.sock -containerd-binary /usr/bin/containerd -runtime-root /var/run/docker/runtime-runc
root     13725  1179  containerd-shim -namespace moby -workdir /var/lib/containerd/io.containerd.runtime.v1.linux/moby/e3e57bb9bb82938914a0cd4f71a043fc3451289c31e2d525109b3ee7bf5d99f7 -address /run/containerd/containerd.sock -containerd-binary /usr/bin/containerd -runtime-root /var/run/docker/runtime-runc
==

docker pull <repo name>
docker pull registry.access.redhat.com/rhel7/rhel:latest
repo full URL: hostname/namespace/repo:tag

#docker remove all exited containers
docker ps -aq -f status=exited | xargs docker rm
docker rm $(docker ps -a -q -f status=exited)

$ docker port cs_db #or container ID
1521/tcp -> 0.0.0.0:1521

#spawn a container with read limited to 150kb/second
docker run -it --device-read-bps /dev/sda:150kb <image> /bin/bash
docker run -it --device-write-bps /dev/sda:150kb <image> /bin/bash

#List port mappings for the container
docker port <CONTAINER>

docker network ls
docker network inspect <id/name>
docker run -dt --network <bridge-name>
docker run -p host-port:container-port

single-host network:
docker network create -d bridge --subnet 10.0.0.1/24 <name>

multi-host networking: connect containers on multiple hosts
docker swarm init #do this on node1, copy the command and go to another node and do, the node become swarm manager
-> create an ingress overlay network and docker_gwbridge bridge automatically
docker swarm join --token ....
--
docker node ls #only works on swarm manager
docker service ls #only works on swarm manager
docker network create -d overlay <overlay-name>
docker service create --name <service-name> --network <overlay-name-from previous command> --replicas <number> <image-name> <command>
docker service ps <service-name>

overlay network uses ports 4789 (UDP), 7946 (TCP/UDP), 2377 (TCP)

by default, containers connect to the default bridge network

in terms of Docker, a bridge network uses a software bridge which allows containers connected to the
same bridge network to communicate, while providing isolation from containers which are not
connected to that bridge network.
--
Bridge networks apply to containers running on the same Docker daemon host. For communication among
containers running on different Docker daemon hosts, you can either manage routing at the OS level,
or you can use an overlay network.
--
When you start Docker, a default bridge network (also called bridge) is created automatically, and
newly-started containers connect to it unless otherwise specified. You can also create user-defined
custom bridge networks. User-defined bridge networks are superior to the default bridge network.
--
User-defined bridges provide automatic DNS resolution between containers.
Containers on the default bridge network can only access each other by IP addresses
--
Containers can be attached and detached from user-defined networks on the fly. To remove a container
from the default bridge network, you need to stop the container and recreate it with different
network options.

By default, traffic from containers connected to the default bridge network is not forwarded to the
outside world. To enable forwarding, you need to change two settings. These are not Docker commands
and they affect the Docker hostâ€™s kernel.
--
1. Configure the Linux kernel to allow IP forwarding.
$ sysctl net.ipv4.conf.all.forwarding=1
2. Change the policy for the iptables FORWARD policy from DROP to ACCEPT.
$ sudo iptables -P FORWARD ACCEPT
--
https://docs.docker.com/network/

docker network driver:
MACVLAN: every container gets its own IP and MAC address, requires promiscuous mode
join existing networks. allow containers to communicate with other hosts. the container is a peer in the network.
--
IPVLAN: every container gets its own IP.
join existing networks. allow containers to communicate with other hosts. the container is a peer in the network.
docker network create -d ipvlan --subnet=192.167.1.10/24 --gateway=... --ip-range=... -o ipvlan_mode=12 -o parent=eth0 <name>

docker:
Layer 4 (Transport) routing mesh (port-based), only one service on one port
Layer 7 (Application) HTTP Routing Mesh (HRM), allow multiple services on one port

sample ~/.docker/config.json:
== start ==
{
  "psFormat": "table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Names}}"
}
== end ==

#use multi stage build to minimize image size
https://docs.docker.com/develop/develop-images/multistage-build/

https://docs.docker.com/storage/bind-mounts/
bind mount can be accessed and modified by processes outside Docker.
volume: managed by and accessed through Docker
---
Bind Mount: a file or directory on the host machine is mounted into a
container. The file or directory is referenced by its full or relative
path on the host machine.
---
Volume: a new directory is created within Docker's storage directory
on the host machine, and Docker manages that directory's content.
