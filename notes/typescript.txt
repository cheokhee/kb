tsc --init #create a tsconfig.json

varName!.fieldName #assert that varName is not null

#for work with webpack
npm install ts-loader

built-in types: Boolean, Number, String, Array, Enum, Void, Null, Undefined, Never, Any

union type:
let someValue: number | string;

variables declared with let/const cannot be used before their declarations

type annotation:
let x: string = 'xxx'

--strictNullChecks compiler option: you have to declare a variable can have null values. cover undefined too
let nullableString: string | null
let nullableString: string | null | undefined

type assertion:
1. (<number>someValue).callFunction()
2. (someValue as number).callFunction()

type declaration files:
--
Bundled - The library bundles its own declaration file.  To check if a library has bundled types,
look for an index.d.ts file in the project. Some libraries will have it specified in their
package.json under the typings or types field.
--
DefinitelyTyped is a huge repository of declarations for libraries that don’t bundle a declaration
file.
npm i --save-dev @types/react
--
https://github.com/DefinitelyTyped/DefinitelyTyped
--
Local Declarations : create a declarations.d.ts file in the root of your source directory.
example:
declare module 'querystring' {
  export function stringify(val: object): string
  export function parse(val: string): object
}

import * as module-name from 'modulename'

! -> non-null assertion: variable!.substring()

var?: string -> var can be null

type declaration file: TS wrapper for JS library

interface: restricted to object type, can do extend and implement
type alias: can be anything

there is currently no way to place type annotations within destructuring patterns. This is
because the following syntax already means something different in JavaScript.
--
In an object destructuring pattern, shape: Shape means “grab the property shape and redefine it
locally as a variable named Shape. Likewise xPos: number creates a variable named number whose value
is based on the parameter’s xPos.

let fruits: string[] = ['Apple', 'Orange', 'Banana'];
let fruits: Array<string> = ['Apple', 'Orange', 'Banana'];

Dynamic Property Keys:
---
interface Dic {
    [key: string]: any
}
const data: Dic = { 'Chicago': [{}...] }
key='Chicago'
data[key]

tuple: array where types for first few elements are specified.
let tuple: [number,string] = [25,'blah']

function type: combination of parameter type and return type
let func: (count: number) => string // a function that takes a number and return a string

// rest parameters (vararg)
function blah(name: string, ...ids: number[]) {}
call it like this: blah('1',2,4), blah('2',3,4,5,6)

interface for function type:
interface blah {
(chars: string, nums: number): string
}

class ClassName {
  constructor(name: string) { }}

import * as blah from '...'

ambient module: created with the declare keyword

/// <reference path="blah.d.ts" />

compiler option:
--module: which module format to output

string literal type: let category: 'manager'|'non-manager'
type category = 'east'|'west'
an alternative to enum
print enum: get a number

symbol: unique and immutable . Symbol()
