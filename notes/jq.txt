example 1
input:
{
  "errors": [],
  "results": [
    {
      "data": [
        {
          "row": [
            "HKG-SYD",
            "SIN JIN BNE KEL CIW SKZ KAO SYD ZIA MEL HKG SHA BON YAT KHH NIN FRE"
          ]
        }
      ],
      "columns": [
        "n.code",
        "n.port_list"
      ]
    }
  ]
}
 | jq -r '.results[0] | .columns,.data[].row | @csv'
output:
"n.code","n.port_list"
"HKG-SYD","SIN JIN BNE KEL CIW SKZ KAO SYD ZIA MEL HKG SHA BON YAT KHH NIN FRE"


example 2
input:
{"code":"HKG-SYD","port_list":"SIN JIN BNE KEL CIW SKZ KAO SYD ZIA MEL HKG SHA BON YAT KHH NIN FRE","is_static":true}
OR
{"error":"Destination Port SYDX is not found"}
 | jq 'if (.error | length) > 0 then .error else .port_list end')

example 3, get length of array
input:
[
  "BELONGS_TO",
]
 | jq '. | length'

example 4, get length
$ echo '[{"name":"cheok"},{"name":"hee"}]' | jq 'length'
2

example 5, return all the elements
$ echo '[{"name":"cheok"},{"name":"hee"}]' | jq '.[]'
{
  "name": "cheok"
}
{
  "name": "hee"
}

example 6, get all the names
$ echo '[{"name":"cheok"},{"name":"hee"}]' | jq '.[] | .name'
"cheok"
"hee"

example 7, get all the elements with a matching property value
$ echo '[{"name":"cheok"},{"name":"hee"}]' | jq '.[] | select(.name=="cheok")'
{
  "name": "cheok"
}

example 8, get first element
$ echo '[{"name":"cheok"},{"name":"hee"}]' | jq -M '.[0]'
{
  "name": "cheok"
}

example 9, get last element
$ echo '[{"name":"cheok"},{"name":"hee"}]' | jq -M '.[-1]'
{
  "name": "hee"
}

example 10, get a range of elements
$ echo '[{"name":"cheok"},{"name":"hee"},{"name":"thong"}]' | jq -M '.[0:2]'
[
  {
    "name": "cheok"
  },
  {
    "name": "hee"
  }
]

example 11: get properties name from json schema
jq -M '.properties | keys[]' json-schema.json

example 12:
echo '{"example1" : 1, "example2" : 2, "example3" : 3}' | jq 'keys'
[
  "example1",
  "example2",
  "example3"
]

example3 13:
echo '{"example1" : 1, "example2" : 2, "example3" : 3}' | jq 'keys[]'
"example1"
"example2"
"example3"
