example 1
input:
{
  "errors": [],
  "results": [
    {
      "data": [
        {
          "row": [
            "HKG-SYD",
            "SIN JIN BNE KEL CIW SKZ KAO SYD ZIA MEL HKG SHA BON YAT KHH NIN FRE"
          ]
        }
      ],
      "columns": [
        "n.code",
        "n.port_list"
      ]
    }
  ]
}
 | jq -r '.results[0] | .columns,.data[].row | @csv'
output:
"n.code","n.port_list"
"HKG-SYD","SIN JIN BNE KEL CIW SKZ KAO SYD ZIA MEL HKG SHA BON YAT KHH NIN FRE"


example 2
input:
{"code":"HKG-SYD","port_list":"SIN JIN BNE KEL CIW SKZ KAO SYD ZIA MEL HKG SHA BON YAT KHH NIN FRE","is_static":true}
OR
{"error":"Destination Port SYDX is not found"}
 | jq 'if (.error | length) > 0 then .error else .port_list end')

example 3, get length of array
input:
[
  "BELONGS_TO",
]
 | jq '. | length'

example 4, get length
$ echo '[{"name":"cheok"},{"name":"hee"}]' | jq 'length'
2

example 5, return all the elements
$ echo '[{"name":"cheok"},{"name":"hee"}]' | jq '.[]'
{
  "name": "cheok"
}
{
  "name": "hee"
}

example 6, get all the names
$ echo '[{"name":"cheok"},{"name":"hee"}]' | jq '.[] | .name'
$ echo '[{"name":"cheok"},{"name":"hee"}]' | jq '.[].name'
"cheok"
"hee"

example 7, get all the elements with a matching property value
$ echo '[{"name":"cheok"},{"name":"hee"}]' | jq '.[] | select(.name=="cheok")'
{
  "name": "cheok"
}

example 8, get first element
$ echo '[{"name":"cheok"},{"name":"hee"}]' | jq -M '.[0]'
{
  "name": "cheok"
}

example 9, get last element
$ echo '[{"name":"cheok"},{"name":"hee"}]' | jq -M '.[-1]'
{
  "name": "hee"
}

example 10, get a range of elements
$ echo '[{"name":"cheok"},{"name":"hee"},{"name":"thong"}]' | jq -M '.[0:2]'
[
  {
    "name": "cheok"
  },
  {
    "name": "hee"
  }
]

example 11: get properties name from json schema
jq -M '.properties | keys[]' json-schema.json

example 12:
echo '{"example1" : 1, "example2" : 2, "example3" : 3}' | jq 'keys'
[
  "example1",
  "example2",
  "example3"
]

example3 13:
echo '{"example1" : 1, "example2" : 2, "example3" : 3}' | jq 'keys[]'
"example1"
"example2"
"example3"

#sort keys
jq -S

$ echo '[{"name":"cheok"},{"name":"hee"}]' | jq '.|tojson'
"[{\"name\":\"cheok\"},{\"name\":\"hee\"}]"
$ echo '[{"name":"cheok"},{"name":"hee"}]' | jq '.|tojson|fromjson'
[{"name":"cheok"},{"name":"hee"}]

to_entries, from_entries

#jq -s : slurp mode: read the entire input stream into a large array and run the filter just once
jq -M '.[] | select(.resourceGroup=="MC_my-res-grp_my-k8s-cluster_westus2")' | jq -s | jq length

#print on one line
Option #1:
$ echo '[{"name":"cheok","age":10},{"name":"hee","age":20}]' | jq -r '.[]| [.name,.age] | @tsv'
cheok   10
hee     20
---
Option #2:
$ echo '[{"name":"cheok","age":10},{"name":"hee","age":20}]' | jq -j '.[]| .name, " ", .age, "\n"'
cheok 10
hee 20
OR
$ echo '[{"name":"cheok","age":10},{"name":"hee","age":20}]' | jq -j '.[]| .name, "\t", .age, "\n"'
cheok   10
hee     20

$ echo '[{"name":"cheok","age":10},{"name":"hee","age":20}]' | jq  '.[]| .name + " " + (.age|tostring)'
"cheok 10"
"hee 20"

Get two scalar values and concatenate/format them into a single string
jq ' "replicas: " + (.spec.replicas | tostring) + " kind: " + .kind '

Select an object from an array of object based on one of the names
jq ' .status.conditions | map(select(.type == "Progressing")) '


Select a single key value pair from a json object
jq ' .metadata.annotations | to_entries | map(select(.key == "label1")) | from_entries '

Select a single key value pair from a json object - short form
jq ' .metadata.annotations | with_entries(select(.key == "label1")) '

Select two key value pairs from a json object
jq ' .metadata.annotations | to_entries | map(select(.key == "label1" or .key == "label2")) | from_entries '

Select two key value pairs from a json object (second version)
jq ' .metadata.annotations | to_entries | map(select(.key == ("label1", "label2"))) | from_entries '

Select all key value pairs from a json object where the name contains substring "label"
jq ' .metadata.annotations | to_entries | map(select(.key | contains("label"))) | from_entries '

Select all key value pairs from a json object where the name matches the regular expression label[1-9]
jq ' .metadata.annotations | to_entries | map(select(.key | test("label[1-9]"))) | from_entries '

Select all key value pairs from a json object where the name contains substring "label" (short form)
jq ' .metadata.annotations | with_entries(select(.key | contains("label"))) '

Add another key value pair to a json object
jq ' .metadata.annotations += { "label4" : "two" } '

Set all values in a json object
jq ' .metadata.annotations | to_entries | map_values(.value="override-value") | from_entries '

Set all values of subset of keys in a json object
jq ' .metadata.annotations | to_entries | map(if .key | contains("label") then .value="kuku" else . end) | from_entries '
