create keys:

--> ssh-keygen -t rsa

This will place the private key in ~/.ssh/id_rsa and the public key in ~/.ssh/id_rsa.pub.

copy id to remote host: create ~/.ssh/authorized_keys
ssh-copy-id user@host

== old way
Now, append the contents of ~/.ssh/id_rsa.pub to the end of ~/.ssh/authorized_keys on the remote machine.
For example:

 $ cat .ssh/id_rsa.pub | ssh host 'cat >> ~/.ssh/authorized_keys'

after this, it won't ask for password

port forwarding
#1. local (outgoing)
A-->(encrypted)B-->(plaintext)C

On A: ssh user@B -L A_port:C:C_port
Users on A: ssh -p A_port localhost uname -a

#2. remote (incoming)
B-->(encrypted)C-->(plaintext)A

On C: ssh user@B -R B_port:A:A_port
users on B: ssh -p B_port localhost uname -a

execute remote command:
ssh user@host "tail -f file"

ssh user@remote_host "cat remote_file.txt" | diff - local_file.txt

ssh tunnel:
Basically, it makes a port on your laptop that gets sent over SSH to a port on the server. You then
connect to the localhost port (in this case, 5901):
ssh -L 5901:localhost:5901 -i ~/mykeyfile.pem ubuntu@myec2hostname

=== SSH tunnel ===
=== SSH local port forwarding ===
when creating SSH tunnel, optionally use -N since we don't need to get a prompt.
#1. A can ssh to B, but not C. B can connect to C
create a SSH tunnel from A to B so that A can connec to C
On A, do: ssh -L localport:IP-of-C:port-of-C userAtB@IP-of-B

general: ssh -L <localport>:<remotehost>:<remoteport> <gateway>
remotehost: the final target

example:
A : 146.222.122.39
B : 146.222.122.95
C : 146.222.122.20

example: ssh -N -L 8080:146.222.122.20:9999 oracle@146.222.122.95

now you can open a brower on A and do http://localhost:8080
and be directed to 146.222.122.20:9999

#2. A can ssh to B but cannot connect to port 9999 on B (due to firewall)
example:
A : 146.222.122.39
B : 146.222.122.95

example: ssh -N -L 8080:146.222.122.95:9999 oracle@146.222.122.95

now you can open a brower on A and do http://localhost:8080
and be directed to 146.222.122.20:9999

=== END SSH tunnel ===

windows workaround:
copy the key files under %userprofile%/.ssh to C:\Program Files (x86)\Git\.ssh or
D:\Git\.ssh (wherever git is installed)

sshpass -p "n2c3" scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no n2c3@IPaddress:/home/n2c3/snapshot/data.tar.gz .

after changing ~/.ssh/id_rsa and ~/.ssh/id_rsa.pub:
may have to do: ssh-add
this will add SSh key to the agent
do "ssh-add -l" to list all the keys

#verify fingerprint
ssh-keygen -l -f ~/.ssh/id_rsa.pub

SSH agent (ssh-agent): key manager for SSH. holds your keys and cert in memory. saves you from typing passphrase
every time you connect to a server. used for signing a message.
The public/private key pair is only used during the initial handshake.
--
The ssh-agent is a helper program that keeps track of user's identity keys and their
passphrases. The agent can then use the keys to log into other servers without having the user type
in a password or passphrase again. This implements a form of single sign-on (SSO).
benefit to ssh-agent is that you only need to enter your passphrase once
handles signing of authentication data for you.

if the ssh session is hung, type these two characters at the beginning of command line to quit: ~.
ssh escape character: ~ (must enter on a new line), does not echo ~ when first pressed
ssh: ~? #show all the commands

https://gravitational.com/blog/how-to-ssh-properly/
ssh-keygen -t rsa -b 4096 -f host_ca -C host_ca
