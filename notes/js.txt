#before declaration:

> typeof c
'undefined'
> c == null
ReferenceError: c is not defined

#declare var
> var c
undefined
> typeof c
'undefined'
> c == null
true
> c === null
false

> var c = null
undefined
> typeof c
'object'
> c == null
true

#undefined
> var cheok
undefined
> cheok === undefined
true

> var cheok = null
undefined
> cheok === undefined
false

> typeof 'hi'
'string'
> typeof 3
'number'
> typeof true
'boolean'
> typeof function() {return1}
'function'
> typeof null
'object'
> typeof undefined
'undefined'
> typeof NaN
'number'

NaN != NaN
true
> NaN !== NaN
true


b.map(function(item) { return item.length})
a.filter(function(each,index,array) { return each.length == 4 }) -> like select:
array.every -> like conform:
no detect method yet!!

anArray.forEach(function(eachObj,index,originalArray) {console.log(eachObj)});

append to array: anArray.push(object)

#show properties of an object
> var a = { name: 'cheok', addr: 'sala'}
> a
{ "name" : "cheok", "addr" : "sala" }
> Object.keys(a)
[ "name", "addr" ]
another way:
for (var m in a) { console.log("prop: " + m) }

anObject.constructor.name -> return "class" name
anObject.constructor -> is a function

> a = { name: 'cheok' }
{ name: 'cheok' }
> a.name
'cheok'
> a["name"]
'cheok'
> a['name']
'cheok'
> a[name]
ReferenceError: name is not defined

falseness:
  false
  0
  ''
  null
  undefined
  NaN

comparison: ==
compare number to string: the string is converted to a number
compare boolean to number: the boolean is converted to a number
compare object to non-object: the object's valueOf() method is called to get a primitive value.
  if valueOf() is not defined, toString() is called.


npm:
#1
$npm_package_config_greet:
greet is an attribute in the config object of package.json:
  "config": {
    "greet": "cheok"
  },
#2:
$npm_config_build_type:
build_type is not in package.json's config object.
it is defined this way: npm config set build_type dev
