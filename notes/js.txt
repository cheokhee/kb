#before declaration:

> typeof c
'undefined'
> c == null
ReferenceError: c is not defined

#declare var
> var c
undefined
> typeof c
'undefined'
> c == null
true
> c === null
false

> var c = null
undefined
> typeof c
'object'
> c == null
true

#undefined
> var cheok
undefined
> cheok === undefined
true

> var cheok = null
undefined
> cheok === undefined
false

> typeof 'hi'
'string'
> typeof 3
'number'
> typeof true
'boolean'
> typeof function() {return1}
'function'
> typeof null
'object'
> typeof undefined
'undefined'
> typeof NaN
'number'

NaN != NaN
true
> NaN !== NaN
true


b.map(function(item) { return item.length})
a.filter(function(each,index,array) { return each.length == 4 }) -> like select:
array.every -> like conform:
no detect method yet!!

anArray.forEach(function(eachObj,index,originalArray) {console.log(eachObj)});

append to array: anArray.push(object)

#show properties of an object
> var a = { name: 'cheok', addr: 'sala'}
> a
{ "name" : "cheok", "addr" : "sala" }
> Object.keys(a)
[ "name", "addr" ]
another way:
for (var m in a) { console.log("prop: " + m) }

anObject.constructor.name -> return "class" name
anObject.constructor -> is a function

> a = { name: 'cheok' }
{ name: 'cheok' }
> a.name
'cheok'
> a["name"]
'cheok'
> a['name']
'cheok'
> a[name]
ReferenceError: name is not defined

> a = {1: 'name'}
{ '1': 'name' }
> a[1]
'name'
> a['1']
'name'
> a["1"]
'name'

falseness:
  false
  0
  ''
  null
  undefined
  NaN

comparison: ==
compare number to string: the string is converted to a number
compare boolean to number: the boolean is converted to a number
compare object to non-object: the object's valueOf() method is called to get a primitive value.
  if valueOf() is not defined, toString() is called.


npm:
#1
$npm_package_config_greet:
greet is an attribute in the config object of package.json:
  "config": {
    "greet": "cheok"
  },
#2:
$npm_config_build_type:
build_type is not in package.json's config object.
it is defined this way: npm config set build_type dev

npm run blah --wow=cheok
inside package.json:     "blah": "echo hi ${npm_config_wow}",
output: hi cheok

> a = {name: 'hi', last: 'hee'}
{ name: 'hi', last: 'hee' }
> Object.getOwnPropertyNames(a)
[ 'name', 'last' ]

// get methods
function getMethods(obj)
{
    var res = [];
    for(var m in obj) {
        if(typeof obj[m] == "function") {
            res.push(m)
        }
    }
    return res;
}

nodejs Error object:
> err.errno
-2
> err.message
'ENOENT, open \'somefile.txt\''
> err.stack
'Error: ENOENT, open \'somefile.txt\'\n    at Error (native)'
> err.name
'Error'

array detection:
Array.isArray(var)

#loop: --i : do the loop (i-1) times
> i=5
5
> while (--i) { console.log("cheok") }
cheok
cheok
cheok
cheok
==============
#do the loop i times
> i=5
5
> while (i--) { console.log("cheok") }
cheok
cheok
cheok
cheok
cheok

error:
1. console.trace() : show the stack where console.trace() is called
2. Error.stack: show the stack where the error occurs

setTimeout: schedule the execution of a one-time callback after a delay.
setInterval: schedule the repeated execution of a callback every delay milliseconds
setImmediate: schedule the "immediate" execution of callback after I/O events callbacks and before setTimeout and setInterval

node debug app.js -> CLI debugger
node --debug app.js -> enable debug mode (port 5858)
node --debug-brk app.js -> stop on first line
node-debug app.js -> does not work for incoming http
#this works:
start app this way: node --debug app.js
start node-inspector: node-inspector
then go to http://127.0.0.1:8080/debug?ws=127.0.0.1:8080&port=5858

http://$host:$port/debug?ws=$host:$port&port=5858

===========
tern:
curl -X POST -d '{"query": {"type":"files"}}' localhost:35433
curl -X POST -d '{"query": {"type":"completions", "file":"schedule.js", "end": {"line": 375, "ch":9}}}' localhost:35433/

==============
a = new Date()
Date.prototype === a.__proto__  #true

Array.prototype.slice(start, end): select elements from an array
start	Required. An integer that specifies where to start the selection (The first element has an index of 0). Use negative numbers to select from the end of an array
end	Optional. An integer that specifies where to end the selection. If omitted, all elements from the start position and to the end of the array will be selected. Use negative numbers to select from the end of an array

String slice(): extract parts of a string

#cast to a string
> var a = 20
undefined
> '' + a
'20'

#cast to a number
> var b = '10'
undefined
> +b
10

#child process
var spawn = require('child_process').spawn;
var ls = spawn('ls');
ls.stdout.on('data', function(data) { console.log(data.toString())};

node --expose-gc
gc()

> process.memoryUsage()
{ rss: 21479424, heapTotal: 10771712, heapUsed: 4931408 }

node-memwatch

bind/call/apply: specify the object that should be bound to the this keyword
call/apply: execute the function immediately.
bind: return a new function to be executed later.

node.js: non-blocking functions are executed by the event loop thread, blocking functions
are executed by a background thread. Node.js maintains a thread pool in the background.

setImmediate: execute a function after I/O event callbacks
process.nextTick: execute a function on the next cycle of the event loop

passing additional parameters to callbacks:
event.on('run', function(originalParm) {
  ...
  intendedCallback(originalParm, additionalParm);
});

passing variable from parent function's scope to a callback:
encapsulate an async call inside a function block and pass in the variable
also call anonymous wrapper:

for (var i=0; i<10; i++) {
  (function(e) {
    setTimeout(function() {
      console.log(e);
    }, 1000);
  })(i);
}
