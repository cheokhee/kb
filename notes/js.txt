#before declaration:

> typeof c
'undefined'
> c == null
ReferenceError: c is not defined

#declare var
> var c
undefined
> typeof c
'undefined'
> c == null
true
> c === null
false

> var c = null
undefined
> typeof c
'object'
> c == null
true

#undefined
> var cheok
undefined
> cheok === undefined
true

> var cheok = null
undefined
> cheok === undefined
false

> typeof 'hi'
'string'
> typeof 3
'number'
> typeof true
'boolean'
> typeof function() {return1}
'function'
> typeof null
'object'
> typeof undefined
'undefined'
> typeof NaN
'number'

NaN != NaN
true
> NaN !== NaN
true


b.map(function(item) { return item.length})
a.filter(function(each,index,array) { return each.length == 4 }) -> like select:
array.every -> like conform:
no detect method yet!!

anArray.forEach(function(eachObj,index,originalArray) {console.log(eachObj)});

append to array: anArray.push(object)

#show properties of an object
> var a = { name: 'cheok', addr: 'sala'}
> a
{ "name" : "cheok", "addr" : "sala" }
> Object.keys(a)
[ "name", "addr" ]
another way:
for (var m in a) { console.log("prop: " + m) }
==note: for-in loop: include inherited properties

anObject.constructor.name -> return "class" name
anObject.constructor -> is a function

> a = { name: 'cheok' }
{ name: 'cheok' }
> a.name
'cheok'
> a["name"]
'cheok'
> a['name']
'cheok'
> a[name]
ReferenceError: name is not defined

> a = {1: 'name'}
{ '1': 'name' }
> a[1]
'name'
> a['1']
'name'
> a["1"]
'name'

falseness:
  false
  0
  ''
  null
  undefined
  NaN

comparison: ==
compare number to string: the string is converted to a number
compare boolean to number: the boolean is converted to a number
compare object to non-object: the object's valueOf() method is called to get a primitive value.
  if valueOf() is not defined, toString() is called.

Objects are coerced to numbers via valueOf() and to strings via toString()

npm:
#1
$npm_package_config_greet:
greet is an attribute in the config object of package.json:
  "config": {
    "greet": "cheok"
  },
#2:
$npm_config_build_type:
build_type is not in package.json's config object.
it is defined this way: npm config set build_type dev

npm run blah --wow=cheok
inside package.json:     "blah": "echo hi ${npm_config_wow}",
output: hi cheok

> a = {name: 'hi', last: 'hee'}
{ name: 'hi', last: 'hee' }
> Object.getOwnPropertyNames(a)
[ 'name', 'last' ]

// get methods
function getMethods(obj)
{
    var res = [];
    for(var m in obj) {
        if(typeof obj[m] == "function") {
            res.push(m)
        }
    }
    return res;
}

nodejs Error object:
> err.errno
-2
> err.message
'ENOENT, open \'somefile.txt\''
> err.stack
'Error: ENOENT, open \'somefile.txt\'\n    at Error (native)'
> err.name
'Error'

array detection:
Array.isArray(var)

#loop: --i : do the loop (i-1) times
> i=5
5
> while (--i) { console.log("cheok") }
cheok
cheok
cheok
cheok
==============
#do the loop i times
> i=5
5
> while (i--) { console.log("cheok") }
cheok
cheok
cheok
cheok
cheok

error:
1. console.trace() : show the stack where console.trace() is called
2. Error.stack: show the stack where the error occurs

setTimeout: schedule the execution of a one-time callback after a delay.
setInterval: schedule the repeated execution of a callback every delay milliseconds
setImmediate: schedule the "immediate" execution of callback after I/O events callbacks and before setTimeout and setInterval

node debug app.js -> CLI debugger
node --debug app.js -> enable debug mode (port 5858)
node --debug-brk app.js -> stop on first line
node-debug app.js -> does not work for incoming http
#this works:
start app this way: node --debug app.js
start node-inspector: node-inspector
then go to http://127.0.0.1:8080/debug?ws=127.0.0.1:8080&port=5858

http://$host:$port/debug?ws=$host:$port&port=5858

===========
tern:
curl -X POST -d '{"query": {"type":"files"}}' localhost:35433
curl -X POST -d '{"query": {"type":"completions", "file":"schedule.js", "end": {"line": 375, "ch":9}}}' localhost:35433/

==============
a = new Date()
Date.prototype === a.__proto__  #true, non-standard
Object.getPrototypeOf(d) === Date.prototype #true, preferred

Array.prototype.slice(start, end): select elements from an array
start	Required. An integer that specifies where to start the selection (The first element has an index of 0). Use negative numbers to select from the end of an array
end	Optional. An integer that specifies where to end the selection. If omitted, all elements from the start position and to the end of the array will be selected. Use negative numbers to select from the end of an array
Array.prototype.slice(start, end): return a shallow copy of a portion of an array

splice(index, howmany, item1, ....., itemX): add and/or remove items
index: An integer that specifies at what position to add/remove items
howmany: The number of items to be removed. If set to 0, no items will be removed
item1...: items to be added

String slice(): extract parts of a string

#cast to a string
> var a = 20
undefined
> '' + a
'20'

#cast to a number
> var b = '10'
undefined
> +b
10

#child process
var spawn = require('child_process').spawn;
var ls = spawn('ls');
ls.stdout.on('data', function(data) { console.log(data.toString())};

node --expose-gc
gc()

> process.memoryUsage()
{ rss: 21479424, heapTotal: 10771712, heapUsed: 4931408 }

node-memwatch

bind/call/apply: specify the object that should be bound to the this keyword
call/apply: execute the function immediately.
apply: takes an array as an argument. use it to call functions with different number of arguments,
   use it to call variadic functions with a computed array of arguments.
bind: return a new function to be executed later.
---
function.call(thisArg, arg1, arg2, ...)
func.apply(thisArg, [argsArray])

node.js: non-blocking functions are executed by the event loop thread, blocking functions
are executed by a background thread. Node.js maintains a thread pool in the background.

setImmediate: execute a function after I/O event callbacks
process.nextTick: execute a function on the next cycle of the event loop

passing additional parameters to callbacks:
event.on('run', function(originalParm) {
  ...
  intendedCallback(originalParm, additionalParm);
});

passing variable from parent function's scope to a callback:
encapsulate an async call inside a function block and pass in the variable
also call anonymous wrapper:

for (var i=0; i<10; i++) {
  (function(e) {
    setTimeout(function() {
      console.log(e);
    }, 1000);
  })(i);
}

a = { name: 'hi', last: 'hee', count: 3}
{ name: 'hi', last: 'hee', count: 3 }
Object.keys(a)
[ 'name', 'last', 'count' ]

#add days to date:
> c=new Date(a.getTime() - (7*24*60*60*1000))
> c=new Date(a.getTime() + (7*24*60*60*1000))

#create Non-enumerable properties
var person = { age: 18 };
Object.defineProperty(person, 'name', { value: 'Joshua', enumerable: false });

node js: add repl.js
in app.js:
require('./repl')
exports.app = app;

then: telnet localhost 3003:
Object.keys(global.require.main.exports.app.get('facilities')).length

global.require.main.exports.app.get('facilities').LGB01

global.require.main.exports.app.get('port')

==== prototype chain =====
function User(name) { this.name=name }
User.prototype.toString = function() {};
var u = new User('hi');

The User function has a property called prototype, which points to an object.

the instance object u "inherits" from User.prototype (think of u as an instance of User)
If a property is not in u, the lookup will move up to User.prototype
summary: u.__proto__ points to User.prototype (non-standard)

User is a function object (think of User as an instance of Function)
User.__proto__ points to Function.prototype

==== prototype chain =====

string: a sequence of 16-bit code units
uses UTF-16 for internal string representation
some unicode code points in UTF-16 require two 16-bit code units
so aString.length can be incorrect if a code point requires 2 code units

create prototype-free empty objects: Object.create(null)

=== install oracledb
get instantclient-basic-linux.x64-11.2.0.3.0.zip instantclient-sdk-linux.x64-11.2.0.3.0.zip from orable web site
unpack,
link libclntsh.so.11.1 to libclntsh.so
====
OCI_INC_DIR=~/instantclient_11_2/sdk/include LIBRARY_PATH=~/instantclient_11_2 npm install oracledb
===
LD_LIBRARY_PATH=~/instantclient_11_2 node app.js

#add an array of objects to another array
Array.prototype.push.apply(targetArray, sourceArray);

document.getElementsByTagName('head')[0]

npm prefix -g

npm install -g:
packages are installed into the {prefix}/lib/node_modules folder, instead of the current working directory.
bin files are linked to {prefix}/bin
man pages are linked to {prefix}/share/man

put this in ~/.npmrc:
prefix=/usr/local

Script tags inside the head element will be loaded and interpreted before any HTML is rendered, this
blocks HTML/CSS rendering. Script tags at the bottom of the body tag, will not block HTML/CSS and
since you can only play around with the DOM on DomReady, this is the best position to put your
JavaScript.
--
The best place for it is just before you need it and no sooner.
--
the browser must go into single-threaded mode while the JS loads and then executes. If the script is
in the head or in the midst of the content, the browser will "pause" while it deals with the JS. By
placing the JS at the bottom, the content will be loaded and generally visible so the user can start
reading it while the browser is still dealing with the JS.
--
in general, put script tag at the bottom, just before </body>. jQuery should be in head
put css tag in the <head>

node.js:
every file gets a module.exports object it can use to expose an object to others.

node:
blanket: code coverage
mocha, jasmine: testing framework
webdriver, selenium

WebDriver is a tool for automating web application testing, and in particular to verify that they
work as expected. It aims to provide a friendly API that's easy to explore and understand, easier to
use than the Selenium-RC (1.0) API, which will help to make your tests easier to read and maintain.
--
Selenium RC injects javascript function into browsers when the web page is loaded. Selenium
WebDriver drives the browser using browser's built-in support. WebDriver is a tool for testing web
applications across different browsers using different programming languages
--
Selenium is a portable software-testing framework for web applications. Selenium provides a
record/playback tool for authoring tests without the need to learn a test scripting language
(Selenium IDE).
--
Selenium WebDriver drives the browser using browser's built-in support. WebDriver is a tool for
testing web applications across different browsers using different programming languages. WebDriver
directly talks to the browser while Selenium RC needs the help of the RC Server in order to do so.
--
WebDriver is a web automation framework that allows you to execute your tests against different
browsers, not just Firefox (unlike Selenium IDE). WebDriver also enables you to use a programming
language in creating your test scripts (not possible in Selenium IDE)
--
Selenium uses JavaScript to automate web pages. This lets it interact very tightly with web content,
and was one of the first automation tools to support Ajax and other heavily dynamic pages. However,
this also means Selenium runs inside the JavaScript sandbox. This means you need to run the
Selenium-RC server to get around the same-origin policy, which can sometimes cause issues with
browser setup.
--
WebDriver on the other hand uses native automation from each language. While this means it takes
longer to support new browsers/languages, it does offer a much closer 'feel' to the browser. If
you're happy with WebDriver, stick with it, it's the future. There are limitations and bugs right
now, but if they're not stopping you, go for it.

Selenium Benefits over WebDriver
Supports many browsers and many languages, WebDriver needs native implementations for each new language/browser combo.
Very mature and complete API
Currently (Sept 2010) supports JavaScript alerts and confirms better
---
Benefits of WebDriver Compared to Selenium
Native automation faster and a little less prone to error and browser configuration
Does not require Selenium-RC Server to be running
Access to headless HTMLUnit can allow tests to run very fast
Great API

JWT (JSON web token): for authentication

hoisting

Immediately Invoked Function Expression

module bundler:
asynchronously loading modules and running them when they have finished loading, or by combining
all of the necessary files into a single JavaScript file that would be loaded via a <script> tag in
the HTML.

== start jquery
Basic syntax is: $(selector).action()

A $ sign to define/access jQuery
A (selector) to "query (or find)" HTML elements
A jQuery action() to be performed on the element(s)
Examples:

$(this).hide() - hides the current element.
$("p").hide() - hides all <p> elements.
$(".test").hide() - hides all elements with class="test".
$("#test").hide() - hides the element with id="test".

$(document).ready(function(){

   // jQuery methods go here...

});

=== end jquery

execute JS code on web:
http://jsbin.com/
https://jsfiddle.net/

HTML5 does not need type attribute in the following:
<link rel="stylesheet" href="css/style.css"/>
<script src="js/main.js"></script>

event handling:
1. window.onload = function() { }
2. window.addEventHandler('load', function() {}, false);

browser global object: window, document

find page elements in JavaScript: CSS selectors

reason for javascript template: avoid putting markup in your JS.

the browser triggers reflows every time you change the page.
reflows occur whenever the browser has to adjust the other content on the page
to accommodate a geometry change in the DOM.
--
to minimize reflow, batch DOM changes and insert them all at once.

javascript template: (1) with embedded JS (2) logic-less (allow you to pass variables)

javascript templates: the best way to generate long strings of markup in JS.
instead of doing it piece by piece, you build a template that generates an entire
chunk of markup at once. templates eliminate the need to mix markup into your JS.
templates are compiled according to the variables you pass into them.
so your JS drive the content of the templates.
--
best practices: (1) put the template in the script tag
<script> type="text/template"> ....
(2) external templates: store it in a separate file. mean an extra HTTP request.

bracket notation for accessing property: obj['cat']
can use variables

JS can be minified. CSS can be generated from SASS file.
How do you debug?
a source map maps the source of an asset to the final product.


var parents = document.getElementsByClassName("panel-display onecol-sidebar clearfix");
var childs = document.getElementsByClassName("panel-container right");
parents.item(0).removeChild(childs.item(0));

var parents = document.getElementsByClassName("inside clearfix");
var childs = document.getElementsByClassName("panel-pane pane-views-panes pane-more-breaking-news-panel-pane-2");
parents.item(0).removeChild(childs.item(0));

this keyword:
this is the object that "owns" the JavaScript code. The value of this, when used in a function, is the
object that "owns" the function (or the object that a function is a method of)
The value of this, when used in an object, is the object
itself. The this keyword in an object constructor does not have a value.

in a page, the global object is the window object

Material Design is a specification that ensures a consistent experience across multiple devices
regardless of form factor or input method.

array length: anArray.length

[...Array(5).keys()] (same as [...(Array(5).keys())] )
=> [0, 1, 2, 3, 4]
#The keys() method returns a new Array Iterator object that contains the index for each element in the
array.
==
var array1 = ['a', 'b', 'c'];
var iterator = array1.keys();
for (let key of iterator) {
  console.log(key); // expected output: 0 1 2
}
// iterator
var a = Array(2).keys() #a is an iterator
> a.next()
{ value: 0, done: false }
> a.next()
{ value: 1, done: false }
> a.next()
{ value: undefined, done: true }
==
Object.keys(['a','b'])
=> [ '0', '1' ]

iterable: has a @@iterator function (Symbol.iterator)
a="hi"
a[Symbol.iterator] ==> [Function: [Symbol.iterator]]


function getAllPropertyNames( obj ) {
    var props = [];

    do {
        Object.getOwnPropertyNames( obj ).forEach(function ( prop ) {
            if ( props.indexOf( prop ) === -1 ) {
                props.push( prop );
            }
        });
    } while ( obj = Object.getPrototypeOf( obj ) );

    return props;
}

== promise ==
// the executor function is executed right away
var p = new Promise(function(resolve,reject) {
  console.log("inside promise, before resolve");
  resolve("p_answer");
  console.log("inside promise, after resolve");
});
// get the resolved value of a promise
p.then(function(response) { console.log("get result:", response) });
//
var p = Promise.resolve("my_answer");

let promise = new Promise(function(resolve, reject) {
  // executor (the producing code)
});
The function passed to new Promise is called the executor. When the promise is created, this
executor function runs automatically. It contains the producing code, that should eventually produce
a result.

The resulting promise object has internal properties:
state — initially “pending”, then changes to either “fulfilled” or “rejected”,
result — an arbitrary value of your choosing, initially undefined.

When the executor finishes the job, it should call one of the functions that it gets as arguments:
resolve(value) — to indicate that the job finished successfully:
sets state to "fulfilled",
sets result to value.
reject(error) — to indicate that an error occurred:
sets state to "rejected",
sets result to error.

To summarize, the executor should do a job (something that takes time usually) and then call resolve
or reject to change the state of the corresponding Promise object.
The Promise that is either resolved or rejected is called “settled”, as opposed to a “pending”
Promise.

The first argument of .then is a function that:
runs when the Promise is resolved, and
receives the result.
The second argument of .then is a function that:
runs when the Promise is rejected, and
receives the error.

===== promise ====

spread operator does not perform a deep copy of object properties to the target object.
spread operator: expand an iterable into a list of elements. used to pass an array to functions
that require a list of arguments.

rest operator: used to create functions that accept variable number of arguments.
when used in the formal parameter of function definition: gather remaining arguments into an array
function sum(...args) {
for (let arg of args) ... }


===
Object.assign() method is used to copy the values of all enumerable own properties from one or more
source objects to a target object. It will return the target object.
const object1 = {
  a: 1,
  b: 2,
  c: 3
};
const object2 = Object.assign({c: 4, d: 5}, object1);
console.log(object2.c, object2.d);
// expected output: 3 5

Object.assign(target, ...sources)
Object.assign({}, defaults, options): mutate first argument

Properties in the target object will be overwritten by properties in the sources if they have the
same key.  The Object.assign() method only copies enumerable and own properties from a source object
to a target object.  Object.assign() copies property values. If the source value is a reference to
an object, it only copies that reference value. does not do deep cloning

To create a non-enumerable property we have to use Object.defineProperty(). A special method for
creating properties on an object.
Object.defineProperty() is also how you create read-only properties.

arrow function does not create a new scope.
this, arguments, and super point to the containing scope
example:
function puzzle() {
  return function() {
    console.log(arguments) }}
puzzle('a','b','c')(1,2,3)
-->
{ '0': 1, '1': 2, '2': 3 }
VS
function puzzle() {
  return () => console.log(arguments) }
puzzle('a','b','c')(1,2,3)
-->
{ '0': 'a', '1': 'b', '2': 'c' }

function join(...list) {
  return list.join(",") }
join("a","b","c")
-->
'a,b,c'

Symbol: a unique value type, do not have literal representation
Symbol() === Symbol()
--> false
Symbol('blah')
purpose: to implement protocols, to use as property keys
===
> obj = { name: 'cheok', [Symbol('blah')]: "wow"}
{ name: 'cheok', [Symbol(blah)]: 'wow' }
==> does not show up in Object.keys(obj) and Object.getOwnPropertyNames(obj)
use: Object.getOwnPropertySymbols(a)
[ Symbol(blah) ]
== global symbols: Symbol.for(key) , Symbol.keyFor(symbol)
well-known symbols:
Symbol.toPrimitive
Symbol.iterator
Symbol.match

--use destructuring to swap: [left,right] = [right,left]

ES6: Map (any object can be used as keys)

generator: a special kind of iterator that can suspend execution while retaining
its context. conform with both iterable and iterator protocols.
iterable protocol: has a Symbol.iterator function
iterator protocol: has a next() function

debounce function: call the function only after a specific amount of time has passed.
  in essence, group multiple calls into a single one
  debouncing event waits before triggering the function execution, until the events stop happening
  so rapidly.
  example: scrolling resizing
  debounced function: limits the rate at which a function can fire
  The debounce function delays the processing of the keyup event until the user has stopped typing for
  a predetermined amount of time.
throttle function: call a function every X amount of time.
  don't allow to our function to execute more than once every X milliseconds.

== when the tab is about to be closed, or reloaded
window.onbeforeunload = function (event) { console.log("unload"); event.returnValue = ''}

React Portal: provide a first-class way to render children into a DOM node that exists
outside the DOM hierarchy of the parent component.
==
React Fragments let you group a list of children without adding extra nodes to the DOM.

"d".localeCompare("d")

React Refs provide a way to access DOM nodes or React elements created in the render method.
this.textInput = React.createRef();
this.textInput.current.value
<input type="text" ref={this.textInput} />
OR
this.textInput = React.createRef();
this.textInput.value
<input type="text" ref={element => this.textInput = element} />
===
legacy:
<input type="text" ref="textInput" />
this.refs.textInput.value

Object.freeze()

what this.props.children does is that it is used to display whatever you include between the opening
and closing tags when invoking a component.
==
const Picture = (props) => {
  return (
    <div>
      <img src={props.src}/>
      {props.children}
    </div>
  )
}

Whenever this component is invoked {props.children} will also be displayed and this is just a
reference to what is between the opening and closing tags of the component.

render () {
  return (
    <div className='container'>
      <Picture key={picture.id} src={picture.src}>
          //what is placed here is passed as props.children
      </Picture>
    </div>
  )
}
===

A render prop is where a component's prop is assigned a function and this is called in the render
method of the component. Calling the function can return a React element or component to render.

using Form in React:
uncontrolled component: the form data is handled by the DOM. you use a ref to get values from the DOM.
controlled component: the form gets its value from the state of a React component. attach an
event handler to the form. every time the user presses a key, the event handler fires and update
the component's state, the form will then update with the latest state of the component.
the form data is managed by the React component.

React context: allow you to pass data thru the component tree without having to pass props down
manually at every level.

async/await:
async: means the function always return a promise. even if the function does not return a promise,
JS will wrap the value in a resolved promise
await <promise>

a = ["hi","ho"]
[ 'hi', 'ho' ]
> a.filter((b) => b === "ho")
[ 'ho' ]
> a.find((b) => b === "ho")
'ho'

regex
a = /[ab]c/
> a.exec("ac")
[ 'ac', index: 0, input: 'ac', groups: undefined ]
> a.exec("dd")
null
> a.test("dd")
false
> a.test("ac")
true

jest AtAGlanceCountBoxes.test.js
jest AtAGlanceCountBoxes.test.js -t renders
--> change test from it() to it.only(), use it along with file name, run only those tests in the file

data binding: the process that connects the UI to data.
parent -> child: props
child -> parent: callback
one-way data flow: props are passed from parent to children, children cannot change state of parent.

#fake REST API server
npm install json-server

React synthetic event:
https://reactjs.org/docs/events.html

jsonschema.net
jsonvalidate.com

JSON schema:
additonalProperties: false
# dependent properties:
"dependencies": {
  "field1": ["field2",..]
}
--> if field1 is present, field2 must be present also

destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values
from arrays, or properties from objects, into distinct variables.
e.g.
[a, b] = [10, 20];
[a, b, ...rest] = [10, 20, 30, 40, 50];
console.log(rest);
// expected output: [30,40,50]
{ a, b } = { a: 10, b: 20 }

Spread syntax allows an iterable such as an array expression or string to be expanded in places
where zero or more arguments (for function calls) or elements (for array literals) are expected, or
an object expression to be expanded in places where zero or more key-value pairs (for object
literals) are expected.

=== open window with post ===
== define a function:
== same window:
function openWindowWithPost(url, data) {
    var form = document.createElement("form");
    form.target = "_blank";
    form.method = "POST";
    form.action = url;
    for (var key in data) {
        var input = document.createElement("input");
        input.type = "hidden";
        input.name = key;
        input.value = data[key];
        form.appendChild(input);
    }
    document.body.appendChild(form);
    form.submit();
    document.body.removeChild(form);
}
new window:
function openWindowWithPost(url, data) {
    var form = document.createElement("form");
    form.target = "Map";
    form.method = "POST";
    form.action = url;
    for (var key in data) {
        var input = document.createElement("input");
        input.type = "hidden";
        input.name = key;
        input.value = data[key];
        form.appendChild(input);
    }
    document.body.appendChild(form);
    window.open("", "Map");
    form.submit();
}
-- call the function
openWindowWithPost("http://localhost:8080/home/open-link", {
  userId:"7CrcwRyX8zuEW3Uf8x5TkA==",
  searchKey:"CMAU455839",
  searchType:"CNTR",
  viewType:"NT"});

> name = "hi"
> a = {[name]: "cheok"}
{ hi: 'cheok' }
