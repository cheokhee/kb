under GOPATH: a top-level directory named "pkg", for holding compiled packages that can be imported

go list ./...
the pattern "./..." means start in the current directory ("./") and find all packages below that directory ("..."):
====
go list -f '{{ .Name }}'
go list -f '{{ .Target }}'
go list -f '{{ .Imports }}'
go list -f '{{ .Deps }}'
go list -f '{{ .GoFiles }}'

os.Args , os.Args[0]

slice: like array

var a [4]int // declare an array of 4 int
b := [2]string{"Penn", "Teller"} # array literal
b := [...]string{"Penn", "Teller"} #array literal

An array variable denotes the entire array; it is not a pointer to the first array element (as would
be the case in C). This means that when you assign or pass around an array value you will make a
copy of its contents.

array: has a fixed length : [4]T
slice: has no specified length: []T

letters := []string{"a", "b", "c", "d"} #slice literal
another way to create a slice: func make([]T, len, cap) []T
var s []byte
s = make([]byte, 5, 5)
// s == []byte{0, 0, 0, 0, 0}

A slice is a descriptor of an array segment. It consists of a pointer to the array, the length of
the segment, and its capacity (the maximum length of the segment).
A slice is backed by an array.

The length is the number of elements referred to by the slice. The capacity is the number of
elements in the underlying array (beginning at the element referred to by the slice pointer).
Slicing does not copy the slice's data. It creates a new slice value that points to the original array.
Therefore, modifying the elements (not the slice itself) of a re-slice modifies the elements of the original slice:
d := []byte{'r', 'o', 'a', 'd'}
e := d[2:]
// e == []byte{'a', 'd'}
e[1] = 'm'
// e == []byte{'a', 'm'}
// d == []byte{'r', 'o', 'a', 'm'}

copy slice:
func copy(dst, src []T) int

func append(s []T, x ...T) []T
appends the elements x to the end of the slice s, and grows the slice if a greater capacity is needed.
a := make([]int, 1)
// a == []int{0}
a = append(a, 1, 2, 3)
// a == []int{0, 1, 2, 3}

To append one slice to another, use ... to expand the second argument to a list of arguments.
a := []string{"John", "Paul"}
b := []string{"George", "Ringo", "Pete"}
a = append(a, b...) // equivalent to "append(a, b[0], b[1], b[2])"
// a == []string{"John", "Paul", "George", "Ringo", "Pete"}

zero value of slice is nil
zero value of int : 0
zero value of string: ""

for initialization; condition; post {
}

// an infinite loop
for {
}

// a while loop
for condition {
}

for _,arg := range os.Args[1:] {
}

range produces a pair of values: the index and the value of the element at that index

#update package
go get -u golang.org/x/tools/cmd/goimports

init function:
imported packages -> local variables -> init function(s) -> main

goroutine: an independently executing function
goroutine: a construct for running functions concurrently. like a lightweight thread.

type T struct{}
var _ I = T{}       // Verify that T implements I.
var _ I = (*T)(nil) // Verify that *T implements I.

creating a slice from an array:
slice := array[:]

#remove packages (archives/binaries), source code to be removed manually
go clean -i -n github.com/motemen/gore

To import a package solely for its side-effects (initialization), use the blank identifier as
explicit package name:
import _ "github.com/mattn/go-sqlite3"
-----
In the case of go-sqlite3, the underscore import is used for the side-effect of registering the
sqlite3 driver as a database driver in the init() function, without importing any other functions:

keep unused import and variable:
var _ = fmt.Printf // For debugging; delete when done.
_ = fd

Import declaration          Local name of Sin
=============================================
import   "lib/math"         math.Sin
import m "lib/math"         m.Sin
import . "lib/math"         Sin

#to grow a slice to its capacity:
s = s[:cap(s)]

cap(slice)
len(slice)

a string is a slice of bytes
indexing a string accesses individual bytes
====
fmr.Printf("% x\n", aString)  // put a space between hex numbers

formatting directive
%x : hex
% x : put a space between hex numbers
%q : quoted, escape any non-printable byte sequences
+%q : quoted, escape any non-printable byte sequences and non-ascii bytes
%#U : show Unicode value and its printed representation
rune: mean code point

raw string: `string`

an e-acute can be represented as a single rune (U+00e9) or
an e followed by an acute accent U+0301
--> key takeaway: a character can span multiple runes

(*T)(nil) is a conversion
Conversions are expressions of the form T(x) where T is a type and x is an expression that can be converted to type T.
https://golang.org/ref/spec#Conversions

#check to see if a type implements an interface
var _ anInterface = (*aStruct)(nil)

#list all the commands invoked by go build
go build -x

#list all the flags that can be passed to the compiler
go tool compile -help
