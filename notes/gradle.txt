declaring dependencies:
https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_configurations_graph
dependencies:
  api: transitively exported to consumers
  implementation: not exposed to consumers
  compileOnly
  runtimeOnly
  testImplementation
  testCompileOnly
  testRuntimeOnly
  annotationProcessor
  developmentOnly

developmentOnly 'org.springframework.boot:spring-boot-devtools'
runtimeOnly 'org.mariadb.jdbc:mariadb-java-client:2.5.4'

https://docs.spring.io/spring-boot/docs/1.5.16.RELEASE/reference/html/using-boot-devtools.html

https://discuss.gradle.org/t/how-to-set-compiler-options/10188
gradle java compiler options
===
compileJava {
    options.warnings = false
    options.deprecation = false
    options.compilerArgs += ["-Xdoclint:none", "-Xlint:none", "-nowarn"]
}
compileJava {
    options.compilerArgs << '-Xlint:unchecked'
}

#add JVM options to gradle: works!
GRADLE_OPTS="-XX:+PrintCommandLineFlags" SPRING_PROFILES_ACTIVE=local,local-oracle ./gradlew bootRun
--
== the followings do not work
applicationDefaultJvmArgs = ["-Xms1024m", "-Xmx2048m"]
-
bootRun {
   jvmArgs = "-XX:+PrintCommandLineFlags"
}

https://www.bruceeckel.com/2021/01/02/the-problem-with-gradle/

tell gradle where to find your source files:
sourceSets {
    main {
        java {
            srcDirs 'java11'
        }
    }
}
--
Here, sourceSets, main and java are all functions that take a single lambda parameter, so no
parenthesized list is necessary, just the lambda
-- equivalent to:
sourceSets {
    main {
        java {
            srcDirs('java11')
        }
    }
}
-- equivalent to:
sourceSets.main.java.srcDirs = ['java11']
-- equivalent to:
sourceSets.main.java.srcDirs('java11')

task hello {
    doLast {
        println 'Hello world!'
    }
}
-- then on cli, do this to run hello task
gradle hello

tasks.forEach { println it }

task a {
    doFirst {
        println "task a doFirst"
    }
    println "task a initialization" #this line is executed during config phase
    doLast {
        println "task a doLast"
    }
}
$ gradle a
-->
> Configure project :
task a initialization

> Task :a
task a doFirst
task a doLast

When you write "sourceSets { ... }" you're actually calling a method on an object
the receiver for top-level calls is a Project instance
-- you can prefix each top-level call with project.

'sourceSets { }' calls the lambda on a `SourceSetContainer` instance, accessible via
`Project#sourceSets` property

build scripts in build.gradle files. These are executed against Project objects;
settings scripts in settings.gradle files, executed against Settings object;
init scripts used for global configuration (executed against Gradle instance).

Gradle build consists of one or more projects, and projects consist of tasks. There is always at
least the root project, which may contain subprojects

gradle projects
gradle tasks
gradle tasks --console plain #can do this to all commands
