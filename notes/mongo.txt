#mongo in docker

#connect from an app
docker run --name some-app --link some-mongo:mongo -d application-that-uses-mongo

docker run --name my-mongo -d mongo
#use mongo shell this way
sudo docker run -it --link my-mongo:mongo --rm mongo sh -c 'exec mongo "$MONGO_PORT_27017_TCP_ADDR:$MONGO_PORT_27017_TCP_PORT/test"'

OR
docker run --name my-mongo -d -p 27017:27017 mongo
#then just run mongo, need to wait a little

mongo host:port/db -u user -p pw

sudo docker stop $(sudo docker ps -q)
sudo docker start $(sudo docker ps -aq)

mongo shell:
show collections
db.testdata.find({ code: "34" })

a = { name: "albert" }
db.testdata.insert(a)
db.testdata.find()
db.testdata.remove({})
db.testdata.drop()
db.itsVessel.findOne()
db.itsVessel.find({code: 'YL2'}, {name: 1})

db.testdata.find({code: 'blah}).explain()
OR
db.testdata.explain().find({_id: {}})

#create index
db.testdata.ensureIndex({code:1})

db.system.indexes.find()
{ "v" : 1, "key" : { "code" : 1 }, "name" : "code_1", "ns" : "test.testdata" }

db.testdata.dropIndex({code:1})

query plan:
before index:
{
        "queryPlanner" : {
                "plannerVersion" : 1,
                "namespace" : "test.testdata",
                "indexFilterSet" : false,
                "parsedQuery" : {
                        "code" : {
                                "$eq" : "blah"
                        }
                },
                "winningPlan" : {
                        "stage" : "COLLSCAN",
                        "filter" : {
                                "code" : {
                                        "$eq" : "blah"
                                }
                        },
                        "direction" : "forward"
                },
                "rejectedPlans" : [ ]
        },
        "serverInfo" : {
                "host" : "blah",
                "port" : 27350,
                "version" : "3.0.0",
                "gitVersion" : "a841fd6394365954886924a35076691b4d149168 modules: enterprise"
        },
        "ok" : 1
}

after index:
{
        "queryPlanner" : {
                "plannerVersion" : 1,
                "namespace" : "test.testdata",
                "indexFilterSet" : false,
                "parsedQuery" : {
                        "code" : {
                                "$eq" : "blah"
                        }
                },
                "winningPlan" : {
                        "stage" : "FETCH",
                        "inputStage" : {
                                "stage" : "IXSCAN",
                                "keyPattern" : {
                                        "code" : 1
                                },
                                "indexName" : "code_1",
                                "isMultiKey" : false,
                                "direction" : "forward",
                                "indexBounds" : {
                                        "code" : [
                                                "[\"blah\", \"blah\"]"
                                        ]
                                }
                        }
                },
                "rejectedPlans" : [ ]
        },
        "serverInfo" : {
                "host" : "blah",
                "port" : 27350,
                "version" : "3.0.0",
                "gitVersion" : "a841fd6394365954886924a35076691b4d149168 modules: enterprise"
        },
        "ok" : 1
}

  mongoose.connection.close(function() {
    console.log('Closed DB connection and exitting due to uncaught exception');
    process.exit(0);
  });

#db connection pool size:
#1: single server
mongoose.connect(dbPath, { server: { poolSize: 10 } }, function onMongooseError(err){
#2: ReplicaSet
mongoose.connect(dbPath, { replset: { poolSize: 3 ,  rs_name: 'reptest' }}, function onMongooseError(err){

mongodb://userid:password@host:27250/moc_ss,host:27251
mongodb://userid:password@host:27350/moc_ss

db.routeSearchStats.aggregate({$group: {_id: null, avgElapsedTimeInMs: {$avg: "$elapsedTimeInMs"}}})
{ "_id" : null, "avgElapsedTimeInMs" : 20.432262530833317 }

Write concern describes the guarantee that MongoDB provides when reporting on the success of a write operation.

db.products.insert(
    { item: "envelopes", qty : 100, type: "Clasp" },
    { writeConcern: { j: true } }
)

db.collection.insert(
   <document or array of documents>,
   {
     writeConcern: <document>,
     ordered: <boolean>
   }
)

mongotop/mongostat --host host --port 27350 -u siteRootAdmin -p password --authenticationDatabase admin

db.collection.find({timestamp: { $gte: ISODate("2015-05-01T20:29:00.000Z"), $lt: ISODate("2015-05-01T20:47:00.000Z") }}).count()

db.collection.find({"route.CargoCutoffLocalDateTime": {$gt: "20150125000000.000", $lt: "20150126000000.000"}, "route.OriginCity.ID": "461802935876553", "route.DestinationCity.ID": "461802935877067"})

aggregate:
db.zipcodes.aggregate( [
   { $group: { _id: "$state", totalPop: { $sum: "$pop" } } },
   { $match: { totalPop: { $gte: 10*1000*1000 } } }
] )

equivalent to:
SELECT state, SUM(pop) AS totalPop
FROM zipcodes
GROUP BY state
HAVING totalPop >= (10*1000*1000)

db.collection.aggregate([{$match: { numberOfResults: { $gt: 0 }}}, {$group: {_id: null, avgElapsedTimeInMs: {$avg: "$elapsedTimeInMs"}}}])

db.routeSearchStats.aggregate({$group: {_id: "$inCache", avgElapsedTimeInMs: {$avg: "$elapsedTimeInMs"}}})

db.collection.find().pretty()

#show all the keys of a document
Object.keys(db.loadPlanOptimizationScenarios.findOne())

#get field value: use dot notation
document.field
eg. db.loadPlanOptimizationScenarios.findOne({scenarioId:'58f0180da1942f488c54b9ba'}).processingLogs[0].inputs
