components are like JavaScript functions. They accept arbitrary inputs (called "props") and return
React elements describing what should appear on the screen.

functional components
only class components can have state

props cannot be changed.

ReactDOM.render()

npm install -g create-react-app
create-react-app my-app

bundler: Webpack, Browserify

npm init
npm install --save react react-dom

npm start
  Starts the development server.

npm run build
  Bundles the app into static files for production.

npm test
  Starts the test runner.

npm run eject
  Removes this tool and copies build dependencies, configuration files
  and scripts into the app directory. If you do this, you canâ€™t go back!

ReactDOM.render(
  <h1>Hello, world!</h1>,
  document.getElementById('root')
);

react-detector: chrome extension
show-me-the-react: for firefox and chrome
react developer tools: for firefox and chrome

redux:
global store: single source of truth

the only way to change the global state is to dispatch action.
--> store.dispatch(action)

action: just a simple object
example action: {type: types.LOADING_STARTED}
minimum: the action must have a type

then you change the global state by writing reducer functions.
reducer: functions used to create a new state based on an action.

example:
getGlobalStore().dispatch({type: types.LOADING_STARTED})

        getGlobalStore().dispatch({type: types.SHOW_TOAST, payload: {
            severity: SEVERITY_INFO,
            message: 'File has been uploaded'
          }})

action: a simple object
action creator: return an action object

we use thunk middleware: allow us to write action creator that returns a function.

redux selector:
how to access redux state?
option1 is to reference the state directly, e.g., state.container.summary.data
but this requires the component to know the exact shape of the global store. tight coupling.
another option is to use a selector:
function mapStateToProps(state) {
  return {
    containers: getContainersSummary(state),
  }
}

getContainersSummary(state) is a selector function

react-test-renderer

middleware: allow u to inject custom behavior into redux state management process.

React Fragments let you group a list of children without adding extra nodes to the DOM.
---
React Portals provide a first-class way to render children into a DOM node that exists outside the
DOM hierarchy of the parent component.

react hooks: allow functional component to have states
--> useState(), useEffect()
useEffect(): perform side effects after every render
can think of useEffect Hook as componentDidMount, componentDidUpdate, and componentWillUnmount combined
