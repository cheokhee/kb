components are like JavaScript functions. They accept arbitrary inputs (called "props") and return
React elements describing what should appear on the screen.

functional components
only class components can have state

props cannot be changed.

ReactDOM.render()

npm install -g create-react-app
create-react-app my-app

bundler: Webpack, Browserify

npm init
npm install --save react react-dom

npm start
  Starts the development server.

npm run build
  Bundles the app into static files for production.

npm test
  Starts the test runner.

npm run eject
  Removes this tool and copies build dependencies, configuration files
  and scripts into the app directory. If you do this, you can’t go back!

ReactDOM.render(
  <h1>Hello, world!</h1>,
  document.getElementById('root')
);

react-detector: chrome extension
show-me-the-react: for firefox and chrome
react developer tools: for firefox and chrome

redux:
global store: single source of truth

the only way to change the global state is to dispatch action.
--> store.dispatch(action)

action: just a simple object
example action: {type: types.LOADING_STARTED}
minimum: the action must have a type

then you change the global state by writing reducer functions.
reducer: functions used to create a new state based on an action.
--
export default function reducer(state = initialState, action) {
  switch (action.type) {
    case types.SET_SELECTED_MARKER: {
      return {...state, selectedMarker: action.payload}
    }
===
example:
getGlobalStore().dispatch({type: types.LOADING_STARTED})

        getGlobalStore().dispatch({type: types.SHOW_TOAST, payload: {
            severity: SEVERITY_INFO,
            message: 'File has been uploaded'
          }})

action: a simple object
action creator: return an action object

we use thunk middleware: allow us to write action creator that returns a function.

redux selector:
how to access redux state?
option1 is to reference the state directly, e.g., state.container.summary.data
but this requires the component to know the exact shape of the global store. tight coupling.
another option is to use a selector:
function mapStateToProps(state) {
  return {
    containers: getContainersSummary(state),
  }
}

getContainersSummary(state) is a selector function

react-test-renderer

middleware: allow u to inject custom behavior into redux state management process.

React Fragments let you group a list of children without adding extra nodes to the DOM.
---
React Portals provide a first-class way to render children into a DOM node that exists outside the
DOM hierarchy of the parent component.

Hooks are functions that let you “hook into” React state and lifecycle features from function components
react hooks: allow functional component to have states
--> useState(), useEffect()
useEffect(): perform side effects after every render
can think of useEffect Hook as componentDidMount, componentDidUpdate, and componentWillUnmount combined
==
useEffect(callback-function, [an array of optional dependencies]): if any of the dependencies change,
re-run the callback function.
---
const [count, setCount] = useState(0);
useState() returns an array. the first is the current state value and the second is a function for changing the value
react re-renders after every state change
--
Code inside componentDidMount run once when the component is mounted. useEffect hook equivalent for this behaviour is
useEffect(() => {
  // Your code here
}, []);
Without the second parameter the useEffect hook will be called on every render of the component.
--
componentDidMount() {
  window.addEventListener('mousemove', () => {})
}
componentWillUnmount() {
  window.removeEventListener('mousemove', () => {})
}
Hook equivalent of above code will be as follows:
useEffect(() => {
  window.addEventListener('mousemove', () => {});

  // returned function will be called on component unmount
  return () => {
    window.removeEventListener('mousemove', () => {})
  }
}, [])
---
If your effect returns a function, React will run it when it is time to clean up
---
https://stackoverflow.com/questions/53464595/how-to-use-componentwillmount-in-react-hooks

render prop: A component with a render prop takes a function that returns a React element and calls
it instead of implementing its own render logic. a technique for sharing code between React
components using a prop whose value is a function.
example:
<DataProvider render={data => (
  <h1>Hello {data.target}</h1>
)}/>

A controlled component is a react component that controls the values of input elements in a form
using setState(). In a controlled component, form data is handled by a React component. The
alternative is uncontrolled components, where form data is handled by the DOM itself.

Hydrate is basically used in case of SSR(Server side Rendering). SSR gives you the skeleton or HTML
markup which is being shipped from a server so that for the first time when your page loads it is
not blank and search engine bots can index it for SEO(A use case of SSR). So hydrate adds the JS to
your page or a node to which SSR is applied. So that your page responds to the events performed by
the user.

Passing data to the application at run time is known as “initialization”, “bootstrapping” or “state
hydration”.

#automatic binding, no need to do this.myMethod = this.myMethod.bind(this)
#ES6 arrow notation has automatic binding
===
export default class App extends Compononent {
  constructor(props) {
  super(props);
  this.state = {};
  }
myMethod = () => {
    // This method is bound implicitly!
  }

#TypeScript React functional component
type AppProps = { message: string }; /* could also use interface */
const App = ({ message }: AppProps) => <div>{message}</div>;

https://github.com/typescript-cheatsheets/react

export const OverviewContext = React.createContext<IContext>(defaultValue)
All consumers that are descendants of a Provider will re-render whenever the Provider’s value prop changes
Whenever the parent component re-renders and passes in a new reference to the context provider as
the value, any component that reads from that context will be forced to re-render.
Providers can be nested to override values deeper within the tree.
the createContext() method returns an object with a Provider and Consumer component
The React Context API is React’s way of managing state in multiple components that are not directly connected.
---
return (
  <OverviewContext.Provider value={...}>
    <div> ... </div>
  </OverviewContext.Provider>
)
---
<OverviewContext.Consumer>
  {(context) => (
  )
  }
</OverviewContext.Consumer>
-- can also use useContext()

const [state, dispatch] = useReducer(reducer, initialState)
--
const initialState = {count: 0}
function reducer(state, action) {
  switch (action.type) {
    case 'increment':
      return {count: state.count + 1};
....  }}

function Counter() {
  const [state, dispatch] = useReducer(reducer, initialState);
  return (...); }

<React.StrictMode>: double-invoking certain functions
https://reactjs.org/docs/strict-mode.html

Refs provide a way to access DOM nodes or React elements created in the render method.

Only call Hooks at the top level. Don’t call Hooks inside loops, conditions, or nested functions.
Only call Hooks from React function components.

If you’ve no idea where a function’s being called from, log an Error object in it and you’ll get a
stack trace in the console:
-> console.log(Error('calling app'))

Force re-renders using the key prop??
https://sean-warman.medium.com/best-react-hacks-for-lazy-devs-b44b533fa923
