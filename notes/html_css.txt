<hr/> : horizontal line

<pre> : pre-formatted text, preserves space and line breaks

<code> : computer code
<kbd> : keyboard input
<tt> : teletype text
<samp> : sample text
<var> : variable

#the <base> tag lets all links open in a new window
<html>
  <head>
	<base target="_blank">
    <meta charset="utf-8" />
  </head>

style sheet precedence:
1. author style sheet
2. user style sheet
3. user agent style sheet (user agent: browser, or any program that accesses web pages)

how to resolve conflicting properties for an element?
1. where does it come from? style sheet precedence (see above)
2. !important : add more weight to a declaration
3. The more specific a selector is, the more precedence it will get.
4. sort the rules by the order they were defined. Rules that are defined later in the document
   tree have higher precedence than those defined earlier. And rules from an imported style sheet are considered before rules directly in the style sheet.

Margin is outer space of an element, while Padding is inner space of an element. Margin is the space
outside the border of an element, while Padding is the space that is inside the border of it. Margin
can be value auto: margin: auto , but you can't give Padding the value of auto.

CSS
em:	Relative to the font-size of the element (2em means 2 times the size of the current font)

CSS resets: every browser has its own default styles for different elements. CSS resets
take every common HTML element with a predefined style and provide one unified style for
all browsers.

CSS selectors: type, class, ID

block element: start on a new line and occupy available width.
inline element: determined by the display property, cannot have a fixed size.
display:
  block: make the element a block-level element
  inline: make the element an inline-level element
  inline-block: behave as a block element, but displayed inline with other elements.
  none: hide the element

box model: every element is a rectangular box: width, height, padding, border, margin
width, height: apply to block element only

inline element: margins only work horizontally (left and right)
paddings work on four sides. but the top and bottom may bleed into the lines
above/below the element.

position: relative (relative to its original position)
used with top: push an element down
used with left: push an element to the right
===
position: absolute -> relative to the closest relatively positioned parent.
if not exist, relative to the body element

CSS animation: transforms, transitions, keyframes

descendant combinator: A B
child combinator: A > B (immediate child only)
adjacent sibling combinator: A + B (A is immediately followed by B)
general sibling combinator: A ~ B (A is followed by B, may or may not be adjacent)
negation selector: :not()
example: p:not(.classy) -> all paragraphs except classy paragraph
---
.class > * + * {
  margin-left: 4px;
}
apply the style starting from the second child
---
===
pseudo-classes, pseudo-elements:
a:link, a:visited, a:hover, a:active
:focus
:before, :after -> add content before/after
::selection
===
attribute selector:
img[title]: select img tag with title attribute
a[href="http://www.google.com"]
a[href^="http://"] => begin with
a[href$=".pdf"] => end with

The <iframe> tag specifies an inline frame.
An inline frame is used to embed another document within the current HTML document.
An iframe is used to display a web page within a web page

CSS @font-face rule: allow you to use fonts that are not installed on the
user's computers.

animation: there is a start and end state. need a smooth transition that creates all
the intermediate states. the process of creating these intermediate states is called
interpolation.
CSS animation: also define intermediate states, known as keyframes
CSS transition: you define the start state, end state, and duration

flex model:
justify-content: apply to the main axis
align-items: apply to the cross axis

<meta http-equiv=“Pragma” content=”no-cache”>
<meta http-equiv=“Expires” content=”-1″>
<meta http-equiv=“CACHE-CONTROL” content=”NO-CACHE”>

Block-element-modifier naming convention: .block__element--modifier
.search__label
.search__submit--inverse
.search--inverse

A CSS pseudo-element is a keyword added to a selector that lets you style a specific part of the
selected element(s).example: ::before

A CSS pseudo-class is a keyword added to a selector that specifies a special state of the selected
element(s). For example, :hover can be used to change a button's color when the user's pointer
hovers over it. e.g., :active
