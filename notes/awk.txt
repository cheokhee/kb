Regex:
if ($0 ~ /regex/) {} -> can match part of a string

# find pattern, print it and the previous line
/cancellation/{print x; print}
{x=$0}

#find pattern, print it, the previous line, and the following line
$ awk '/cheok/{print x; print; getline; print};{x=$0}' test.txt
line before
cheok is great
line after

$ echo -e "hi\nho" | awk '{print array["blah"]++}'
0
1

$ echo -e "hi\nho" | awk '{print ++array["blah"]}'
1
2

#count words
awk '{array[$0]++}END {for(i in array) print i, array[i]}'

awk print array: for (key in array)  print key, array[key]

#remove duplicate lines:
awk '!array[$0]++' < file

#print last field
awk '{print $NF}'

#print second last field
awk '{print $(NF-1)}'

#Regular expressions based input field separator
echo 'Sample123string54with908numbers' | awk -F'[0-9]+' '{print $2}'
--> string

#use -v to set variable
awk -v FS=":"

# changing a field will re-build contents of $0
# $1=$1 is an idiomatic way to re-build when there is nothing else to change
$ echo 'foo:123:bar:789' | awk -F: -v OFS='-' '{$1=$1; print $0}'
foo-123-bar-789

Idiomatic print usage
print statement with no arguments will print contents of $0
if condition is specified without corresponding statements, contents of $0 is printed if condition evaluates to true
1 is typically used to represent always true condition and thus print contents of $0
===
echo hi | awk '1' -> print hi
echo hi | awk '0' -> do nothing

#equivalent to grep -F
awk 'index($0,"a+b")' eqns.txt

#ignore case
awk -v IGNORECASE=1

#in-place edit
awk -i inplace '{gsub("e", "E")} 1' greeting.txt
#gsub: changes the original string and return the number of substitution
{ gsub(/Britain/, "United Kingdom"); print }
{ gsub(/Britain/, "United Kingdom", $1); print }
===
#return a new string
gensub(regexp, replacement, how [, target]) #need gawk
===compare:
$ echo hi | gawk '{print gensub("hi","ho","g")}'
ho
$ echo hi | awk '{print gsub("hi","ho")}'
1
=====
gawk '{printf("find . -type f -exec sed -i \x27s/%s/%s/g\x27 {} \\+\n",$1,gensub("n2c3","n2c4","g",$1))}'

#shell var
$ f='apple'
$ awk -v word="$f" '$1==word' fruits.txt
apple   42

#match lines that have either Antwerp or Chicago
awk '/Antwerp|Chicago/' r1.txt
#match lines that have neither Antwerp or Chicago
awk '!/Antwerp|Chicago/' r1.txt
#match lines that have both Antwerp and Chicago
awk '/Antwerp/ && /Chicago/' r1.txt

#from pattern to end of file
awk '/Generals/,0' original1.lp

#print lines between two patterns, excluding patterns
awk '/begin/{flag=1;next}/end/{flag=0}flag' <file>
#explanation:
/begin/{flag=1;next} sets the flag when the text begin is found. Then, it skips the line.
The final flag is a pattern with the default action, which is to print $0.
if flag is equal to 1 the line is printed.

#print lines between two patterns, including patterns
awk '/begin/,/end/' <file>

#Print lines between PAT1 and PAT2 - including PAT1
awk '/PAT1/{flag=1} /PAT2/{flag=0} flag' file

#Print lines between PAT1 and PAT2 - including PAT2
awk 'flag; /PAT1/{flag=1} /PAT2/{flag=0}' file
# By placing flag at the very beginning, it triggers the action that was set previously and hence
print the closing pattern but not the starting one.

https://stackoverflow.com/questions/38972736/how-to-select-lines-between-two-patterns/38972737

The next statement forces awk to immediately stop processing the current record and go on to the
next record. This means that no further rules are executed for the current record. The rest of the
current rule's action is not executed either.
