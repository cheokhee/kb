#create a node, label: Person
CREATE (ee:Person { name: "Emil", from: "Sweden", klout: 99 }) #my thought: ee seems redundant?
MATCH (ee:Person) WHERE ee.name = "Emil" RETURN ee;

MATCH (ee:Person) WHERE ee.name = "Emil"
CREATE (js:Person { name: "Johan", from: "Sweden", learn: "surfing" }),
(ir:Person { name: "Ian", from: "England", title: "author" }),
(rvb:Person { name: "Rik", from: "Belgium", pet: "Orval" }),
(ally:Person { name: "Allison", from: "California", hobby: "surfing" }),
(ee)-[:KNOWS {since: 2001}]->(js),(ee)-[:KNOWS {rating: 5}]->(ir),
(js)-[:KNOWS]->(ir),(js)-[:KNOWS]->(rvb),
(ir)-[:KNOWS]->(js),(ir)-[:KNOWS]->(ally),
(rvb)-[:KNOWS]->(ally)

(node1)-[:Relationship]->(node2)

MATCH (ee:Person)-[:KNOWS]-(friends)
WHERE ee.name = "Emil" RETURN ee, friends

MATCH (js:Person)-[:KNOWS]-()-[:KNOWS]-(surfer)
WHERE js.name = "Johan" AND surfer.hobby = "surfing"
RETURN DISTINCT surfer

PROFILE MATCH (js:Person)-[:KNOWS]-()-[:KNOWS]-(surfer)
WHERE js.name = "Johan" AND surfer.hobby = "surfing"
RETURN DISTINCT surfer

MATCH (n:VSID) RETURN n   - show all nodes with label VSID
MATCH (n:VSID) RETURN count(n) â€“ count of all VSID
MATCH (f:Facility) RETURN f limit 1
MATCH (p:Port) RETURN p
MATCH (f:Facility) RETURN keys(f) limit 1 -- return all property keys of f
MATCH (f:Port) RETURN keys(f) limit 1
MATCH (f:VSID) RETURN keys(f) limit 1

#count # of relationships
start r=relationship(*) return count(r)
#count # of nodes
start r=node(*) return count(r)
#get node id 1
start n=node(1) return n
#get relationship id 1
start n=relationship(1) return n
#return type of relationship
start n=relationship(1) return type(n)
#return all relationship types, first one is faster?
start n=relationship(*) return distinct type(n)
OR
match n-[r]-() return distinct type(r)
#return all labels
match n return distinct labels(n)
#find nodes with a specific property
start n=node(*) match n where has(n.code) return n limit 1
#find relationship with a specific property
start r=relationship(*) match ()-[r]-() where has(r.transit_time) return r limit 1
#find relationship that match a certain property
start r=relationship(*) match ()-[r]-() where r.transit_time=0 return count(r)
start r=relationship(*) match ()-[r]-() where not has(r.transit_time) return r limit 1
start r=relationship(*) match ()-[r]-() where type(r)='CONNECTED_TO' return r limit 1
#count # of relationship (both directions)
start n=node(1000) match n-[r]-() return count(r)
#count # of incoming relationship
start n=node(1000) match n<-[r]-() return count(r)
#count # of outgoing relationship
start n=node(1000) match n-[r]->() return count(r)
# find relationship between 2 nodes (by ID)
start a=node(35800), b=node(37876) match a-[r]->b return r
start a=node(591), b=node(102) match a-[r]->b return id(r),type(r)

rel types:
BELONGS_TO
HAS
TRANSHIPMENT
CONNECTED_TO
TERMINALTRANSFERLEG

#find voyage leg without transit_time property
start r=relationship(*) match ()-[r]->() where type(r)='CONNECTED_TO' and not has(r.transit_time) return count(r)
OR
MATCH ()-[r:CONNECTED_TO]->() where not has (r.transit_time) RETURN count(r)

check transit time:
MATCH ()-[r:TRANSHIPMENT]->() where  has (r.transit_time) RETURN count(r);
MATCH ()-[r:CONNECTED_TO]->() where  has (r.transit_time) RETURN count(r);
MATCH ()-[r:TERMINALTRANSFERLEG]->() where  has (r.transit_time) RETURN count(r);

#total # of voyage leg
start r=relationship(*) match ()-[r]->() where type(r)='CONNECTED_TO' return count(r)
OR (next one is faster)
MATCH ()-[r:CONNECTED_TO]->() RETURN count(r)

#find voyage leg where transit_time is zero
start r=relationship(*) match ()-[r]->() where type(r)='CONNECTED_TO' and r.transit_time=0 return count(r)
OR (next one is faster)
MATCH ()-[r:CONNECTED_TO]->() where r.transit_time=0 RETURN count(r)

facility, port: code property
VSID: [ommitted, departure_date, arrival_date, id, arrival, departure, code]

Search for particular VSID
MATCH (n:VSID) WHERE n.code ="MAX-CKR-042-West-HKG01-1" return n

Search for partial VSID string
MATCH (n:VSID) WHERE n.code STARTS WITH "SCE-HDN" return n limit 5

Show all VSIDs which have a :HAS relation and name starts with "SCE-HDN"
MATCH (n:VSID)<-[:HAS]-(f) WHERE n.code STARTS WITH "SCE-HDN" return n, f limit 3

MATCH (n:Facility) RETURN n LIMIT 25

#find all labels
match n return distinct labels(n)

#find relationships
match n-[r]-() return distinct type(r) -- not work?

LOAD CSV WITH HEADERS FROM "file:///a/tapasjo/VS_epoch_revised.csv" AS line FOREACH(ignoreMe IN CASE WHEN trim(line.DERIVEDSTOPID) <> "NULL"  THEN [1] ELSE [] END | MERGE (v:VSID {code: line.DERIVEDSTOPID}) ON MATCH SET v.arrival = toInt(line.ARRIVALEPOCH), v.departure = toInt(line.DEPARTUREEPOCH));

neo4j rest api:
http://localhost:7474/db/data/propertykeys
http://localhost:7474/db/data/node/350/
http://localhost:7474/db/data/node/350/relationships/in
http://localhost:7474/db/data/node/350/relationships/out
http://localhost:7474/db/data/node/0/properties/
http://localhost:7474/db/data/relationship/types --show all relationship types
http://localhost:7474/db/data/labels --show all labels

filter relationship by type: BELONGS_TO is a relationship type
http://localhost:7474/db/data/node/169/relationships/in/BELONGS_TO

path length = # of relationship OR (# of node - 1)
e.g, 1 node: length = 0
