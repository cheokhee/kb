#create a node, label: Person
CREATE (ee:Person { name: "Emil", from: "Sweden", klout: 99 }) #my thought: ee seems redundant?
MATCH (ee:Person) WHERE ee.name = "Emil" RETURN ee;

MATCH (ee:Person) WHERE ee.name = "Emil"
CREATE (js:Person { name: "Johan", from: "Sweden", learn: "surfing" }),
(ir:Person { name: "Ian", from: "England", title: "author" }),
(rvb:Person { name: "Rik", from: "Belgium", pet: "Orval" }),
(ally:Person { name: "Allison", from: "California", hobby: "surfing" }),
(ee)-[:KNOWS {since: 2001}]->(js),(ee)-[:KNOWS {rating: 5}]->(ir),
(js)-[:KNOWS]->(ir),(js)-[:KNOWS]->(rvb),
(ir)-[:KNOWS]->(js),(ir)-[:KNOWS]->(ally),
(rvb)-[:KNOWS]->(ally)

(node1)-[:Relationship]->(node2)

MATCH (ee:Person)-[:KNOWS]-(friends)
WHERE ee.name = "Emil" RETURN ee, friends

MATCH (js:Person)-[:KNOWS]-()-[:KNOWS]-(surfer)
WHERE js.name = "Johan" AND surfer.hobby = "surfing"
RETURN DISTINCT surfer

PROFILE MATCH (js:Person)-[:KNOWS]-()-[:KNOWS]-(surfer)
WHERE js.name = "Johan" AND surfer.hobby = "surfing"
RETURN DISTINCT surfer

MATCH (n:VSID) RETURN n   - show all nodes with label VSID
MATCH (n:VSID) RETURN count(n) â€“ count of all VSID
MATCH (f:Facility) RETURN f limit 1
MATCH (p:Port) RETURN p
MATCH (f:Facility) RETURN keys(f) limit 1 -- return all property keys of f
MATCH (f:Port) RETURN keys(f) limit 1
MATCH (f:VSID) RETURN keys(f) limit 1

#count # of relationships
start r=relationship(*) return count(r)
#count # of nodes
start r=node(*) return count(r)
#get node id 1
start n=node(1) return n
#get relationship id 1
start n=relationship(1) return n
#return type of relationship
start n=relationship(1) return type(n)
#return all relationship types, first one is faster?
start n=relationship(*) return distinct type(n)
OR
match n-[r]-() return distinct type(r)
#return all labels
match n return distinct labels(n)
#find nodes with a specific property
start n=node(*) match n where has(n.code) return n limit 1
#find relationship with a specific property
start r=relationship(*) match ()-[r]-() where has(r.transit_time) return r limit 1
#find relationship that match a certain property
start r=relationship(*) match ()-[r]-() where r.transit_time=0 return count(r)
start r=relationship(*) match ()-[r]-() where not has(r.transit_time) return r limit 1
start r=relationship(*) match ()-[r]-() where type(r)='CONNECTED_TO' return r limit 1
#count # of relationship (both directions)
start n=node(1000) match n-[r]-() return count(r)
#count # of incoming relationship
start n=node(1000) match n<-[r]-() return count(r)
#count # of outgoing relationship
start n=node(1000) match n-[r]->() return count(r)
# find relationship between 2 nodes (by ID)
start a=node(35800), b=node(37876) match a-[r]->b return r
start a=node(591), b=node(102) match a-[r]->b return id(r),type(r)
====
find relationship between two nodes:
match (a)-[r:HAS]->(b) where id(a)=316 and id(b)=90520 return r;

matching: the following are equivalent:
match (n:Facility) where n.code = "LGB01" return n;
match (n:Facility {code:"LGB01"}) return n;

create:
create (n:PolPod {code : "LYL-MDS", port_list:"NPR KRI TRG BNE CLB SIN PKG MDS VTZ LYL WEL PG"})

rel types:
BELONGS_TO
HAS
TRANSHIPMENT
CONNECTED_TO
TERMINALTRANSFERLEG

#find voyage leg without transit_time property
start r=relationship(*) match ()-[r]->() where type(r)='CONNECTED_TO' and not has(r.transit_time) return count(r)
OR
MATCH ()-[r:CONNECTED_TO]->() where not has (r.transit_time) RETURN count(r)

#count terminal transfer relationship
start r=relationship(*) where type(r)='TERMINALTRANSFERLEG' return count(r)
OR
match ()-[r:TERMINALTRANSFERLEG]->() return count(r)

check transit time:
MATCH ()-[r:TRANSHIPMENT]->() where  has (r.transit_time) RETURN count(r);
MATCH ()-[r:CONNECTED_TO]->() where  has (r.transit_time) RETURN count(r);
MATCH ()-[r:TERMINALTRANSFERLEG]->() where  has (r.transit_time) RETURN count(r);

#total # of voyage leg
start r=relationship(*) match ()-[r]->() where type(r)='CONNECTED_TO' return count(r)
OR (next one is faster)
MATCH ()-[r:CONNECTED_TO]->() RETURN count(r)

#find voyage leg where transit_time is zero
start r=relationship(*) match ()-[r]->() where type(r)='CONNECTED_TO' and r.transit_time=0 return count(r)
OR (next one is faster)
MATCH ()-[r:CONNECTED_TO]->() where r.transit_time=0 RETURN count(r)

facility, port: code property
VSID: [ommitted, departure_date, arrival_date, id, arrival, departure, code]

Search for particular VSID
MATCH (n:VSID) WHERE n.code ="MAX-CKR-042-West-HKG01-1" return n

Search for partial VSID string
MATCH (n:VSID) WHERE n.code STARTS WITH "SCE-HDN" return n limit 5

Show all VSIDs which have a :HAS relation and name starts with "SCE-HDN"
MATCH (n:VSID)<-[:HAS]-(f) WHERE n.code STARTS WITH "SCE-HDN" return n, f limit 3

find node without relationship:
find vsid without incoming HAS relationship:
match (a:VSID) where not (a)<-[:HAS]-() return a limit 1
match (a:VSID) where not (a)<-[:HAS]-() and (a)-[:CONNECTED_TO]-() return count(a)

#return start and end node of relationship
match ()-[r:ITM_CONNECTED_TO]->() return labels(startNode(r)),labels(endNode(r)) limit 1;
#compare label
match ()-[r:ITM_CONNECTED_TO]->() where labels(startNode(r))=["FromITMFacility"] return r limit 1;

MATCH (n:Facility) RETURN n LIMIT 25

#find all labels
match n return distinct labels(n)

#find relationships
match n-[r]-() return distinct type(r) -- not work?

#create relationship
match (pg:PortGroup {group_id:'3'}) match (oak:Port {code:'OAK'}) match (lgb:Port {code:'LGB'}) merge (pg)-[:HAS_POD]->(oak) merge (pg)-[:HAS_POD]->(lgb);
OR
start a=node(54180), b=node(1682) merge (a)-[r:CONNECTED_TO_LGB {transit_time:322.53}]->(b) return id(r);

#show relationships between two nodes
match (:VSID{code:'THX-KMI-058-South-HCM07-1'})-[r]->(:VSID{code:'CHL-AXN-007-North-LCB09-1'}) return r;

LOAD CSV WITH HEADERS FROM "file:///a/blah/VS_epoch_revised.csv" AS line FOREACH(ignoreMe IN CASE WHEN trim(line.DERIVEDSTOPID) <> "NULL"  THEN [1] ELSE [] END | MERGE (v:VSID {code: line.DERIVEDSTOPID}) ON MATCH SET v.arrival = toInt(line.ARRIVALEPOCH), v.departure = toInt(line.DEPARTUREEPOCH));

LOAD CSV WITH HEADERS FROM "file:///path/to/port-list.csv" AS line MERGE (n:PolPod {code: line.CODE}) ON CREATE SET n.port_list=line.PORT_LIST ON MATCH SET n.port_list=line.PORT_LIST

LOAD CSV WITH HEADERS FROM "http://146.222.122.158:8000/port-list.csv" AS line MERGE (n:PolPod {code: line.CODE}) ON CREATE SET n.port_list=line.PORT_LIST ON MATCH SET n.port_list=line.PORT_LIST

load csv with headers from "file:///path_to/country.csv" as line match (n:Facility {code: line.facility}) set n.country = line.country

USING PERIODIC COMMIT LOAD CSV WITH HEADERS FROM "file:///home/blah/xaf2" AS line MATCH (v1:VSID {code:line.DERIVEDSTOPID}) DETACH DELETE v1;

LOAD CSV WITH HEADERS FROM 'file:///a/workspace/roe/NearbyPolMapping.csv' AS line CREATE (:NearbyPolMapping { port: line.PORT_CDE, group_id: line.NEARBY_PORT_GRP_ID});

LOAD CSV WITH HEADERS FROM 'file:///a/workspace/roe/NearbyPodMapping.csv' AS line CREATE (:NearbyPodMapping { port: line.PORT_CDE, group_id: line.NEARBY_PORT_GRP_ID});

LOAD CSV WITH HEADERS FROM "file:///a/workspace/roe/facility-port-mapping/ob-mapping-combined.csv" AS line MERGE (n:FacilityPortMapping {code: line.CODE}) ON CREATE SET n.ob_ports=line.PORT ON MATCH SET n.ob_ports=line.PORT;

LOAD CSV WITH HEADERS FROM "file:///a/workspace/roe/facility-port-mapping/ib-mapping-combined.csv" AS line MERGE (n:FacilityPortMapping {code: line.CODE}) ON CREATE SET n.ib_ports=line.PORT ON MATCH SET n.ib_ports=line.PORT;

merge (n:VSID{code:"PHKG-4SY-010-North-HUA07-3"}) on match set n.is_first_stop=false, n.is_last_stop=true;

neo4j rest api:
http://localhost:7474/db/data/propertykeys
http://localhost:7474/db/data/node/350/
http://localhost:7474/db/data/node/350/relationships/in
http://localhost:7474/db/data/node/350/relationships/out
http://localhost:7474/db/data/node/0/properties/
http://localhost:7474/db/data/relationship/types --show all relationship types
http://localhost:7474/db/data/labels --show all labels

filter relationship by type: BELONGS_TO is a relationship type
http://localhost:7474/db/data/node/169/relationships/in/BELONGS_TO

path length = # of relationship OR (# of node - 1)
e.g, 1 node: length = 0

from CommunityBootstrapper > boot.start()

export to csv:
#use this:
curl -s -H "Accept: application/json" -H "Content-Type: application/json" -X POST -d '{"statements" : [ {"statement" : "match (n:PolPod) return n.code as CODE, n.port_list as PORT_LIST"} ]}' http://localhost:7474/db/data/transaction/commit | jq -r '.results[0] | .columns,.data[].row | @csv' | tr -d '"'

curl -s -H "Accept: application/json" -H "Content-Type: application/json" -X POST -d '{"statements" : [ {"statement" : " match (a)-[r:TRANSHIPMENT]->(b) return a.code as FROM_VSID, b.code as TO_VSID"} ]}' http://hln2078p:7475/db/data/transaction/commit | jq -r '.results[0] | .columns,.data[].row | @csv' | tr -d '"'

#jq -r : raw data so that the quotes are not quoted twice, need to remove double quote
curl -s -H "Accept: application/json" -H "Content-Type: application/json" -X POST -d '{"statements" : [ {"statement" : "match (n:PolPod) where length(n.code) = 7 return n.code as CODE, n.port_list as PORT_LIST"} ]}' http://localhost:7474/db/data/transaction/commit | jq -r '.results[0] | .columns,.data[].row | @csv'

curl -s -H "Accept: application/json" -H "Content-Type: application/json" -X POST -d '{"statements" : [ {"statement" : "match (n:ServiceList) return n.code as CODE, n.direct as DIRECT, n.ts1 as TS1, n.ts2 as TS2, n.ts3 as TS3 limit 1"} ]}' http://localhost:7474/db/data/transaction/commit | jq -r -c '.results[0] | .columns,.data[].row '

#look at just 1
curl -s -H "Accept: application/json" -H "Content-Type: application/json" -X POST -d '{"statements" : [ {"statement" : "match (n:ServiceList) return n.code as CODE, replace(n.direct[0],\",\",\";\") as DIRECT, replace(n.ts3[0],\",\",\";\") as TS3_1, replace(n.ts3[1],\",\",\";\") as TS3_2, replace(n.ts3[2],\",\",\";\") as TS3_3, replace(n.ts3[3],\",\",\";\") as TS3_4 limit 1"} ]}' http://localhost:7474/db/data/transaction/commit | jq -r -c '.results[0] | .columns,.data[].row '

#extract service lists
curl -s -H "Accept: application/json" -H "Content-Type: application/json" -X POST -d '{"statements" : [ {"statement" : "match (n:ServiceList) where n.direct<>[\"\"] or n.ts3<>[\"\",\"\",\"\",\"\"] return n.code as CODE, replace(n.direct[0],\",\",\";\") as DIRECT, replace(n.ts3[0],\",\",\";\") as TS_1, replace(n.ts3[1],\",\",\";\") as TS_2, replace(n.ts3[2],\",\",\";\") as TS_3, replace(n.ts3[3],\",\",\";\") as TS_4"} ]}' http://localhost:7474/db/data/transaction/commit | jq -r '.results[0] | .columns,.data[].row | @csv'

create (n:Person {name:split("one,two,three",",")}) return n,id(n);

match (n:ServiceList) where n.code = 'SYD-HKG' return reduce(s="", x in n.ts2 |  s+x+"|");
output: "AEA2,A3N,AAA2|A3S,EU2|KTX1,EU2,KTX3,CMS,AEA1|"
issue: need to get rid of trailing |
match (n:ServiceList) where n.code = 'SYD-HKG' return reduce(s="", x in n.ts2 |  s+"|"+x);
output: "|AEA2,A3N,AAA2|A3S,EU2|KTX1,EU2,KTX3,CMS,AEA1"
issue need to get rid of beginning |

#syntax error below:
match (n:ServiceList) where n.code = 'SYD-HKG' return reduce(s="", x in n.ts2 | if (length(s)=0) x else s+"|"+x);

neo4j startup:
community/server/src/main/java/org/neo4j/server/database/LifecycleManagingDatabase.java
  print "Successfully started database"
community/server/src/main/java/org/neo4j/server/AbstractNeoServer.java
  print "Starting HTTP on port 7474 (200 threads available)" and "Enabling HTTPS on port 7473"
community/server/src/main/java/org/neo4j/server/modules/ThirdPartyJAXRSModule.java
  print "Mounted unmanaged extension [com.blah] at [/v1]"
community/server/src/main/java/org/neo4j/server/web/Jetty9WebServer.java
  print "Mounting static content at /webadmin" and "Mounting static content at /browser"
community/server/src/main/java/org/neo4j/server/AbstractNeoServer.java
  print "Remote interface ready and available at http://0.0.0.0:7474/"

/webadmin root: community/server/src/main/resources/webadmin-html/index.html
  in system/lib/neo4j-server-2.3.1-static-web.jar

/browser root: community/browser/dist/browser/index.html (this is the one displayed at localhost:7474/browser)
  in system/lib/neo4j-browser-2.3.1.jar
  there is another file (community/browser/app/index.html) slightly different from above

=== jmx ===
wrapper.java.additional=-Dcom.sun.management.jmxremote.port=3637
wrapper.java.additional=-Dcom.sun.management.jmxremote.authenticate=false
wrapper.java.additional=-Dcom.sun.management.jmxremote.ssl=false
wrapper.java.additional=-Djava.rmi.server.hostname=146.222.121.69

neo4j-shell error:
Connection refused to host: 127.0.1.1; nested exception is:
        java.net.ConnectException: Connection refused
Option 1:
#add this to neo4j-shell (put my IP)
-Djava.rmi.server.hostname=146.222.122.158
Option 2:
put in /etc/hosts:
146.222.122.158 HEECH-W7

https://github.com/neo4j/neo4j/archive/2.3.1.zip
https://github.com/neo4j/neo4j/archive/2.3.2.tar.gz

http://neo4j.com/download-thanks/?edition=community&release=2.3.1&flavour=unix

#cannot change relationship type, here's all you can do
MATCH (n:User {name:"foo"})-[r:REL]->(m:User {name:"bar"})
CREATE (n)-[r2:NEWREL]->(m)
// copy properties, if necessary
SET r2 = r
WITH r
DELETE r

#change label
MATCH (n:OLD_LABEL {id:14})
REMOVE n:OLD_LABEL
SET n:NEW_LABEL

neo4j shell dbinfo:
dbinfo -l #list available beans
dbinfo -l Kernel #list attributes under the bean
===================
#show data store location
dbinfo -g Kernel StoreDirectory
{"StoreDirectory": "/home/neo4jsupp/neo4j-7475/data/INM_05252016"}
#show all attributes
dbinfo -g Kernel

check lucene index:
neo4j 2.3:
java -cp lib/lucene-core-3.6.2.jar -ea:org.apache.lucene... org.apache.lucene.index.CheckIndex data/INM_02032016/schema/index/lucene/1 -fix
neo4j 3.0:
java -cp lib/lucene-core-5.5.0.jar:lib/lucene-codecs-5.5.0.jar -ea:org.apache.lucene... org.apache.lucene.index.CheckIndex data/databases/graph.db/schema/index/lucene/1/1
java -cp lucene-core-5.5.0-SNAPSHOT.jar:lib/lucene-codecs-5.5.0.jar -ea:org.apache.lucene... org.apache.lucene.index.CheckIndex data/databases/graph.db/schema/index/lucene/1/1

transaction log: neostore.transaction.db.X

CREATE INDEX ON :Port(code);

evaluator is called first on both the starting and ending points.

JettyThreadCalculator: calculate jetty server thread pool size
org.neo4j.server.webserver.maxthreads=4

dijkstra expansion:
BestFirstSelectorFactory.next(): TraversalBranch next = current.next( expander, metadata );
example current: (72574)--[HAS,7185]-->(30351)
example next:    (72574)--[HAS,7185]-->(30351)--[TERMINALTRANSFERLEG_HOT_NSA,13318407]-->(25945)

in path expander:
(72574)--[HAS,7185]-->(30351)--[TERMINALTRANSFERLEG_HOT_NSA,13318407]-->(25945), cost: 171.52
(72574)--[HAS,59488]-->(46921)--[TERMINALTRANSFERLEG_HOT_NSA,13353765]-->(25945), cost: 101.22
(72574)--[HAS,37222]-->(10693)--[TERMINALTRANSFERLEG_HOT_NSA,13304015]-->(25945), cost: 210.52
(72574)--[HAS,37176]-->(17930)--[TERMINALTRANSFERLEG_HOT_NSA,13499298]-->(25945), cost: 218.57
(72574)--[HAS,71075]-->(59285)--[TERMINALTRANSFERLEG_HOT_NSA,13417466]-->(25945), cost: 199.52
(72574)--[HAS,59652]-->(28987)--[TERMINALTRANSFERLEG_HOT_NSA,13556025]-->(25945), cost: 106.27
(72574)--[HAS,37075]-->(43363)--[TERMINALTRANSFERLEG_HOT_NSA,13428297]-->(25945), cost: 81.57
(72574)--[HAS,59328]-->(34336)--[TERMINALTRANSFERLEG_HOT_NSA,13429028]-->(25945), cost: 196.4
(72574)--[HAS,37116]-->(17099)--[TERMINALTRANSFERLEG_HOT_NSA,13497786]-->(25945), cost: 63.34
(72574)--[HAS,59343]-->(36884)--[TERMINALTRANSFERLEG_HOT_NSA,13587832]-->(25945), cost: 66.52
(72574)--[HAS,59361]-->(24565)--[TERMINALTRANSFERLEG_HOT_NSA,13477583]-->(25945), cost: 174.52
....
then in BestFirstSelectorFactory.next():
TraversalBranch next = current.next( expander, metadata );
only 20 (max_result) was expanded (from lowest cost)
example:
(72574)--[HAS,31108]-->(13953)--[TERMINALTRANSFERLEG_HOT_NSA,13175097]-->(25945), cost: 11.79
...

current in BestFirstSelectorFactory.next(): TraversalBranch next = current.next( expander, metadata );
(72574)--[HAS,7185]-->(30351)
in path expander, path is:
(72574)--[HAS,7185]-->(30351)--[TERMINALTRANSFERLEG_HOT_NSA,13318407]-->(25945)
next in BestFirstSelectorFactory.next(): TraversalBranch next = current.next( expander, metadata );
(72574)--[HAS,7185]-->(30351)--[TERMINALTRANSFERLEG_HOT_NSA,13318407]-->(25945)

conclusion: expander is called first, then cost evaluator

neo4j locking:
When adding, changing or removing a property on a node or relationship a write lock will be taken on
the specific node or relationship.
==
When creating or deleting a node a write lock will be taken for the specific node.
==
When creating or deleting a relationship a write lock will be taken on the specific relationship and
both its nodes.  The locks will be added to the transaction and released when the transaction
finishes.
--
Read locks: they are "shared". If one transaction reads data from node, then other transaction can do this also.
--
Write locks: they are "exclusive". When write lock is taken, all transactions will wait until this
lock will be released and only then proceed further. If another transaction has Read lock on node,
then write lock will wait until this node will be "free".
