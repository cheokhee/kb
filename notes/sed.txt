# find pattern, print it and the next line
/DirectNominationChange/{
p
n
p
}

OR

sed -n '/DirectNominationChange/{p;n;p;} ' EQMProcessing.txt

++++++++++++++++++
--> Capitalize first letter of each word in a string

echo 'fOo BaR' | tr '[A-Z]' '[a-z]' | sed 's/\(^\| \)\([a-z]\)/\1\u\2/g'

--> uppercase
$ echo "abc" | sed 's/[a-z]*/\u&/'
Abc

--> lowercase
$ echo "ABC" | sed 's/[A-Z]/\l&/'
aBC

#capitalize each word
$ echo 'this is just test' | sed -re 's/(\w+)/\u\1/g'
This Is Just Test

$ echo 'this is just test' | sed -re 's/(\w+)/\U\1/g'
THIS IS JUST TEST


+++ extract artifact id from this:

<dependency><groupId>thirdparty_tools</groupId><artifactId>ant-contrib</artifactId><version>1.0b3</version><type>pom

sed 's%\(<dependency>.*<artifactId>\)\([^<]\+\)\(</ar.*$\)%\2%'

#match lines that have either Antwerp or Chicago
sed -nr '/Antwerp|Chicago/p' r1.txt
#match lines that have neither Antwerp or Chicago
sed -nr '/Antwerp|Chicago/!p' r1.txt
#match lines that have both Antwerp and Chicago
sed '/Chicago/!d; /Antwerp/!d' r1.txt

#from pattern to end of file
sed -n '/Generals/,$p' original1.lp

#print lines between two patterns, excluding patterns
#a: if the patterns occur multiple times
#1. sed -n '/begin/,/end/{ /begin/d; /end/d; p; }' <file>
#2. sed '/begin/,/end/{//!b};d' <file>
//!b reads if the current line does not match the pattern, then branch to the end of the script
otherwise, delete it
#3. sed '/begin/,/end/!d;//d' <file>
    equivalent to sed '/begin/,/end/!d;/begin/d;/end/d' <file>
The empty forward slashes // mean: "reuse the last regular expression used".
==
If an RE is empty (that is, no pattern is specified) sed shall behave as if the last RE used in the
last command applied (either as an address or as part of a substitute command) was specified.

---
#b: if the pattern occurs only once
sed '1,/begin/d;/end/,$d' <file>

#print lines between two patterns, including patterns
sed -n '/begin/,/end/p' <file>

#print lines outside two patterns
sed -n '/begin/,/end/!p' <file>

trim whitespace
sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'
sed -r -e 's/^\s+//' -e 's/\s+$//'

sed -i[suffix]: edit file in place, make a backup if suffix is supplied

#add to end of lines that contain a pattern
sed '/type/s/$/,/'
#append line after match
sed '/type/a "required": true'
#insert line before match
sed '/description/i before line'
