ldd : print shared library dependencies

=====
boot-up:

run scripts at startup : put in /etc/rc.local
others:
/etc/init.d/rcS
run scripts in /etc/rc2.d, which links to /etc/init.d

create init-style startup script:
update-rc.d <name> defaults

read /etc/rc2.d/README

default runlevel in /etc/init/rc-sysinit.conf

#start service at boot-up:
update-rc.d SERVICENAME defaults

#remove service from start at boot-up
update-rc.d -f service_name remove

===================================
#ways to manage upstart/init job

upstart jobs are in /etc/init
initctl list : list upstart job

#1:
#start/stop upstart job
start/stop/status docker #as root

#2:
#service
service --status-all
service docker stop/start/restart

#3:
/etc/init.d/docker start/stop/status

#4:
invoke-rc.d docker status

==================================

/etc/init/ttyN.conf : start a getty process for ttyN
stop tty6 : stop tty6

/etc/init/control-alt-delete.conf; define behavior for ctrl-alt-del

/var/log : lots of logs
/var/lib
/var/spool
/usr/share

/var/log/syslog
/var/log/auth.log #sudo log
/var/log/Xorg.0.log
/var/log/apport.log
/var/log/kern.log
/var/log/wtmp
/var/log/pm-powersave.log
/var/log/gpu-manager.log
/var/log/boot.log
/var/log/dmesg
/var/log/udev
/var/log/dpkg.log
/var/log/alternatives.log
/var/log/upstart/
/var/log/lightdm/

dig: DNS lookup utility

file copy tool: rsync

lsmod: list kernel module
modinfo: display module info
modules are in /lib/modules/
rmmod: remove modules
modprobe: add or remove modules

--cron change
move popularity-contest from /etc/cron.daily to ~root/cron
move bsdmainutils from /etc/cron.daily to ~root/cron
move mlocate from /etc/cron.daily to /etc/cron.monthly
move locate from /etc/cron.daily to /etc/cron.monthly

--cron change 2015-01-16
change /etc/cron.daily/locate:
 add "/C /D /Data" to PRUNEPATHS
 add vboxsf to PRUNEFS

/etc/updatedb.conf:
   add /C to prunepaths
   add vboxsf to prunefs
DB: /var/lib/mlocate/mlocate.db

consider disabling mlocate cron job

anacron: for desktops and laptops that are not running 24/7
/var/spool/anacron
/etc/anacrontab

run-parts --report /etc/cron.daily

ufw - program for managing a netfilter firewall
ufw allow 22

sudo visudo #change /etc/sudoers file:
#allow user cheok to run docker without being prompted for the password
#sudo only ask for password per xterm session
added this line:
cheok ALL=(ALL) NOPASSWD: /usr/bin/docker

#swappiness
#the smaller the number, the less aggressive linux will swap
cat /proc/sys/vm/swappiness

/etc/sysctl.conf

iftop : display bandwidth usage on an interface by host
whois : client for the whois directory service

font cache commands:
fc-cache
fc-cat
fc-list
fc-match
fc-pattern
fc-query
fc-scan
fc-validate

fc : shell builtin that display and edits command
help fc : help is a shell builtin

#show distro info : LSB: linux standard base
--> lsb_release -a
output:
Distributor ID: Ubuntu
Description:    Ubuntu 14.10
Release:        14.10
Codename:       utopic

/etc/os-release

partprobe: inform the OS of partition table changes

commands:
lsattr
lsblk
lsb_release
lscpu
lsdiff
lshw
lsinitramfs
lslocks
lsmod
lsnrctl
lsof
lspci
lspcmcia
lspgpot
lsusb

initramfs: initial RAM-based filesystem: allow the kernel to execute programs before the root filesystem is mounted.
initrd: initial RAM disk: serves as a temporary root file system in RAM and allows the kernel to boot without
having to mount any physical disk.

GRUB config:
make a copy of /etc/default/grub and /boot/grub/grub.cfg
1. change /etc/default/grub
GRUB_DEFAULT=saved
GRUB_SAVEDEFAULT=true
2. run update-grub , this will change /boot/grub/grub.cfg
output of update-grub:
Found linux image: /boot/vmlinuz-3.16.0-30-generic
Found initrd image: /boot/initrd.img-3.16.0-30-generic
Found linux image: /boot/vmlinuz-3.16.0-23-generic
Found initrd image: /boot/initrd.img-3.16.0-23-generic
Found memtest86+ image: /boot/memtest86+.elf
Found memtest86+ image: /boot/memtest86+.bin
Found Windows 7 (loader) on /dev/sda2

uninstall a kernel image: apt-get remove linux-image-4.2.0-30-generic

/tmp cleanup, happen on reboot:
/etc/init/mounted-tmp.conf , which uses /etc/default/rcS , use TMPTIME var

#printf builtin (in bash):
$ printf "%d" "'a"
97
$ printf "%x" "'a"
61
'a -> convert a to its ascii code

need cifs-utils to access windows server, then do: sudo mount -t cifs -o username=heech //snt2/isdc ~/j

#add shared library path
option 1:
LD_LIBRARY_PATH is an environment variable you set to give the run-time shared library loader (ld.so) an extra set of directories to look for when searching for shared libraries
example: LD_LIBRARY_PATH=~/instantclient_11_2 python3
option 2:
 create a file under /etc/ld.so.conf.d/, then run ldconfig

##print shared libraries dependencies: ldd command

need instantclient-basic-linux.x64-11.2.0.3.0.zip instantclient-sdk-linux.x64-11.2.0.3.0.zip

add include and library path gcc:
C_INCLUDE_PATH=~/instantclient_11_2/sdk/include LIBRARY_PATH=~/instantclient_11_2 pip3 install --user cx_Oracle

special case (for npm oracledb only):
OCI_INC_DIR=~/instantclient_11_2/sdk/include LIBRARY_PATH=~/instantclient_11_2 npm install oracledb

#stop this message (when running evince): Couldn't connect to accessibility bus: Failed to connect to socket /tmp/dbus-sCAvokkUFt: Connection refused
export NO_AT_BRIDGE=1

rsync -avP userid@host:/path/to/file .
also: -z for compress
-P : preserve partially copied files, you can pick up where you left off
gotchas:
#1 Copy entire directory to remote parent directory:
rsync /path/without/slash host:/path/to/parent/with/slash/
------
#1a. dest does not exist
eg. rsync -av max tmp # same as rsync -av max tmp/
result: tmp is created and max is under tmp: tmp/max
diff -r max tmp/max #identical
#1b. dest exists
eg. rsync -av max tmp # same as rsync -av max tmp/
result: max is under tmp: tmp/max
diff -r max tmp/max #identical
---
#2 Copy contents of one directory to another:
rsync -r /path/to/directory/* host:/path/to/directory/
----
#2a. dest does not or does exist (dest dir is created if necessary)
eg rsync -av max/* tmp/ # same as rsync -av max/* tmp
diff -r max tmp #identical
----------
#3 Copy a directory into a new directory on another host:
rsync /path/without/slash host:/path/to/new/directory
#4 rsync file dirname #copy file to dirname/file
#5 rsync file dirname/filename #copy file to dirname/filename
#6 rsync file dirname/ #copy file to dirname/file, creating dirname if necessary

#cp
#1: dest is a directory -> make a copy with the same name in directory
#2: dest is not a directory -> make a copy with the specified path name.

#fast way to delete large number of files
mkdir empty && rsync -r --delete empty/ some-dir && rmdir empty

#remove leading/trailing spaces from a file (in place)
sed -i -e 's/^[ \t]*//' -e 's/[ \t]*$//' <file>

ls options:
--time-style=
full-iso
long-iso
iso
locale
+%H:%M:%S:%D

ls --format=across
# ls --format=comma
# ls --format=horizontal
# ls --format=long
# ls --format=single-column
# ls --format=verbose
# ls --format=vertical

ls --sort=extension
# ls --sort=size
# ls --sort=time
# ls --sort=version
# ls --sort=none

ip addr
route -n
/etc/network/interfaces
route add default gw 146.222.122.137

ls /sys/class/net/ to see network interfaces.

redirecting stdout and stderr:
&>word
>&word
the first one is preferred.
this is equivalent to >word 2>&1

#last reboot:
last reboot
#last shutdown entries:
last -x
last -x shutdown reboot

who -a or -b #show system boot info

ubuntu-drivers

#list file descriptors in kernel memory
sysctl fs.file-nr
#same as cat /proc/sys/fs/file-nr

#list max number of file descriptors
sysctl fs.file-max
#same as cat /proc/sys/fs/file-max

sysctl -a #show all values

#motd for ssh login
/var/run/motd.dynamic

because of the 3-way handshake, the kernel has two backlog queues for socket waiting for a connection:
listen syscall backlog parameter: the limit for the accept queue of incoming connections.
There are two queues: SYN queue and accept queue.
#1. when the server receives a SYN, the connection is in SYN-RECEIVED state, and it goes to the SYN queue.
#2. when the server receives a ACK, the connection is in ESTABLISHED state, and it goes to the accept queue.
#3. the application then has to call accept syscall to remove the connection from the accept queue.

net.core.somaxconn = 128
net.ipv4.tcp_max_syn_backlog = 512
somaxconn
1. Limit of socket listen() backlog,
2. limit for the accept queue
=================
tcp_max_syn_backlog
the limit for the SYN queue

netstat -ant | grep -c SYN_REC

tcp 3-way handshake
1. client send SYN to server (client in SYN-SENT state and server in SYN-RECEIVED state)
2. server send SYN-ACK to client
3. client send ACK to server (client and server in ESTABLISHED state)

calendar:
cal -y 2014
cal -3 #show prev, current, next months
cal -d 2014-07

envsubst: substitute environment variables
e.g:
echo "this is $HOME, wow" | envsubst
this is /home/heech, wow
"this is ${HOME}, wow" | envsubst
this is /home/heech, wow

#prevent ssh from asking you to add a host to known_hosts
#1: ssh-keyscan -H host >> ~/.ssh/known_hosts
#2: ssh -o StrictHostKeyChecking=no user@host  #ask for password
#3: change /etc/ssh/ssh_config:
Host *
   StrictHostKeyChecking no

nmcli dev
DEVICE  TYPE      STATE        CONNECTION
wlan0   wifi      connected    SCC_GUEST
eth1    ethernet  unavailable  --

nmcli dev show
GENERAL.DEVICE:                         wlan0
GENERAL.TYPE:                           wifi
GENERAL.HWADDR:                         00:26:C7:3A:5F:9C
GENERAL.MTU:                            1500
GENERAL.STATE:                          100 (connected)
GENERAL.CONNECTION:                     SCC_GUEST
GENERAL.CON-PATH:                       /org/freedesktop/NetworkManager/ActiveConnection/0
IP4.ADDRESS[1]:                         ip = 192.168.92.214/23, gw = 192.168.93.253
IP4.DNS[1]:                             209.244.0.3
IP4.DNS[2]:                             209.244.0.4
IP6.ADDRESS[1]:                         ip = fe80::226:c7ff:fe3a:5f9c/64, gw = ::

find out my screen resolution:
#1: xdpyinfo | grep dimensions
#2: xrandr

#change screen resolution
type xrandr to show available name for output and resolution:
++++++++++++++++++++
Screen 0: minimum 320 x 200, current 1920 x 1080, maximum 8192 x 8192
DIN disconnected (normal left inverted right x axis y axis)
DVI-0 connected 1920x1080+0+0 (normal left inverted right x axis y axis) 531mm x 299mm
   1920x1080      60.0*+
   1280x1024      75.0     60.0
   1152x864       75.0
   1024x768       75.1     60.0
   800x600        75.0     60.3
   640x480        75.0     60.0
   720x400        70.1
DVI-1 disconnected (normal left inverted right x axis y axis)
++++++++++++++++++++
change resolution:
xrandr --output DVI-0 --mode 1920x1080

#terminate the shell if no activity for 30 seconds
export TMOUT=30

#check if my machine is being pinged
tcpdump -ni eth2 icmp
#capture 2 packets and display packets n hex and ascii, write to a file, -tttt: print a timestamp
tcpdump -ni eth2 -c 2 -XX -w filename -tttt
# -n : do not resolve IP address, -X: display hex and ascii content, -S: show absolute sequence number
# -nn: do not resolve IP address or port number
# -XX: -X plus ethernet header
# -A : print in ascii only
tcpdump -nXS
# -D: show available interfaces
# -c : get x number of packets
# -s : show x bytes: -s 0 to show everything (default: 65535)
tcpdump -nn -XX -i eth2 -c 2 -s 0 -v icmp
tcpdump -nn -XX -i eth2 -c 2 -s 0 -v tcp
tcpdump -nn -XX -i eth2 -c 2 -s 0 -v udp
#
tcpdump -nn -XX -i eth2 -v host <ip>
tcpdump -nn -XX -i eth2 -v src <ip>
tcpdump -nn -XX -i eth2 -v dst <ip>
tcpdump -nn -XX -i eth2 -v net 1.2.3.0/24
tcpdump -nn -XX -i eth2 -v port 3389
tcpdump -nn -XX -i eth2 -v src port 3389
tcpdump -nn -XX -i eth2 -v dst port 3389
tcpdump src port 1025 and tcp
tcpdump portrange 21-23
#only see packets below or above a certain size (in bytes)
tcpdump less 32
tcpdump greater 128
===
tcpdump -nnvvS src 10.5.2.3 and dst port 3389
===
tcpdump 'src 10.0.2.4 and (dst port 3389 or 22)'
=== common use
tcpdump -nnXv -i eth2 host 146.222.121.69
tcpdump -nnAv -i eth2 host 146.222.121.69
=====
tcpdump -nnvvvA -i eth2 -w file.pcap host <ip>
=======
tcpdump broadcast/tcp/udp/icmp

#related to ulimit
/etc/security/limits.conf

useful shortcuts for top command:
1 : show individual cpu
z : highlight running processes
c : show absolute path of process

run with an empty environment: env -i

port scanning:
nmap -sT -p- -Pn <hostname or IP>

systemctl list-unit-files --type=service

xxd: make a hex dump

manipulate or dump object files: objcopy and objdump
objdump : display info from object file
nm: list symbols from object file

readlink: follow symbolic link
readlink -e `which google-chrome`
/opt/google/chrome/google-chrome

== virtual console
tty1 through 6 : there is a getty process
To access virtual console from X11: Ctrl-Alt-F1 thru F6
Once in virtual console, can use Alt-F1 throu 6 to switch. can also use alt-lefarrow and alt-rightarrow to cycle

X11 is running on tty7

do it from a command line: chvt 1
== virtual console

keyboard related programs:
loadkeys
showkey

download a full website:
wget --random-wait -r -p -e robots=off -U mozilla www.example.com

pmap: show memory map of a process
/proc/[pid]/statm:
  field #1: size, mapped to VIRT
  field #2: resident, mapped to RES
  field #3: share, mapped to SHR
  field #4: text, mapped to CODE
  field #5: lib , always 0
  field #6: data, mapped to DATA
  field #7: dt, always 0
/proc/[pid]/maps -> similar to output of pmap
/proc/[pid]/smaps
/proc/[pid]/status
/proc/meminfo
smem program

#add new repo
#1: add key: apt-key add <key>
#2: add a file to /etc/apt/sources.list.d, call it something like docker.list

ps f : show process hierarchy
ps a : show processes owned by others
ps x : those without tty
ps u : user-friendly format
ps -L : show threads (LWP (lightweight process column))

7z a -mhe=on -ppassword important.7z important.txt for-honey.txt

check battery:
upower -i /org/freedesktop/UPower/devices/battery_BAT0 # deprecated supposedly
OR
cat /sys/class/power_supply/BAT0/uevent

#take every 10th line from the file
awk '!(NR % 10)' test.txt

#find working directory of a running process
#1. pwdx <pid1> <pid2>
#2. lsof -p <pid> | grep cwd
#3. readlink -e /proc/<pid>/cwd

pv program: show progress of task

pkg-config: manage compile and link flags for libraries (intended to work with automake and autoconf.)
provide the necessary details for compiling and linking a program to a library.

#convert doc to various format
$ pandoc -t plain README.md
-f : specify input format
-t : specify output format
-o : write to a file

#write a tab literal in Bash command line
$'\t'

#bash: create a string literal
$'..' : create a string with backslash-escaped characters.
example: $'\n\t'

$ ls -d .*
all files/directories that start with ., include . and ..
$ ls -d .[^.]*
all files/directories that start with ., exclude . and ..

---
autotools:
autogen.sh -> generate configure script
configure -> create a makefile

printer stuff:
system-config-printer
lpstat -d

UML: user mode linux
#1: create a .config file
1a. this is better
make ARCH=um defconfig
1b. may not work
make ARCH=um allnoconfig KCONFIG_ALLCONFIG=mini.config
#2: build it
make ARCH=um
#3: run it
./kernel ubda=Slamd64-12.1-root_fs mem=512m
#show config
./kernel --showconfig
====
linux kernel:
#takes current config (.config) and update it based on new kernel release
make oldconfig/silentoldconfig

verifying linux kernel signature:
$ xzcat linux-4.4.tar.xz | gpg --verify linux-4.4.tar.sign -
gpg: Signature made Sun 10 Jan 2016 03:09:18 PM PST using RSA key ID 00411886
gpg: Can't check signature: public key not found
$ gpg --keyserver hkp://keys.gnupg.net --recv-keys 00411886
gpg: requesting key 00411886 from hkp server keys.gnupg.net
gpg: keyserver timed out
gpg: keyserver receive failed: keyserver error

passing an environment to a process (one-off):
$ VAR=value ./test.sh
#note cannot do ./test.sh VAR=HI

#scan a port
nmap -p6000 localhost
#version scan
nmap -p7474 -sV localhost
#TCP SYN scan
nmap -p7474 -sS localhost
#
nmap -oA #output in 3 major formats

#make your script more robust
set -euo pipefail

#check dirty pages in page cache
$ cat /proc/meminfo | grep Dirty
Dirty:               204 kB
#flush system buffers
$ sync


As of 2.4 kernel, these two caches (page and buffer caches) have been combined. Today, there is only
one cache, the Page Cache
---
Buffers are in-memory block I/O buffers. They are relatively short-lived. Prior to Linux
kernel version 2.4, Linux had separate page and buffer caches. Since 2.4, the page and
buffer cache are unified and Buffers is raw disk blocks not represented in the page
cache—i.e., not file data. The Buffers metric is thus of minimal importance.


#I/O scheduler
cat /sys/block/sda/queue/scheduler
--> noop [deadline] cfq
CFQ : Completely Fair Queuing

#ulimit:
/etc/security/limits.conf

#run stress test
siege --log=siege.log -t5M -c 4 -i -b -f url.txt

tmux: from 2 horizontal panes to 2 vertical panes (and vice versa)
Prefix <SPC> : cycle through available layouts (bound to next-layout)
Prefix Alt-1 : even horizontal
Prefix Alt-2 : even vertical

ssh X11 forwarding
want to display on my-machine (where X server is running)
remote (where client will be run)

On my-machine: ssh -X user@remote

#check for CRLF ending:
$ file /a/tapasjo/copy-paste.txt
/a/tapasjo/copy-paste.txt: ASCII text, with CRLF line terminators
---
$ grep -c  $'\r' /a/tapasjo/copy-paste.txt
27

braces:
trimming with variable substition:
$ var=foo.pdf
$ echo ${var%.pdf} #trim suffix
foo
$ echo ${var#foo} #trim prefix
.pdf
====
#parameter substitution:
IP=1.2.3.4
echo ${IP/./ }
1 2.3.4
echo ${IP//./ }
1 2 3 4
#an extra / means global substitution
====
$ echo {00..8..2}
00 02 04 06 08
$ echo {00..8}
00 01 02 03 04 05 06 07 08
$ echo {D..T..4}
D H L P T

single bracket vs double bracket
single: POSIX
double: non-POSIX, only in bash, zsh, ksh
[ is a shell builtin and a program (/usr/bin/[
[[ is a keyword

profiling java program with perf:
#1. profiling: generate a file called perf.data
sudo perf record -F 99 -a -g sleep 30
OR
sudo perf record -F 99 -a -g -p PID sleep 30
#2. create method mappings : create a file called /tmp/perf-pid.map
    this file is used to translate memory address into function and variable names (used by perf report/script)
/home/heech/gitrepo/perf-map-agent/create-java-perf-map.sh <pid>
#3. generate flame graph (need perf.data in current directory)
sudo perf script | ~/gitrepo/FlameGraph/stackcollapse-perf.pl | ~/gitrepo/FlameGraph/flamegraph.pl --color=java --hash > flamegraph.svg
# text report
sudo perf report --stdio
#ncurses window
sudo perf report
#list raw event
sudo script
===
#cpu counter stats
perf stat -a sleep 10

Ctrl-x, Ctrl-e : will bring up an $EDITOR containing whatever is currently entered into the prompt.
  "\C-x\C-e": edit-and-execute-command
Ctrl-Alt-e to expand any placeholders/variables in the current line.
  "\e\C-e": shell-expand-line

echo ~- # echo previous directory

#capture output of command into clipboard
"do stuff" | xsel -ib

kernel version numbering
example: 4.2.0-34
4: kernel version
2: major revision of the kernel version
0: minor revision of the kernel. It is only changed when new features or new drivers are added.
34: The fourth number represents corrections, such as security patches and bug (i.e., error) fixes

#show kernel drivers handling each device and also kernel modules capable of handling it.
lspci -kv
#check graphic driver
lspci -k |grep -iA2 vga

if the system hangs:
Hold down the ‘alt’ and ‘sysrq’ keys on your keyboard and whilst they are held down type the following slowly:
REISUB

#get SATA/IDE device info
hdparm /dev/sda

badblocks : search a device for bad blocks
readelf: display info about ELF files

procfs: originally intended to expose process info, then became a big mess
sysfs: expose kernel info

kernel diff and patch:
#1 generate patch
diff -Naur -X linux-2.6.19/Documentation/dontdiff linux-2.6.19/ linux-2.6.19-dirty/ > my_patch
#2 apply patch
cd linux-2.6.19; patch -p1 < ../patch-2.6.20

kernel entry point:
arch/x86/boot/header.S -> calll main

loop device is a pseudo ("fake") device (actually just a file) that acts as a block-based device. a file that contains a filesystem

#system-wide limit on open file descriptors
cat /proc/sys/fs/file-max
#change limit:
/etc/security/limits.conf
/etc/sysctl.conf

from setrlimit (ulimit is a wrapper around setrlimit):
===
The soft limit is the value that the kernel enforces for the corresponding resource.  The hard limit
acts as a ceiling for the soft limit: an unprivileged process may set only its soft limit to a value
in the range from 0 up to the hard limit, and (irreversibly) lower its hard limit.  A privileged
process (under Linux: one with the CAP_SYS_RESOURCE capability) may make arbitrary changes to either
limit value.

#time zone: display time
$ TZ="America/New_York" date
Tue Apr 19 10:51:17 EDT 2016
#time zone files: /usr/share/zoneinfo/

cat /etc/os-release
