ldd : print shared library dependencies

=====
boot-up:

run scripts at startup : put in /etc/rc.local
others:
/etc/init.d/rcS
run scripts in /etc/rc2.d, which links to /etc/init.d

create init-style startup script:
update-rc.d <name> defaults

read /etc/rc2.d/README

default runlevel in /etc/init/rc-sysinit.conf

#start service at boot-up:
update-rc.d SERVICENAME defaults

#remove service from start at boot-up
update-rc.d -f service_name remove

===================================
#ways to manage upstart/init job

upstart jobs are in /etc/init
initctl list : list upstart job

#1:
#start/stop upstart job
start/stop/status docker #as root

#2:
#service
service --status-all
service docker stop/start/restart

#3:
/etc/init.d/docker start/stop/status

#4:
invoke-rc.d docker status

==================================

/etc/init/ttyN.conf : start a getty process for ttyN
stop tty6 : stop tty6

/etc/init/control-alt-delete.conf; define behavior for ctrl-alt-del

/var/log : lots of logs
/var/lib
/var/spool
/usr/share

/var/log/syslog
/var/log/auth.log #sudo log
/var/log/Xorg.0.log
/var/log/apport.log
/var/log/kern.log
/var/log/wtmp
/var/log/pm-powersave.log
/var/log/gpu-manager.log
/var/log/boot.log
/var/log/dmesg
/var/log/udev
/var/log/dpkg.log
/var/log/alternatives.log
/var/log/upstart/
/var/log/lightdm/

dig: DNS lookup utility

file copy tool: rsync

lsmod: list kernel module
modinfo: display module info
modules are in /lib/modules/
rmmod: remove modules
modprobe: add or remove modules

--cron change
move popularity-contest from /etc/cron.daily to ~root/cron
move bsdmainutils from /etc/cron.daily to ~root/cron
move mlocate from /etc/cron.daily to /etc/cron.monthly
move locate from /etc/cron.daily to /etc/cron.monthly

--cron change 2015-01-16
change /etc/cron.daily/locate:
 add "/C /D /Data" to PRUNEPATHS
 add vboxsf to PRUNEFS

/etc/updatedb.conf:
   add /C to prunepaths
   add vboxsf to prunefs
DB: /var/lib/mlocate/mlocate.db

consider disabling mlocate cron job

anacron: for desktops and laptops that are not running 24/7
/var/spool/anacron
/etc/anacrontab

run-parts --report /etc/cron.daily

ufw - program for managing a netfilter firewall
ufw allow 22

sudo visudo #change /etc/sudoers file:
#allow user cheok to run docker without being prompted for the password
#sudo only ask for password per xterm session
added this line:
cheok ALL=(ALL) NOPASSWD: /usr/bin/docker

#swappiness
#the smaller the number, the less aggressive linux will swap
cat /proc/sys/vm/swappiness

/etc/sysctl.conf

iftop : display bandwidth usage on an interface by host
whois : client for the whois directory service

font cache commands:
fc-cache
fc-cat
fc-list
fc-match
fc-pattern
fc-query
fc-scan
fc-validate

fc : shell builtin that display and edits command
help fc : help is a shell builtin

#show distro info : LSB: linux standard base
--> lsb_release -a
output:
Distributor ID: Ubuntu
Description:    Ubuntu 14.10
Release:        14.10
Codename:       utopic

/etc/os-release

partprobe: inform the OS of partition table changes

commands:
lsattr
lsblk
lsb_release
lscpu
lsdiff
lshw
lsinitramfs
lslocks
lsmod
lsnrctl
lsof
lspci
lspcmcia
lspgpot
lsusb

initramfs: initial RAM-based filesystem: allow the kernel to execute programs before the root filesystem is mounted.

GRUB config:
make a copy of /etc/default/grub and /boot/grub/grub.cfg
1. change /etc/default/grub
GRUB_DEFAULT=saved
GRUB_SAVEDEFAULT=true
2. run update-grub , this will change /boot/grub/grub.cfg
output of update-grub:
Found linux image: /boot/vmlinuz-3.16.0-30-generic
Found initrd image: /boot/initrd.img-3.16.0-30-generic
Found linux image: /boot/vmlinuz-3.16.0-23-generic
Found initrd image: /boot/initrd.img-3.16.0-23-generic
Found memtest86+ image: /boot/memtest86+.elf
Found memtest86+ image: /boot/memtest86+.bin
Found Windows 7 (loader) on /dev/sda2

/tmp cleanup, happen on reboot:
/etc/init/mounted-tmp.conf , which uses /etc/default/rcS , use TMPTIME var

#printf builtin (in bash):
$ printf "%d" "'a"
97
$ printf "%x" "'a"
61
'a -> convert a to its ascii code

need cifs-utils to access windows server, then do: sudo mount -t cifs -o username=heech //snt2/isdc ~/j

#add shared library path
option 1:
LD_LIBRARY_PATH is an environment variable you set to give the run-time shared library loader (ld.so) an extra set of directories to look for when searching for shared libraries
example: LD_LIBRARY_PATH=~/instantclient_11_2 python3
option 2:
 create a file under /etc/ld.so.conf.d/, then run ldconfig

##print shared libraries dependencies: ldd command

need instantclient-basic-linux.x64-11.2.0.3.0.zip instantclient-sdk-linux.x64-11.2.0.3.0.zip

add include and library path gcc:
C_INCLUDE_PATH=~/instantclient_11_2/sdk/include LIBRARY_PATH=~/instantclient_11_2 pip3 install --user cx_Oracle

special case (for npm oracledb only):
OCI_INC_DIR=~/instantclient_11_2/sdk/include LIBRARY_PATH=~/instantclient_11_2 npm install oracledb

#stop this message (when running evince): Couldn't connect to accessibility bus: Failed to connect to socket /tmp/dbus-sCAvokkUFt: Connection refused
export NO_AT_BRIDGE=1

rsync -avP userid@host:/path/to/file .
also: -z for compress
-P : preserve partially copied files, you can pick up where you left off
gotchas:
#1 Copy entire directory to remote parent directory:
rsync /path/without/slash host:/path/to/parent/with/slash/
------
#1a. dest does not exist
eg. rsync -av max tmp # same as rsync -av max tmp/
result: tmp is created and max is under tmp: tmp/max
diff -r max tmp/max #identical
---
#2 Copy contents of one directory to another:
rsync -r /path/to/directory/* host:/path/to/directory/
#3 Copy a directory into a new directory on another host:
rsync /path/without/slash host:/path/to/new/directory
#4 rsync file dirname #copy file to dirname/file
#5 rsync file dirname/filename #copy file to dirname/filename
#6 rsync file dirname/ #copy file to dirname/file, creating dirname if necessary

#cp
#1: dest is a directory -> make a copy with the same name in directory
#2: dest is not a directory -> make a copy with the specified path name.

#fast way to delete large number of files
mkdir empty && rsync -r --delete empty/ some-dir && rmdir empty

#remove leading/trailing spaces from a file (in place)
sed -i -e 's/^[ \t]*//' -e 's/[ \t]*$//' <file>

ls options:
--time-style=
full-iso
long-iso
iso
locale
+%H:%M:%S:%D

ls --format=across
# ls --format=comma
# ls --format=horizontal
# ls --format=long
# ls --format=single-column
# ls --format=verbose
# ls --format=vertical

ls --sort=extension
# ls --sort=size
# ls --sort=time
# ls --sort=version
# ls --sort=none

ip addr
route -n
/etc/network/interfaces
route add default gw 146.222.122.137

ls /sys/class/net/ to see network interfaces.

redirecting stdout and stderr:
&>word
>&word
the first one is preferred.
this is equivalent to >word 2>&1

#last reboot:
last reboot
#last shutdown entries:
last -x
last -x shutdown reboot

who -a or -b #show system boot info

ubuntu-drivers

#list file descriptors in kernel memory
sysctl fs.file-nr
#same as cat /proc/sys/fs/file-nr

#list max number of file descriptors
sysctl fs.file-max
#same as cat /proc/sys/fs/file-max

sysctl -a #show all values

#motd for ssh login
/var/run/motd.dynamic

because of the 3-way handshake, the kernel has two backlog queues for socket waiting for a connection:
listen syscall backlog parameter: the limit for the accept queue of incoming connections.
There are two queues: SYN queue and accept queue.
#1. when the server receives a SYN, the connection is in SYN-RECEIVED state, and it goes to the SYN queue.
#2. when the server receives a ACK, the connection is in ESTABLISHED state, and it goes to the accept queue.
#3. the application then has to call accept syscall to remove the connection from the accept queue.

net.core.somaxconn = 128
net.ipv4.tcp_max_syn_backlog = 512
somaxconn
1. Limit of socket listen() backlog,
2. limit for the accept queue
=================
tcp_max_syn_backlog
the limit for the SYN queue

netstat -ant | grep -c SYN_REC

tcp 3-way handshake
1. client send SYN to server (client in SYN-SENT state and server in SYN-RECEIVED state)
2. server send SYN-ACK to client
3. client send ACK to server (client and server in ESTABLISHED state)

calendar:
cal -y 2014
cal -3 #show prev, current, next months
cal -d 2014-07

envsubst: substitute environment variables
e.g:
echo "this is $HOME, wow" | envsubst
this is /home/heech, wow
"this is ${HOME}, wow" | envsubst
this is /home/heech, wow

#prevent ssh from asking you to add a host to known_hosts
#1: ssh-keyscan -H host >> ~/.ssh/known_hosts
#2: ssh -o StrictHostKeyChecking=no user@host  #ask for password
#3: change /etc/ssh/ssh_config:
Host *
   StrictHostKeyChecking no

nmcli dev
DEVICE  TYPE      STATE        CONNECTION
wlan0   wifi      connected    SCC_GUEST
eth1    ethernet  unavailable  --

nmcli dev show
GENERAL.DEVICE:                         wlan0
GENERAL.TYPE:                           wifi
GENERAL.HWADDR:                         00:26:C7:3A:5F:9C
GENERAL.MTU:                            1500
GENERAL.STATE:                          100 (connected)
GENERAL.CONNECTION:                     SCC_GUEST
GENERAL.CON-PATH:                       /org/freedesktop/NetworkManager/ActiveConnection/0
IP4.ADDRESS[1]:                         ip = 192.168.92.214/23, gw = 192.168.93.253
IP4.DNS[1]:                             209.244.0.3
IP4.DNS[2]:                             209.244.0.4
IP6.ADDRESS[1]:                         ip = fe80::226:c7ff:fe3a:5f9c/64, gw = ::

find out my screen resolution:
#1: xdpyinfo | grep dimensions
#2: xrandr

#change screen resolution
type xrandr to show available name for output and resolution:
++++++++++++++++++++
Screen 0: minimum 320 x 200, current 1920 x 1080, maximum 8192 x 8192
DIN disconnected (normal left inverted right x axis y axis)
DVI-0 connected 1920x1080+0+0 (normal left inverted right x axis y axis) 531mm x 299mm
   1920x1080      60.0*+
   1280x1024      75.0     60.0
   1152x864       75.0
   1024x768       75.1     60.0
   800x600        75.0     60.3
   640x480        75.0     60.0
   720x400        70.1
DVI-1 disconnected (normal left inverted right x axis y axis)
++++++++++++++++++++
change resolution:
xrandr --output DVI-0 --mode 1920x1080

#terminate the shell if no activity for 30 seconds
export TMOUT=30

#check if my machine is being pinged
tcpdump -ni eth2 icmp
#capture 2 packets and display packets n hex and ascii, write to a file, -tttt: print a timestamp
tcpdump -ni eth2 -c 2 -XX -w filename -tttt

#related to ulimit
/etc/security/limits.conf

useful shortcuts for top command:
1 : show individual cpu
z : highlight running processes
c : show absolute path of process

run with an empty environment: env -i

port scanning:
nmap -sT -p- -Pn <hostname or IP>

systemctl list-unit-files --type=service

xxd: make a hex dump

manipulate or dump object files: objcopy and objdump

readlink: follow symbolic link
readlink -e `which google-chrome`
/opt/google/chrome/google-chrome

== virtual console
tty1 through 6 : there is a getty process
To access virtual console from X11: Ctrl-Alt-F1 thru F6
Once in virtual console, can use Alt-F1 throu 6 to switch. can also use alt-lefarrow and alt-rightarrow to cycle

X11 is running on tty7

do it from a command line: chvt 1
== virtual console

keyboard related programs:
loadkeys
showkey

download a full website:
wget --random-wait -r -p -e robots=off -U mozilla www.example.com

pmap: show memory map of a process
/proc/[pid]/statm:
  field #1: size, mapped to VIRT
  field #2: resident, mapped to RES
  field #3: share, mapped to SHR
  field #4: text, mapped to CODE
  field #5: lib , always 0
  field #6: data, mapped to DATA
  field #7: dt, always 0
/proc/[pid]/maps
/proc/[pid]/smaps
/proc/[pid]/status
/proc/meminfo
smem program

#add new repo
#1: add key: apt-key add <key>
#2: add a file to /etc/apt/sources.list.d, call it something like docker.list

ps f : show process hierarchy
ps a : show processes owned by others
ps x : those without tty
ps u : user-friendly format

7z a -mhe=on -ppassword important.7z important.txt for-honey.txt

check battery:
upower -i /org/freedesktop/UPower/devices/battery_BAT0 # deprecated supposedly
OR
cat /sys/class/power_supply/BAT0/uevent

#take every 10th line from the file
awk '!(NR % 10)' test.txt

#find working directory of a running process
#1. pwdx <pid1> <pid2>
#2. lsof -p <pid> | grep cwd
#3. readlink -e /proc/<pid>/cwd

pv program: show progress of task

pkg-config: manage compile and link flags for libraries (intended to work with automake and autoconf.)
provide the necessary details for compiling and linking a program to a library.

#convert doc to various format
$ pandoc -t plain README.md
-f : specify input format
-t : specify output format
-o : write to a file

#write a tab literal in Bash command line
$'\t'

#bash: create a string literal
$'..' : create a string with backslash-escaped characters.
example: $'\n\t'

$ ls -d .*
all files/directories that start with ., include . and ..
$ ls -d .[^.]*
all files/directories that start with ., exclude . and ..

---
autotools:
autogen.sh -> generate configure script
configure -> create a makefile

printer stuff:
system-config-printer
lpstat -d
