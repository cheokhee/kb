which commands to use:
#generate private key
openssl genrsa ...
#get info from private key, generate public key from private key
openssl rsa ...
#generate a certificate signing request
openssl req -new ...
#generate a self-signed certificate
openssl req -new -x509 ....
#show cert info
openssl x509
#sign CSR
openssl x509 -req -in server.csr -CA myCA.pem -CAkey myCA.key -CAcreateserial -out server.pem -days 3650 -sha256

openssl list-cipher-algorithms
openssl list-message-digest-algorithms
openssl list-public-key-algorithms

#generate private key
openssl genrsa -out ca.key 4096 #no passphrase
openssl genrsa -aes128 -out ca.key 4096 #ask for passphrase if a cipher is specified

openssl s_client -connect www.google.com:443 #port 443: HTTPS
openssl genrsa -des3 1024 > server.key
openssl s_server -cert server.pem -accept 4433 -WWW #port 4433 is default, server.pem contains cert and key
openssl s_server -quiet -accept 4433 #default: server.pem in current directory, without WWW: echo client input
openssl ciphers -v

#generate a key and cert (unencrypted private key: no passphrase)
openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout key.pem -out server.pem
#generate a self-signed cert based on an existing key (with passphrase)
openssl req -new -key server.key -x509 -days 3650 -out server.crt

#generate a certificate signing request
openssl req -new ....
#generate a self-signed certificate
openssl req -new -x509 ....
#view CSR
openssl req -text -verify -in xxx.csr

#if cert does not contain key
openssl s_server -key key.pem -WWW #use server.pem as cert and port 4433 by default, emulate a web server
openssl s_server -key key.pem -www #send lots of info back to client

#generate a request
openssl req -new -key key.pem -out req.pem

#sign a digest
openssl dgst -sha1 -sign key.pem -out gpgtest.txt.sha gpgtest.txt
#verify a signed digest
openssl dgst -sha1 -verify pubkey.pem -signature gpgtest.txt.sha gpgtest.txt

#show cert info
openssl x509 -in server.pem -text
#download SSL cert
openssl s_client -connect <host>:443 < /dev/null
openssl s_client -connect <host>:443 -showcerts #show cert chain
#extract CA cert
openssl s_client -connect www.google.com:443 | tee certfile
#after previous command, type QUIT , then return
The certfile will have the info.
openssl x509 -inform PEM -in certfile -out
#extract cert from certfile
openssl x509 -inform PEM -in certfile
#show cert info
openssl x509 -inform PEM -in certfile -text

#download certificate and save in x509 format (USE THIS)
#if remote host is using SNI, eg. sharing multiple SSL hosts on a single IP address
openssl x509 -in <(openssl s_client -servername host -connect host:8443 2>/dev/null) -out example.crt
#if remote host is not using SNI
openssl x509 -in <(openssl s_client -connect host:8443 2>/dev/null) -out example.crt
#openssl x509 -in <(openssl s_client -connect host:8443 -prexit 2>/dev/null) -out example.crt
#download SSL cert
#if get this error: No SNI provided; please fix your client
#need to specify -servername
openssl s_client -servername <host> -connect <host>:443 < /dev/null

#generate private key
openssl genrsa -out key.pem 4096
#get info about private key
openssl rsa -in key.pem -text -noout
#generate pub key
openssl rsa -in key.pem -pubout -out pubkey.pem

openssl verify server.pem

#in /etc/shadow: the salt is the characters btw the second and third dollar signs
#example: $6$VNOiaeVW$LOTcBMu1UTdb1WqOOHDjTu6RCB34EgKk1EnbsqyK4VELCV2bDaZ02ipKKwViz1KMdR1nZZrq7wtpC5s47srrb1
openssl passwd -1 -salt VNOiaeVW adminuser

#test whether a prime number
openssl prime 4

/usr/lib/ssl/openssl.cnf
/etc/ssl/certs/
/usr/lib/ssl/misc

encrypting file:
openssl enc -e -aes256 -in font2.txt -out font2-enc.txt
--decrypting
openssl enc -d -aes256 -in font2-enc.txt -out new.txt

/usr/local/share/ca-certificates/
/etc/ssl/certs/

examples from:
https://stackoverflow.com/questions/23601989/client-certificate-validation-on-server-side-depth-zero-self-signed-cert-error
====
openssl genrsa -out ca.key 4096  #generate private key
openssl req -x509 -new -nodes -key ca.key -days 999 -out ca.pem #generate self-signed certificate

openssl genrsa -out server1.key 1024
openssl req -new -key server1.key -out server1.csr
openssl x509 -req -days 999 -in server1.csr -CA ca.pem -CAkey ca.key -set_serial 01 -out server1.pem

openssl genrsa -out client1.key 1024
openssl req -new -key client1.key  -out client1.csr
openssl x509 -req -days 999 -in client1.csr -CA ca.pem -CAkey ca.key -set_serial 01 -out client1.pem

openssl genrsa -out server2.key 1024
openssl req -new -key server2.key  -out server2.csr
openssl x509 -req -days 999 -in server2.csr -CA server1.pem -CAkey server1.key -set_serial 02 -out server2.pem

openssl genrsa -out client2.key 1024
openssl req -new -key client2.key -out client2.csr
openssl x509 -req -days 999 -in client2.csr -CA client1.pem -CAkey client1.key -set_serial 02 -out client2.pem
====

create SSL certificate signed by my own CA
===
(A) create my own CA:
1. create my own CA private key
openssl genrsa -out ca.key 4096
2. create self-signed certificate for my own CA
openssl req -x509 -new -nodes -key ca.key -days 3650 -out ca.pem
===
Now ca.pem represent my own CA
====
(B) create SSL certificate for my server
B1. create private key
openssl genrsa -out server1.key 2048
B2. create certificate signing request
openssl req -new -key server1.key -out server1.csr
B3. sign the CSR
openssl x509 -req -days 3650 -in server1.csr -CA ca.pem -CAkey ca.key -set_serial 01 -out server1.pem

verify a certificate is signed by a particular CA
openssl verify -CAfile ca.pem server1.pem

#print all certs in a bundle
keytool -printcert -v -file /etc/ssl/certs/ca-certificates.crt

openssl crl2pkcs7 -nocrl -certfile /etc/ssl/certs/ca-certificates.crt | openssl pkcs7 -print_certs -text -noout

digital certificate: certify the ownership of a public key by the named subject in the
certificate. binds a public key to an entity. The binding is asserted by having a trusted
Certification Authority (CA) verify the identity of prospective certificate owners
